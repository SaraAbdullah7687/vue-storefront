import { CldOptions, CloudConfig } from '@cld-apis/types';
import { extractPublicId } from './url';
import { transform, toTransformationStr } from './transformers';
export declare const getConfig: () => Readonly<{}>;
export declare const setConfig: (options: CloudConfig) => {
    apiKey?: string;
    apiSecret?: string;
    cloudName?: string;
    cname?: string;
    privateCdn?: boolean;
    resourceType?: import("@cld-apis/types").ResourceType;
    secure?: boolean;
    secureDistribution?: string;
    storageType?: import("@cld-apis/types").StorageType;
    shorten?: string;
    urlSuffix?: string;
    useRootPath?: boolean;
    cdnSubdomain?: boolean;
    version?: string | number;
    signature?: string;
    forceVersion?: boolean;
};
export declare const buildUrl: (publicId: string, { cloud, transformations }: CldOptions) => string;
export declare const buildImageUrl: (publicId: string, { cloud, transformations }: CldOptions) => string;
export declare const buildVideoUrl: (publicId: string, { cloud, transformations }: CldOptions) => string;
declare type TransformerType = {
    transform: typeof transform;
    toString: typeof toTransformationStr;
};
declare const Transformer: TransformerType;
export { extractPublicId, Transformer };
export default buildUrl;
