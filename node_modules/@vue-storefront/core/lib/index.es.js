import { onServerPrefetch, ref, isRef, useRouter, computed, unref } from '@nuxtjs/composition-api';
import axios from 'axios';

var onSSR = onServerPrefetch;
var vsfRef = ref;
var configureSSR = function (config) {
    onSSR = config.onSSR || onSSR;
    vsfRef = config.vsfRef || vsfRef;
};

function sharedRef(value, key) {
    var $sharedRefsMap = useVSFContext().$sharedRefsMap;
    var givenKey = key || value;
    if ($sharedRefsMap.has(givenKey)) {
        return $sharedRefsMap.get(givenKey);
    }
    var newRef = vsfRef(key ? value : null, givenKey);
    $sharedRefsMap.set(givenKey, newRef);
    return newRef;
}

function wrap(element) {
    return isRef(element) ? element : ref(element);
}

/*! *****************************************************************************
Copyright (c) Microsoft Corporation.

Permission to use, copy, modify, and/or distribute this software for any
purpose with or without fee is hereby granted.

THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
PERFORMANCE OF THIS SOFTWARE.
***************************************************************************** */

var __assign = function() {
    __assign = Object.assign || function __assign(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};

function __rest(s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
}

function __awaiter(thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
}

function __generator(thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
}

function __spreadArray(to, from) {
    for (var i = 0, il = from.length, j = to.length; i < il; i++, j++)
        to[j] = from[i];
    return to;
}

var LogName;
(function (LogName) {
    LogName["Error"] = "error";
    LogName["Info"] = "info";
    LogName["Debug"] = "debug";
    LogName["None"] = "none";
    LogName["Warn"] = "warn";
})(LogName || (LogName = {}));
var LogLevelStyle = {
    Log: 'background:#5ece7b; padding: 2px; border-radius: 0 2px 2px 0;  color: #fff;',
    Info: 'background:#0468DB; padding: 2px; border-radius: 0 2px 2px 0;  color: #fff;',
    Warn: 'background:#ecc713; padding: 2px; border-radius: 0 2px 2px 0;  color: #000;',
    Error: 'background:#d12727; padding: 2px; border-radius: 0 2px 2px 0;  color: #fff'
};

var detectNode = Object.prototype
    .toString
    .call(typeof process !== 'undefined'
    ? process
    : 0) === '[object process]' ||
    process.env.APPLICATION_ENV === 'production';
var mountLog = function (name, style) {
    if (detectNode) {
        return ["".concat(name, ": ")];
    }
    return [
        "%c".concat(name, "%c:"),
        style,
        'background: transparent;'
    ];
};

function makeMessageStyle(logEnum) {
    switch (logEnum) {
        case LogName.Error:
            return mountLog('[VSF][error]', LogLevelStyle.Error);
        case LogName.Info:
            return mountLog('[VSF][info]', LogLevelStyle.Info);
        case LogName.Warn:
            return mountLog('[VSF][warn]', LogLevelStyle.Warn);
        case LogName.Debug:
            return mountLog('[VSF][debug]', LogLevelStyle.Log);
        case LogName.None:
        default:
            return mountLog('[VSF]', LogLevelStyle.Log);
    }
}

// eslint-disable-next-line @typescript-eslint/ban-types
function makeMethod(logEnum, fn) {
    return function () {
        return Function.prototype.bind.apply(fn, __spreadArray([
            console
        ], makeMessageStyle(logEnum)));
    };
}

/* istanbul ignore file */
var defaultLogger = {
    debug: makeMethod(LogName.Debug, console.debug)(),
    info: makeMethod(LogName.Info, console.info)(),
    warn: makeMethod(LogName.Warn, console.warn)(),
    error: makeMethod(LogName.Error, console.error)()
};

var defaultModes = {
    // Test
    test: 'none',
    // Development
    dev: 'warn',
    development: 'warn',
    // Production
    prod: 'error',
    production: 'error',
    // Fallback
    default: 'warn'
};
var Logger = defaultLogger;
var registerLogger = function (loggerImplementation, verbosity) {
    if (typeof loggerImplementation === 'function') {
        Logger = loggerImplementation(verbosity);
        return;
    }
    switch (verbosity) {
        case 'info':
            Logger = __assign(__assign(__assign({}, defaultLogger), loggerImplementation), { debug: function () { } });
            break;
        case 'warn':
            Logger = __assign(__assign(__assign({}, defaultLogger), loggerImplementation), { info: function () { }, debug: function () { } });
            break;
        case 'error':
            Logger = __assign(__assign(__assign({}, defaultLogger), loggerImplementation), { info: function () { }, warn: function () { }, debug: function () { } });
            break;
        case 'none':
            Logger = {
                debug: function () { },
                info: function () { },
                warn: function () { },
                error: function () { }
            };
            break;
        default:
            Logger = __assign(__assign({}, defaultLogger), loggerImplementation);
    }
};
registerLogger(defaultLogger, defaultModes[process.env.NODE_ENV] || defaultModes.default);

/**
 * Adds prefix with base path configured in router.base to provided url
 * @param {string} path - url to which base path will be added
 * @returns Relative path prefixed with router.base or not modified absolute path (it needs start from http or https)
 */
function addBasePath(path) {
    var pattern = /^((http|https):\/\/)/;
    if (pattern.test(path)) {
        return path;
    }
    var basePath = (useRouter().options.base).slice(0, -1);
    return "".concat(basePath).concat(path);
}

var maskString = function (el) { return "".concat(el.charAt(0), "***").concat(el.slice(-1)); };
var maskAny = function (el) {
    if (typeof el === 'string') {
        return maskString(el);
    }
    return '***';
};
var mask = function (el) {
    if (typeof el === 'object' && !Array.isArray(el)) {
        return Object.keys(el).reduce(function (prev, key) {
            var _a;
            return (__assign(__assign({}, prev), (_a = {}, _a[key] = maskAny(el[key]), _a)));
        }, {});
    }
    return maskAny(el);
};

var useVSFContext = function () { return ({}); };
var configureContext = function (config) {
    useVSFContext = config.useVSFContext || useVSFContext;
};
var generateContext = function (factoryParams) {
    var vsfContext = useVSFContext();
    if (factoryParams.provide) {
        return __assign(__assign({}, vsfContext.$vsf), factoryParams.provide(vsfContext.$vsf));
    }
    return vsfContext.$vsf;
};

/**
 * It extends given integartion, defined by `tag` in the context.
 */
var createExtendIntegrationInCtx = function (_a) {
    var tag = _a.tag, nuxtCtx = _a.nuxtCtx, inject = _a.inject;
    return function (integrationProperties) {
        var _a;
        var integrationKey = '$' + tag;
        if (!nuxtCtx.$vsf || !nuxtCtx.$vsf[integrationKey]) {
            inject('vsf', (_a = {}, _a[integrationKey] = {}, _a));
        }
        Object.keys(integrationProperties)
            .filter(function (k) { return !['api', 'client', 'config'].includes(k); })
            .forEach(function (key) {
            nuxtCtx.$vsf[integrationKey][key] = integrationProperties[key];
        });
    };
};
/**
 * It creates a function that adds an integration to the context under the given name, defined by `tag`.
 */
var createAddIntegrationToCtx = function (_a) {
    var tag = _a.tag, nuxtCtx = _a.nuxtCtx, inject = _a.inject;
    return function (integrationProperties) {
        var _a;
        var integrationKey = '$' + tag;
        if (nuxtCtx.$vsf && !nuxtCtx.$vsf[integrationKey]) {
            nuxtCtx.$vsf[integrationKey] = integrationProperties;
            return;
        }
        inject('vsf', (_a = {}, _a[integrationKey] = integrationProperties, _a));
    };
};

/**
 * Removes all key-value entries from the list cache.
 *
 * @private
 * @name clear
 * @memberOf ListCache
 */
function listCacheClear() {
  this.__data__ = [];
  this.size = 0;
}

/**
 * Performs a
 * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
 * comparison between two values to determine if they are equivalent.
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to compare.
 * @param {*} other The other value to compare.
 * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
 * @example
 *
 * var object = { 'a': 1 };
 * var other = { 'a': 1 };
 *
 * _.eq(object, object);
 * // => true
 *
 * _.eq(object, other);
 * // => false
 *
 * _.eq('a', 'a');
 * // => true
 *
 * _.eq('a', Object('a'));
 * // => false
 *
 * _.eq(NaN, NaN);
 * // => true
 */
function eq(value, other) {
  return value === other || (value !== value && other !== other);
}

/**
 * Gets the index at which the `key` is found in `array` of key-value pairs.
 *
 * @private
 * @param {Array} array The array to inspect.
 * @param {*} key The key to search for.
 * @returns {number} Returns the index of the matched value, else `-1`.
 */
function assocIndexOf(array, key) {
  var length = array.length;
  while (length--) {
    if (eq(array[length][0], key)) {
      return length;
    }
  }
  return -1;
}

/** Used for built-in method references. */
var arrayProto = Array.prototype;

/** Built-in value references. */
var splice = arrayProto.splice;

/**
 * Removes `key` and its value from the list cache.
 *
 * @private
 * @name delete
 * @memberOf ListCache
 * @param {string} key The key of the value to remove.
 * @returns {boolean} Returns `true` if the entry was removed, else `false`.
 */
function listCacheDelete(key) {
  var data = this.__data__,
      index = assocIndexOf(data, key);

  if (index < 0) {
    return false;
  }
  var lastIndex = data.length - 1;
  if (index == lastIndex) {
    data.pop();
  } else {
    splice.call(data, index, 1);
  }
  --this.size;
  return true;
}

/**
 * Gets the list cache value for `key`.
 *
 * @private
 * @name get
 * @memberOf ListCache
 * @param {string} key The key of the value to get.
 * @returns {*} Returns the entry value.
 */
function listCacheGet(key) {
  var data = this.__data__,
      index = assocIndexOf(data, key);

  return index < 0 ? undefined : data[index][1];
}

/**
 * Checks if a list cache value for `key` exists.
 *
 * @private
 * @name has
 * @memberOf ListCache
 * @param {string} key The key of the entry to check.
 * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
 */
function listCacheHas(key) {
  return assocIndexOf(this.__data__, key) > -1;
}

/**
 * Sets the list cache `key` to `value`.
 *
 * @private
 * @name set
 * @memberOf ListCache
 * @param {string} key The key of the value to set.
 * @param {*} value The value to set.
 * @returns {Object} Returns the list cache instance.
 */
function listCacheSet(key, value) {
  var data = this.__data__,
      index = assocIndexOf(data, key);

  if (index < 0) {
    ++this.size;
    data.push([key, value]);
  } else {
    data[index][1] = value;
  }
  return this;
}

/**
 * Creates an list cache object.
 *
 * @private
 * @constructor
 * @param {Array} [entries] The key-value pairs to cache.
 */
function ListCache(entries) {
  var index = -1,
      length = entries == null ? 0 : entries.length;

  this.clear();
  while (++index < length) {
    var entry = entries[index];
    this.set(entry[0], entry[1]);
  }
}

// Add methods to `ListCache`.
ListCache.prototype.clear = listCacheClear;
ListCache.prototype['delete'] = listCacheDelete;
ListCache.prototype.get = listCacheGet;
ListCache.prototype.has = listCacheHas;
ListCache.prototype.set = listCacheSet;

/**
 * Removes all key-value entries from the stack.
 *
 * @private
 * @name clear
 * @memberOf Stack
 */
function stackClear() {
  this.__data__ = new ListCache;
  this.size = 0;
}

/**
 * Removes `key` and its value from the stack.
 *
 * @private
 * @name delete
 * @memberOf Stack
 * @param {string} key The key of the value to remove.
 * @returns {boolean} Returns `true` if the entry was removed, else `false`.
 */
function stackDelete(key) {
  var data = this.__data__,
      result = data['delete'](key);

  this.size = data.size;
  return result;
}

/**
 * Gets the stack value for `key`.
 *
 * @private
 * @name get
 * @memberOf Stack
 * @param {string} key The key of the value to get.
 * @returns {*} Returns the entry value.
 */
function stackGet(key) {
  return this.__data__.get(key);
}

/**
 * Checks if a stack value for `key` exists.
 *
 * @private
 * @name has
 * @memberOf Stack
 * @param {string} key The key of the entry to check.
 * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
 */
function stackHas(key) {
  return this.__data__.has(key);
}

/** Detect free variable `global` from Node.js. */
var freeGlobal = typeof global == 'object' && global && global.Object === Object && global;

/** Detect free variable `self`. */
var freeSelf = typeof self == 'object' && self && self.Object === Object && self;

/** Used as a reference to the global object. */
var root = freeGlobal || freeSelf || Function('return this')();

/** Built-in value references. */
var Symbol$1 = root.Symbol;

/** Used for built-in method references. */
var objectProto$a = Object.prototype;

/** Used to check objects for own properties. */
var hasOwnProperty$8 = objectProto$a.hasOwnProperty;

/**
 * Used to resolve the
 * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)
 * of values.
 */
var nativeObjectToString$1 = objectProto$a.toString;

/** Built-in value references. */
var symToStringTag$1 = Symbol$1 ? Symbol$1.toStringTag : undefined;

/**
 * A specialized version of `baseGetTag` which ignores `Symbol.toStringTag` values.
 *
 * @private
 * @param {*} value The value to query.
 * @returns {string} Returns the raw `toStringTag`.
 */
function getRawTag(value) {
  var isOwn = hasOwnProperty$8.call(value, symToStringTag$1),
      tag = value[symToStringTag$1];

  try {
    value[symToStringTag$1] = undefined;
    var unmasked = true;
  } catch (e) {}

  var result = nativeObjectToString$1.call(value);
  if (unmasked) {
    if (isOwn) {
      value[symToStringTag$1] = tag;
    } else {
      delete value[symToStringTag$1];
    }
  }
  return result;
}

/** Used for built-in method references. */
var objectProto$9 = Object.prototype;

/**
 * Used to resolve the
 * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)
 * of values.
 */
var nativeObjectToString = objectProto$9.toString;

/**
 * Converts `value` to a string using `Object.prototype.toString`.
 *
 * @private
 * @param {*} value The value to convert.
 * @returns {string} Returns the converted string.
 */
function objectToString(value) {
  return nativeObjectToString.call(value);
}

/** `Object#toString` result references. */
var nullTag = '[object Null]',
    undefinedTag = '[object Undefined]';

/** Built-in value references. */
var symToStringTag = Symbol$1 ? Symbol$1.toStringTag : undefined;

/**
 * The base implementation of `getTag` without fallbacks for buggy environments.
 *
 * @private
 * @param {*} value The value to query.
 * @returns {string} Returns the `toStringTag`.
 */
function baseGetTag(value) {
  if (value == null) {
    return value === undefined ? undefinedTag : nullTag;
  }
  return (symToStringTag && symToStringTag in Object(value))
    ? getRawTag(value)
    : objectToString(value);
}

/**
 * Checks if `value` is the
 * [language type](http://www.ecma-international.org/ecma-262/7.0/#sec-ecmascript-language-types)
 * of `Object`. (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is an object, else `false`.
 * @example
 *
 * _.isObject({});
 * // => true
 *
 * _.isObject([1, 2, 3]);
 * // => true
 *
 * _.isObject(_.noop);
 * // => true
 *
 * _.isObject(null);
 * // => false
 */
function isObject(value) {
  var type = typeof value;
  return value != null && (type == 'object' || type == 'function');
}

/** `Object#toString` result references. */
var asyncTag = '[object AsyncFunction]',
    funcTag$1 = '[object Function]',
    genTag = '[object GeneratorFunction]',
    proxyTag = '[object Proxy]';

/**
 * Checks if `value` is classified as a `Function` object.
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a function, else `false`.
 * @example
 *
 * _.isFunction(_);
 * // => true
 *
 * _.isFunction(/abc/);
 * // => false
 */
function isFunction(value) {
  if (!isObject(value)) {
    return false;
  }
  // The use of `Object#toString` avoids issues with the `typeof` operator
  // in Safari 9 which returns 'object' for typed arrays and other constructors.
  var tag = baseGetTag(value);
  return tag == funcTag$1 || tag == genTag || tag == asyncTag || tag == proxyTag;
}

/** Used to detect overreaching core-js shims. */
var coreJsData = root['__core-js_shared__'];

/** Used to detect methods masquerading as native. */
var maskSrcKey = (function() {
  var uid = /[^.]+$/.exec(coreJsData && coreJsData.keys && coreJsData.keys.IE_PROTO || '');
  return uid ? ('Symbol(src)_1.' + uid) : '';
}());

/**
 * Checks if `func` has its source masked.
 *
 * @private
 * @param {Function} func The function to check.
 * @returns {boolean} Returns `true` if `func` is masked, else `false`.
 */
function isMasked(func) {
  return !!maskSrcKey && (maskSrcKey in func);
}

/** Used for built-in method references. */
var funcProto$2 = Function.prototype;

/** Used to resolve the decompiled source of functions. */
var funcToString$2 = funcProto$2.toString;

/**
 * Converts `func` to its source code.
 *
 * @private
 * @param {Function} func The function to convert.
 * @returns {string} Returns the source code.
 */
function toSource(func) {
  if (func != null) {
    try {
      return funcToString$2.call(func);
    } catch (e) {}
    try {
      return (func + '');
    } catch (e) {}
  }
  return '';
}

/**
 * Used to match `RegExp`
 * [syntax characters](http://ecma-international.org/ecma-262/7.0/#sec-patterns).
 */
var reRegExpChar = /[\\^$.*+?()[\]{}|]/g;

/** Used to detect host constructors (Safari). */
var reIsHostCtor = /^\[object .+?Constructor\]$/;

/** Used for built-in method references. */
var funcProto$1 = Function.prototype,
    objectProto$8 = Object.prototype;

/** Used to resolve the decompiled source of functions. */
var funcToString$1 = funcProto$1.toString;

/** Used to check objects for own properties. */
var hasOwnProperty$7 = objectProto$8.hasOwnProperty;

/** Used to detect if a method is native. */
var reIsNative = RegExp('^' +
  funcToString$1.call(hasOwnProperty$7).replace(reRegExpChar, '\\$&')
  .replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g, '$1.*?') + '$'
);

/**
 * The base implementation of `_.isNative` without bad shim checks.
 *
 * @private
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a native function,
 *  else `false`.
 */
function baseIsNative(value) {
  if (!isObject(value) || isMasked(value)) {
    return false;
  }
  var pattern = isFunction(value) ? reIsNative : reIsHostCtor;
  return pattern.test(toSource(value));
}

/**
 * Gets the value at `key` of `object`.
 *
 * @private
 * @param {Object} [object] The object to query.
 * @param {string} key The key of the property to get.
 * @returns {*} Returns the property value.
 */
function getValue(object, key) {
  return object == null ? undefined : object[key];
}

/**
 * Gets the native function at `key` of `object`.
 *
 * @private
 * @param {Object} object The object to query.
 * @param {string} key The key of the method to get.
 * @returns {*} Returns the function if it's native, else `undefined`.
 */
function getNative(object, key) {
  var value = getValue(object, key);
  return baseIsNative(value) ? value : undefined;
}

/* Built-in method references that are verified to be native. */
var Map = getNative(root, 'Map');

/* Built-in method references that are verified to be native. */
var nativeCreate = getNative(Object, 'create');

/**
 * Removes all key-value entries from the hash.
 *
 * @private
 * @name clear
 * @memberOf Hash
 */
function hashClear() {
  this.__data__ = nativeCreate ? nativeCreate(null) : {};
  this.size = 0;
}

/**
 * Removes `key` and its value from the hash.
 *
 * @private
 * @name delete
 * @memberOf Hash
 * @param {Object} hash The hash to modify.
 * @param {string} key The key of the value to remove.
 * @returns {boolean} Returns `true` if the entry was removed, else `false`.
 */
function hashDelete(key) {
  var result = this.has(key) && delete this.__data__[key];
  this.size -= result ? 1 : 0;
  return result;
}

/** Used to stand-in for `undefined` hash values. */
var HASH_UNDEFINED$1 = '__lodash_hash_undefined__';

/** Used for built-in method references. */
var objectProto$7 = Object.prototype;

/** Used to check objects for own properties. */
var hasOwnProperty$6 = objectProto$7.hasOwnProperty;

/**
 * Gets the hash value for `key`.
 *
 * @private
 * @name get
 * @memberOf Hash
 * @param {string} key The key of the value to get.
 * @returns {*} Returns the entry value.
 */
function hashGet(key) {
  var data = this.__data__;
  if (nativeCreate) {
    var result = data[key];
    return result === HASH_UNDEFINED$1 ? undefined : result;
  }
  return hasOwnProperty$6.call(data, key) ? data[key] : undefined;
}

/** Used for built-in method references. */
var objectProto$6 = Object.prototype;

/** Used to check objects for own properties. */
var hasOwnProperty$5 = objectProto$6.hasOwnProperty;

/**
 * Checks if a hash value for `key` exists.
 *
 * @private
 * @name has
 * @memberOf Hash
 * @param {string} key The key of the entry to check.
 * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
 */
function hashHas(key) {
  var data = this.__data__;
  return nativeCreate ? (data[key] !== undefined) : hasOwnProperty$5.call(data, key);
}

/** Used to stand-in for `undefined` hash values. */
var HASH_UNDEFINED = '__lodash_hash_undefined__';

/**
 * Sets the hash `key` to `value`.
 *
 * @private
 * @name set
 * @memberOf Hash
 * @param {string} key The key of the value to set.
 * @param {*} value The value to set.
 * @returns {Object} Returns the hash instance.
 */
function hashSet(key, value) {
  var data = this.__data__;
  this.size += this.has(key) ? 0 : 1;
  data[key] = (nativeCreate && value === undefined) ? HASH_UNDEFINED : value;
  return this;
}

/**
 * Creates a hash object.
 *
 * @private
 * @constructor
 * @param {Array} [entries] The key-value pairs to cache.
 */
function Hash(entries) {
  var index = -1,
      length = entries == null ? 0 : entries.length;

  this.clear();
  while (++index < length) {
    var entry = entries[index];
    this.set(entry[0], entry[1]);
  }
}

// Add methods to `Hash`.
Hash.prototype.clear = hashClear;
Hash.prototype['delete'] = hashDelete;
Hash.prototype.get = hashGet;
Hash.prototype.has = hashHas;
Hash.prototype.set = hashSet;

/**
 * Removes all key-value entries from the map.
 *
 * @private
 * @name clear
 * @memberOf MapCache
 */
function mapCacheClear() {
  this.size = 0;
  this.__data__ = {
    'hash': new Hash,
    'map': new (Map || ListCache),
    'string': new Hash
  };
}

/**
 * Checks if `value` is suitable for use as unique object key.
 *
 * @private
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is suitable, else `false`.
 */
function isKeyable(value) {
  var type = typeof value;
  return (type == 'string' || type == 'number' || type == 'symbol' || type == 'boolean')
    ? (value !== '__proto__')
    : (value === null);
}

/**
 * Gets the data for `map`.
 *
 * @private
 * @param {Object} map The map to query.
 * @param {string} key The reference key.
 * @returns {*} Returns the map data.
 */
function getMapData(map, key) {
  var data = map.__data__;
  return isKeyable(key)
    ? data[typeof key == 'string' ? 'string' : 'hash']
    : data.map;
}

/**
 * Removes `key` and its value from the map.
 *
 * @private
 * @name delete
 * @memberOf MapCache
 * @param {string} key The key of the value to remove.
 * @returns {boolean} Returns `true` if the entry was removed, else `false`.
 */
function mapCacheDelete(key) {
  var result = getMapData(this, key)['delete'](key);
  this.size -= result ? 1 : 0;
  return result;
}

/**
 * Gets the map value for `key`.
 *
 * @private
 * @name get
 * @memberOf MapCache
 * @param {string} key The key of the value to get.
 * @returns {*} Returns the entry value.
 */
function mapCacheGet(key) {
  return getMapData(this, key).get(key);
}

/**
 * Checks if a map value for `key` exists.
 *
 * @private
 * @name has
 * @memberOf MapCache
 * @param {string} key The key of the entry to check.
 * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
 */
function mapCacheHas(key) {
  return getMapData(this, key).has(key);
}

/**
 * Sets the map `key` to `value`.
 *
 * @private
 * @name set
 * @memberOf MapCache
 * @param {string} key The key of the value to set.
 * @param {*} value The value to set.
 * @returns {Object} Returns the map cache instance.
 */
function mapCacheSet(key, value) {
  var data = getMapData(this, key),
      size = data.size;

  data.set(key, value);
  this.size += data.size == size ? 0 : 1;
  return this;
}

/**
 * Creates a map cache object to store key-value pairs.
 *
 * @private
 * @constructor
 * @param {Array} [entries] The key-value pairs to cache.
 */
function MapCache(entries) {
  var index = -1,
      length = entries == null ? 0 : entries.length;

  this.clear();
  while (++index < length) {
    var entry = entries[index];
    this.set(entry[0], entry[1]);
  }
}

// Add methods to `MapCache`.
MapCache.prototype.clear = mapCacheClear;
MapCache.prototype['delete'] = mapCacheDelete;
MapCache.prototype.get = mapCacheGet;
MapCache.prototype.has = mapCacheHas;
MapCache.prototype.set = mapCacheSet;

/** Used as the size to enable large array optimizations. */
var LARGE_ARRAY_SIZE = 200;

/**
 * Sets the stack `key` to `value`.
 *
 * @private
 * @name set
 * @memberOf Stack
 * @param {string} key The key of the value to set.
 * @param {*} value The value to set.
 * @returns {Object} Returns the stack cache instance.
 */
function stackSet(key, value) {
  var data = this.__data__;
  if (data instanceof ListCache) {
    var pairs = data.__data__;
    if (!Map || (pairs.length < LARGE_ARRAY_SIZE - 1)) {
      pairs.push([key, value]);
      this.size = ++data.size;
      return this;
    }
    data = this.__data__ = new MapCache(pairs);
  }
  data.set(key, value);
  this.size = data.size;
  return this;
}

/**
 * Creates a stack cache object to store key-value pairs.
 *
 * @private
 * @constructor
 * @param {Array} [entries] The key-value pairs to cache.
 */
function Stack(entries) {
  var data = this.__data__ = new ListCache(entries);
  this.size = data.size;
}

// Add methods to `Stack`.
Stack.prototype.clear = stackClear;
Stack.prototype['delete'] = stackDelete;
Stack.prototype.get = stackGet;
Stack.prototype.has = stackHas;
Stack.prototype.set = stackSet;

var defineProperty = (function() {
  try {
    var func = getNative(Object, 'defineProperty');
    func({}, '', {});
    return func;
  } catch (e) {}
}());

/**
 * The base implementation of `assignValue` and `assignMergeValue` without
 * value checks.
 *
 * @private
 * @param {Object} object The object to modify.
 * @param {string} key The key of the property to assign.
 * @param {*} value The value to assign.
 */
function baseAssignValue(object, key, value) {
  if (key == '__proto__' && defineProperty) {
    defineProperty(object, key, {
      'configurable': true,
      'enumerable': true,
      'value': value,
      'writable': true
    });
  } else {
    object[key] = value;
  }
}

/**
 * This function is like `assignValue` except that it doesn't assign
 * `undefined` values.
 *
 * @private
 * @param {Object} object The object to modify.
 * @param {string} key The key of the property to assign.
 * @param {*} value The value to assign.
 */
function assignMergeValue(object, key, value) {
  if ((value !== undefined && !eq(object[key], value)) ||
      (value === undefined && !(key in object))) {
    baseAssignValue(object, key, value);
  }
}

/**
 * Creates a base function for methods like `_.forIn` and `_.forOwn`.
 *
 * @private
 * @param {boolean} [fromRight] Specify iterating from right to left.
 * @returns {Function} Returns the new base function.
 */
function createBaseFor(fromRight) {
  return function(object, iteratee, keysFunc) {
    var index = -1,
        iterable = Object(object),
        props = keysFunc(object),
        length = props.length;

    while (length--) {
      var key = props[fromRight ? length : ++index];
      if (iteratee(iterable[key], key, iterable) === false) {
        break;
      }
    }
    return object;
  };
}

/**
 * The base implementation of `baseForOwn` which iterates over `object`
 * properties returned by `keysFunc` and invokes `iteratee` for each property.
 * Iteratee functions may exit iteration early by explicitly returning `false`.
 *
 * @private
 * @param {Object} object The object to iterate over.
 * @param {Function} iteratee The function invoked per iteration.
 * @param {Function} keysFunc The function to get the keys of `object`.
 * @returns {Object} Returns `object`.
 */
var baseFor = createBaseFor();

/** Detect free variable `exports`. */
var freeExports$2 = typeof exports == 'object' && exports && !exports.nodeType && exports;

/** Detect free variable `module`. */
var freeModule$2 = freeExports$2 && typeof module == 'object' && module && !module.nodeType && module;

/** Detect the popular CommonJS extension `module.exports`. */
var moduleExports$2 = freeModule$2 && freeModule$2.exports === freeExports$2;

/** Built-in value references. */
var Buffer$1 = moduleExports$2 ? root.Buffer : undefined,
    allocUnsafe = Buffer$1 ? Buffer$1.allocUnsafe : undefined;

/**
 * Creates a clone of  `buffer`.
 *
 * @private
 * @param {Buffer} buffer The buffer to clone.
 * @param {boolean} [isDeep] Specify a deep clone.
 * @returns {Buffer} Returns the cloned buffer.
 */
function cloneBuffer(buffer, isDeep) {
  if (isDeep) {
    return buffer.slice();
  }
  var length = buffer.length,
      result = allocUnsafe ? allocUnsafe(length) : new buffer.constructor(length);

  buffer.copy(result);
  return result;
}

/** Built-in value references. */
var Uint8Array = root.Uint8Array;

/**
 * Creates a clone of `arrayBuffer`.
 *
 * @private
 * @param {ArrayBuffer} arrayBuffer The array buffer to clone.
 * @returns {ArrayBuffer} Returns the cloned array buffer.
 */
function cloneArrayBuffer(arrayBuffer) {
  var result = new arrayBuffer.constructor(arrayBuffer.byteLength);
  new Uint8Array(result).set(new Uint8Array(arrayBuffer));
  return result;
}

/**
 * Creates a clone of `typedArray`.
 *
 * @private
 * @param {Object} typedArray The typed array to clone.
 * @param {boolean} [isDeep] Specify a deep clone.
 * @returns {Object} Returns the cloned typed array.
 */
function cloneTypedArray(typedArray, isDeep) {
  var buffer = isDeep ? cloneArrayBuffer(typedArray.buffer) : typedArray.buffer;
  return new typedArray.constructor(buffer, typedArray.byteOffset, typedArray.length);
}

/**
 * Copies the values of `source` to `array`.
 *
 * @private
 * @param {Array} source The array to copy values from.
 * @param {Array} [array=[]] The array to copy values to.
 * @returns {Array} Returns `array`.
 */
function copyArray(source, array) {
  var index = -1,
      length = source.length;

  array || (array = Array(length));
  while (++index < length) {
    array[index] = source[index];
  }
  return array;
}

/** Built-in value references. */
var objectCreate = Object.create;

/**
 * The base implementation of `_.create` without support for assigning
 * properties to the created object.
 *
 * @private
 * @param {Object} proto The object to inherit from.
 * @returns {Object} Returns the new object.
 */
var baseCreate = (function() {
  function object() {}
  return function(proto) {
    if (!isObject(proto)) {
      return {};
    }
    if (objectCreate) {
      return objectCreate(proto);
    }
    object.prototype = proto;
    var result = new object;
    object.prototype = undefined;
    return result;
  };
}());

/**
 * Creates a unary function that invokes `func` with its argument transformed.
 *
 * @private
 * @param {Function} func The function to wrap.
 * @param {Function} transform The argument transform.
 * @returns {Function} Returns the new function.
 */
function overArg(func, transform) {
  return function(arg) {
    return func(transform(arg));
  };
}

/** Built-in value references. */
var getPrototype = overArg(Object.getPrototypeOf, Object);

/** Used for built-in method references. */
var objectProto$5 = Object.prototype;

/**
 * Checks if `value` is likely a prototype object.
 *
 * @private
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a prototype, else `false`.
 */
function isPrototype(value) {
  var Ctor = value && value.constructor,
      proto = (typeof Ctor == 'function' && Ctor.prototype) || objectProto$5;

  return value === proto;
}

/**
 * Initializes an object clone.
 *
 * @private
 * @param {Object} object The object to clone.
 * @returns {Object} Returns the initialized clone.
 */
function initCloneObject(object) {
  return (typeof object.constructor == 'function' && !isPrototype(object))
    ? baseCreate(getPrototype(object))
    : {};
}

/**
 * Checks if `value` is object-like. A value is object-like if it's not `null`
 * and has a `typeof` result of "object".
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is object-like, else `false`.
 * @example
 *
 * _.isObjectLike({});
 * // => true
 *
 * _.isObjectLike([1, 2, 3]);
 * // => true
 *
 * _.isObjectLike(_.noop);
 * // => false
 *
 * _.isObjectLike(null);
 * // => false
 */
function isObjectLike(value) {
  return value != null && typeof value == 'object';
}

/** `Object#toString` result references. */
var argsTag$1 = '[object Arguments]';

/**
 * The base implementation of `_.isArguments`.
 *
 * @private
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is an `arguments` object,
 */
function baseIsArguments(value) {
  return isObjectLike(value) && baseGetTag(value) == argsTag$1;
}

/** Used for built-in method references. */
var objectProto$4 = Object.prototype;

/** Used to check objects for own properties. */
var hasOwnProperty$4 = objectProto$4.hasOwnProperty;

/** Built-in value references. */
var propertyIsEnumerable = objectProto$4.propertyIsEnumerable;

/**
 * Checks if `value` is likely an `arguments` object.
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is an `arguments` object,
 *  else `false`.
 * @example
 *
 * _.isArguments(function() { return arguments; }());
 * // => true
 *
 * _.isArguments([1, 2, 3]);
 * // => false
 */
var isArguments = baseIsArguments(function() { return arguments; }()) ? baseIsArguments : function(value) {
  return isObjectLike(value) && hasOwnProperty$4.call(value, 'callee') &&
    !propertyIsEnumerable.call(value, 'callee');
};

/**
 * Checks if `value` is classified as an `Array` object.
 *
 * @static
 * @memberOf _
 * @since 0.1.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is an array, else `false`.
 * @example
 *
 * _.isArray([1, 2, 3]);
 * // => true
 *
 * _.isArray(document.body.children);
 * // => false
 *
 * _.isArray('abc');
 * // => false
 *
 * _.isArray(_.noop);
 * // => false
 */
var isArray = Array.isArray;

/** Used as references for various `Number` constants. */
var MAX_SAFE_INTEGER$1 = 9007199254740991;

/**
 * Checks if `value` is a valid array-like length.
 *
 * **Note:** This method is loosely based on
 * [`ToLength`](http://ecma-international.org/ecma-262/7.0/#sec-tolength).
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a valid length, else `false`.
 * @example
 *
 * _.isLength(3);
 * // => true
 *
 * _.isLength(Number.MIN_VALUE);
 * // => false
 *
 * _.isLength(Infinity);
 * // => false
 *
 * _.isLength('3');
 * // => false
 */
function isLength(value) {
  return typeof value == 'number' &&
    value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER$1;
}

/**
 * Checks if `value` is array-like. A value is considered array-like if it's
 * not a function and has a `value.length` that's an integer greater than or
 * equal to `0` and less than or equal to `Number.MAX_SAFE_INTEGER`.
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is array-like, else `false`.
 * @example
 *
 * _.isArrayLike([1, 2, 3]);
 * // => true
 *
 * _.isArrayLike(document.body.children);
 * // => true
 *
 * _.isArrayLike('abc');
 * // => true
 *
 * _.isArrayLike(_.noop);
 * // => false
 */
function isArrayLike(value) {
  return value != null && isLength(value.length) && !isFunction(value);
}

/**
 * This method is like `_.isArrayLike` except that it also checks if `value`
 * is an object.
 *
 * @static
 * @memberOf _
 * @since 4.0.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is an array-like object,
 *  else `false`.
 * @example
 *
 * _.isArrayLikeObject([1, 2, 3]);
 * // => true
 *
 * _.isArrayLikeObject(document.body.children);
 * // => true
 *
 * _.isArrayLikeObject('abc');
 * // => false
 *
 * _.isArrayLikeObject(_.noop);
 * // => false
 */
function isArrayLikeObject(value) {
  return isObjectLike(value) && isArrayLike(value);
}

/**
 * This method returns `false`.
 *
 * @static
 * @memberOf _
 * @since 4.13.0
 * @category Util
 * @returns {boolean} Returns `false`.
 * @example
 *
 * _.times(2, _.stubFalse);
 * // => [false, false]
 */
function stubFalse() {
  return false;
}

/** Detect free variable `exports`. */
var freeExports$1 = typeof exports == 'object' && exports && !exports.nodeType && exports;

/** Detect free variable `module`. */
var freeModule$1 = freeExports$1 && typeof module == 'object' && module && !module.nodeType && module;

/** Detect the popular CommonJS extension `module.exports`. */
var moduleExports$1 = freeModule$1 && freeModule$1.exports === freeExports$1;

/** Built-in value references. */
var Buffer = moduleExports$1 ? root.Buffer : undefined;

/* Built-in method references for those with the same name as other `lodash` methods. */
var nativeIsBuffer = Buffer ? Buffer.isBuffer : undefined;

/**
 * Checks if `value` is a buffer.
 *
 * @static
 * @memberOf _
 * @since 4.3.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a buffer, else `false`.
 * @example
 *
 * _.isBuffer(new Buffer(2));
 * // => true
 *
 * _.isBuffer(new Uint8Array(2));
 * // => false
 */
var isBuffer = nativeIsBuffer || stubFalse;

/** `Object#toString` result references. */
var objectTag$1 = '[object Object]';

/** Used for built-in method references. */
var funcProto = Function.prototype,
    objectProto$3 = Object.prototype;

/** Used to resolve the decompiled source of functions. */
var funcToString = funcProto.toString;

/** Used to check objects for own properties. */
var hasOwnProperty$3 = objectProto$3.hasOwnProperty;

/** Used to infer the `Object` constructor. */
var objectCtorString = funcToString.call(Object);

/**
 * Checks if `value` is a plain object, that is, an object created by the
 * `Object` constructor or one with a `[[Prototype]]` of `null`.
 *
 * @static
 * @memberOf _
 * @since 0.8.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a plain object, else `false`.
 * @example
 *
 * function Foo() {
 *   this.a = 1;
 * }
 *
 * _.isPlainObject(new Foo);
 * // => false
 *
 * _.isPlainObject([1, 2, 3]);
 * // => false
 *
 * _.isPlainObject({ 'x': 0, 'y': 0 });
 * // => true
 *
 * _.isPlainObject(Object.create(null));
 * // => true
 */
function isPlainObject(value) {
  if (!isObjectLike(value) || baseGetTag(value) != objectTag$1) {
    return false;
  }
  var proto = getPrototype(value);
  if (proto === null) {
    return true;
  }
  var Ctor = hasOwnProperty$3.call(proto, 'constructor') && proto.constructor;
  return typeof Ctor == 'function' && Ctor instanceof Ctor &&
    funcToString.call(Ctor) == objectCtorString;
}

/** `Object#toString` result references. */
var argsTag = '[object Arguments]',
    arrayTag = '[object Array]',
    boolTag = '[object Boolean]',
    dateTag = '[object Date]',
    errorTag = '[object Error]',
    funcTag = '[object Function]',
    mapTag = '[object Map]',
    numberTag = '[object Number]',
    objectTag = '[object Object]',
    regexpTag = '[object RegExp]',
    setTag = '[object Set]',
    stringTag = '[object String]',
    weakMapTag = '[object WeakMap]';

var arrayBufferTag = '[object ArrayBuffer]',
    dataViewTag = '[object DataView]',
    float32Tag = '[object Float32Array]',
    float64Tag = '[object Float64Array]',
    int8Tag = '[object Int8Array]',
    int16Tag = '[object Int16Array]',
    int32Tag = '[object Int32Array]',
    uint8Tag = '[object Uint8Array]',
    uint8ClampedTag = '[object Uint8ClampedArray]',
    uint16Tag = '[object Uint16Array]',
    uint32Tag = '[object Uint32Array]';

/** Used to identify `toStringTag` values of typed arrays. */
var typedArrayTags = {};
typedArrayTags[float32Tag] = typedArrayTags[float64Tag] =
typedArrayTags[int8Tag] = typedArrayTags[int16Tag] =
typedArrayTags[int32Tag] = typedArrayTags[uint8Tag] =
typedArrayTags[uint8ClampedTag] = typedArrayTags[uint16Tag] =
typedArrayTags[uint32Tag] = true;
typedArrayTags[argsTag] = typedArrayTags[arrayTag] =
typedArrayTags[arrayBufferTag] = typedArrayTags[boolTag] =
typedArrayTags[dataViewTag] = typedArrayTags[dateTag] =
typedArrayTags[errorTag] = typedArrayTags[funcTag] =
typedArrayTags[mapTag] = typedArrayTags[numberTag] =
typedArrayTags[objectTag] = typedArrayTags[regexpTag] =
typedArrayTags[setTag] = typedArrayTags[stringTag] =
typedArrayTags[weakMapTag] = false;

/**
 * The base implementation of `_.isTypedArray` without Node.js optimizations.
 *
 * @private
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.
 */
function baseIsTypedArray(value) {
  return isObjectLike(value) &&
    isLength(value.length) && !!typedArrayTags[baseGetTag(value)];
}

/**
 * The base implementation of `_.unary` without support for storing metadata.
 *
 * @private
 * @param {Function} func The function to cap arguments for.
 * @returns {Function} Returns the new capped function.
 */
function baseUnary(func) {
  return function(value) {
    return func(value);
  };
}

/** Detect free variable `exports`. */
var freeExports = typeof exports == 'object' && exports && !exports.nodeType && exports;

/** Detect free variable `module`. */
var freeModule = freeExports && typeof module == 'object' && module && !module.nodeType && module;

/** Detect the popular CommonJS extension `module.exports`. */
var moduleExports = freeModule && freeModule.exports === freeExports;

/** Detect free variable `process` from Node.js. */
var freeProcess = moduleExports && freeGlobal.process;

/** Used to access faster Node.js helpers. */
var nodeUtil = (function() {
  try {
    // Use `util.types` for Node.js 10+.
    var types = freeModule && freeModule.require && freeModule.require('util').types;

    if (types) {
      return types;
    }

    // Legacy `process.binding('util')` for Node.js < 10.
    return freeProcess && freeProcess.binding && freeProcess.binding('util');
  } catch (e) {}
}());

/* Node.js helper references. */
var nodeIsTypedArray = nodeUtil && nodeUtil.isTypedArray;

/**
 * Checks if `value` is classified as a typed array.
 *
 * @static
 * @memberOf _
 * @since 3.0.0
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.
 * @example
 *
 * _.isTypedArray(new Uint8Array);
 * // => true
 *
 * _.isTypedArray([]);
 * // => false
 */
var isTypedArray = nodeIsTypedArray ? baseUnary(nodeIsTypedArray) : baseIsTypedArray;

/**
 * Gets the value at `key`, unless `key` is "__proto__" or "constructor".
 *
 * @private
 * @param {Object} object The object to query.
 * @param {string} key The key of the property to get.
 * @returns {*} Returns the property value.
 */
function safeGet(object, key) {
  if (key === 'constructor' && typeof object[key] === 'function') {
    return;
  }

  if (key == '__proto__') {
    return;
  }

  return object[key];
}

/** Used for built-in method references. */
var objectProto$2 = Object.prototype;

/** Used to check objects for own properties. */
var hasOwnProperty$2 = objectProto$2.hasOwnProperty;

/**
 * Assigns `value` to `key` of `object` if the existing value is not equivalent
 * using [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
 * for equality comparisons.
 *
 * @private
 * @param {Object} object The object to modify.
 * @param {string} key The key of the property to assign.
 * @param {*} value The value to assign.
 */
function assignValue(object, key, value) {
  var objValue = object[key];
  if (!(hasOwnProperty$2.call(object, key) && eq(objValue, value)) ||
      (value === undefined && !(key in object))) {
    baseAssignValue(object, key, value);
  }
}

/**
 * Copies properties of `source` to `object`.
 *
 * @private
 * @param {Object} source The object to copy properties from.
 * @param {Array} props The property identifiers to copy.
 * @param {Object} [object={}] The object to copy properties to.
 * @param {Function} [customizer] The function to customize copied values.
 * @returns {Object} Returns `object`.
 */
function copyObject(source, props, object, customizer) {
  var isNew = !object;
  object || (object = {});

  var index = -1,
      length = props.length;

  while (++index < length) {
    var key = props[index];

    var newValue = customizer
      ? customizer(object[key], source[key], key, object, source)
      : undefined;

    if (newValue === undefined) {
      newValue = source[key];
    }
    if (isNew) {
      baseAssignValue(object, key, newValue);
    } else {
      assignValue(object, key, newValue);
    }
  }
  return object;
}

/**
 * The base implementation of `_.times` without support for iteratee shorthands
 * or max array length checks.
 *
 * @private
 * @param {number} n The number of times to invoke `iteratee`.
 * @param {Function} iteratee The function invoked per iteration.
 * @returns {Array} Returns the array of results.
 */
function baseTimes(n, iteratee) {
  var index = -1,
      result = Array(n);

  while (++index < n) {
    result[index] = iteratee(index);
  }
  return result;
}

/** Used as references for various `Number` constants. */
var MAX_SAFE_INTEGER = 9007199254740991;

/** Used to detect unsigned integer values. */
var reIsUint = /^(?:0|[1-9]\d*)$/;

/**
 * Checks if `value` is a valid array-like index.
 *
 * @private
 * @param {*} value The value to check.
 * @param {number} [length=MAX_SAFE_INTEGER] The upper bounds of a valid index.
 * @returns {boolean} Returns `true` if `value` is a valid index, else `false`.
 */
function isIndex(value, length) {
  var type = typeof value;
  length = length == null ? MAX_SAFE_INTEGER : length;

  return !!length &&
    (type == 'number' ||
      (type != 'symbol' && reIsUint.test(value))) &&
        (value > -1 && value % 1 == 0 && value < length);
}

/** Used for built-in method references. */
var objectProto$1 = Object.prototype;

/** Used to check objects for own properties. */
var hasOwnProperty$1 = objectProto$1.hasOwnProperty;

/**
 * Creates an array of the enumerable property names of the array-like `value`.
 *
 * @private
 * @param {*} value The value to query.
 * @param {boolean} inherited Specify returning inherited property names.
 * @returns {Array} Returns the array of property names.
 */
function arrayLikeKeys(value, inherited) {
  var isArr = isArray(value),
      isArg = !isArr && isArguments(value),
      isBuff = !isArr && !isArg && isBuffer(value),
      isType = !isArr && !isArg && !isBuff && isTypedArray(value),
      skipIndexes = isArr || isArg || isBuff || isType,
      result = skipIndexes ? baseTimes(value.length, String) : [],
      length = result.length;

  for (var key in value) {
    if ((inherited || hasOwnProperty$1.call(value, key)) &&
        !(skipIndexes && (
           // Safari 9 has enumerable `arguments.length` in strict mode.
           key == 'length' ||
           // Node.js 0.10 has enumerable non-index properties on buffers.
           (isBuff && (key == 'offset' || key == 'parent')) ||
           // PhantomJS 2 has enumerable non-index properties on typed arrays.
           (isType && (key == 'buffer' || key == 'byteLength' || key == 'byteOffset')) ||
           // Skip index properties.
           isIndex(key, length)
        ))) {
      result.push(key);
    }
  }
  return result;
}

/**
 * This function is like
 * [`Object.keys`](http://ecma-international.org/ecma-262/7.0/#sec-object.keys)
 * except that it includes inherited enumerable properties.
 *
 * @private
 * @param {Object} object The object to query.
 * @returns {Array} Returns the array of property names.
 */
function nativeKeysIn(object) {
  var result = [];
  if (object != null) {
    for (var key in Object(object)) {
      result.push(key);
    }
  }
  return result;
}

/** Used for built-in method references. */
var objectProto = Object.prototype;

/** Used to check objects for own properties. */
var hasOwnProperty = objectProto.hasOwnProperty;

/**
 * The base implementation of `_.keysIn` which doesn't treat sparse arrays as dense.
 *
 * @private
 * @param {Object} object The object to query.
 * @returns {Array} Returns the array of property names.
 */
function baseKeysIn(object) {
  if (!isObject(object)) {
    return nativeKeysIn(object);
  }
  var isProto = isPrototype(object),
      result = [];

  for (var key in object) {
    if (!(key == 'constructor' && (isProto || !hasOwnProperty.call(object, key)))) {
      result.push(key);
    }
  }
  return result;
}

/**
 * Creates an array of the own and inherited enumerable property names of `object`.
 *
 * **Note:** Non-object values are coerced to objects.
 *
 * @static
 * @memberOf _
 * @since 3.0.0
 * @category Object
 * @param {Object} object The object to query.
 * @returns {Array} Returns the array of property names.
 * @example
 *
 * function Foo() {
 *   this.a = 1;
 *   this.b = 2;
 * }
 *
 * Foo.prototype.c = 3;
 *
 * _.keysIn(new Foo);
 * // => ['a', 'b', 'c'] (iteration order is not guaranteed)
 */
function keysIn(object) {
  return isArrayLike(object) ? arrayLikeKeys(object, true) : baseKeysIn(object);
}

/**
 * Converts `value` to a plain object flattening inherited enumerable string
 * keyed properties of `value` to own properties of the plain object.
 *
 * @static
 * @memberOf _
 * @since 3.0.0
 * @category Lang
 * @param {*} value The value to convert.
 * @returns {Object} Returns the converted plain object.
 * @example
 *
 * function Foo() {
 *   this.b = 2;
 * }
 *
 * Foo.prototype.c = 3;
 *
 * _.assign({ 'a': 1 }, new Foo);
 * // => { 'a': 1, 'b': 2 }
 *
 * _.assign({ 'a': 1 }, _.toPlainObject(new Foo));
 * // => { 'a': 1, 'b': 2, 'c': 3 }
 */
function toPlainObject(value) {
  return copyObject(value, keysIn(value));
}

/**
 * A specialized version of `baseMerge` for arrays and objects which performs
 * deep merges and tracks traversed objects enabling objects with circular
 * references to be merged.
 *
 * @private
 * @param {Object} object The destination object.
 * @param {Object} source The source object.
 * @param {string} key The key of the value to merge.
 * @param {number} srcIndex The index of `source`.
 * @param {Function} mergeFunc The function to merge values.
 * @param {Function} [customizer] The function to customize assigned values.
 * @param {Object} [stack] Tracks traversed source values and their merged
 *  counterparts.
 */
function baseMergeDeep(object, source, key, srcIndex, mergeFunc, customizer, stack) {
  var objValue = safeGet(object, key),
      srcValue = safeGet(source, key),
      stacked = stack.get(srcValue);

  if (stacked) {
    assignMergeValue(object, key, stacked);
    return;
  }
  var newValue = customizer
    ? customizer(objValue, srcValue, (key + ''), object, source, stack)
    : undefined;

  var isCommon = newValue === undefined;

  if (isCommon) {
    var isArr = isArray(srcValue),
        isBuff = !isArr && isBuffer(srcValue),
        isTyped = !isArr && !isBuff && isTypedArray(srcValue);

    newValue = srcValue;
    if (isArr || isBuff || isTyped) {
      if (isArray(objValue)) {
        newValue = objValue;
      }
      else if (isArrayLikeObject(objValue)) {
        newValue = copyArray(objValue);
      }
      else if (isBuff) {
        isCommon = false;
        newValue = cloneBuffer(srcValue, true);
      }
      else if (isTyped) {
        isCommon = false;
        newValue = cloneTypedArray(srcValue, true);
      }
      else {
        newValue = [];
      }
    }
    else if (isPlainObject(srcValue) || isArguments(srcValue)) {
      newValue = objValue;
      if (isArguments(objValue)) {
        newValue = toPlainObject(objValue);
      }
      else if (!isObject(objValue) || isFunction(objValue)) {
        newValue = initCloneObject(srcValue);
      }
    }
    else {
      isCommon = false;
    }
  }
  if (isCommon) {
    // Recursively merge objects and arrays (susceptible to call stack limits).
    stack.set(srcValue, newValue);
    mergeFunc(newValue, srcValue, srcIndex, customizer, stack);
    stack['delete'](srcValue);
  }
  assignMergeValue(object, key, newValue);
}

/**
 * The base implementation of `_.merge` without support for multiple sources.
 *
 * @private
 * @param {Object} object The destination object.
 * @param {Object} source The source object.
 * @param {number} srcIndex The index of `source`.
 * @param {Function} [customizer] The function to customize merged values.
 * @param {Object} [stack] Tracks traversed source values and their merged
 *  counterparts.
 */
function baseMerge(object, source, srcIndex, customizer, stack) {
  if (object === source) {
    return;
  }
  baseFor(source, function(srcValue, key) {
    stack || (stack = new Stack);
    if (isObject(srcValue)) {
      baseMergeDeep(object, source, key, srcIndex, baseMerge, customizer, stack);
    }
    else {
      var newValue = customizer
        ? customizer(safeGet(object, key), srcValue, (key + ''), object, source, stack)
        : undefined;

      if (newValue === undefined) {
        newValue = srcValue;
      }
      assignMergeValue(object, key, newValue);
    }
  }, keysIn);
}

/**
 * This method returns the first argument it receives.
 *
 * @static
 * @since 0.1.0
 * @memberOf _
 * @category Util
 * @param {*} value Any value.
 * @returns {*} Returns `value`.
 * @example
 *
 * var object = { 'a': 1 };
 *
 * console.log(_.identity(object) === object);
 * // => true
 */
function identity(value) {
  return value;
}

/**
 * A faster alternative to `Function#apply`, this function invokes `func`
 * with the `this` binding of `thisArg` and the arguments of `args`.
 *
 * @private
 * @param {Function} func The function to invoke.
 * @param {*} thisArg The `this` binding of `func`.
 * @param {Array} args The arguments to invoke `func` with.
 * @returns {*} Returns the result of `func`.
 */
function apply(func, thisArg, args) {
  switch (args.length) {
    case 0: return func.call(thisArg);
    case 1: return func.call(thisArg, args[0]);
    case 2: return func.call(thisArg, args[0], args[1]);
    case 3: return func.call(thisArg, args[0], args[1], args[2]);
  }
  return func.apply(thisArg, args);
}

/* Built-in method references for those with the same name as other `lodash` methods. */
var nativeMax = Math.max;

/**
 * A specialized version of `baseRest` which transforms the rest array.
 *
 * @private
 * @param {Function} func The function to apply a rest parameter to.
 * @param {number} [start=func.length-1] The start position of the rest parameter.
 * @param {Function} transform The rest array transform.
 * @returns {Function} Returns the new function.
 */
function overRest(func, start, transform) {
  start = nativeMax(start === undefined ? (func.length - 1) : start, 0);
  return function() {
    var args = arguments,
        index = -1,
        length = nativeMax(args.length - start, 0),
        array = Array(length);

    while (++index < length) {
      array[index] = args[start + index];
    }
    index = -1;
    var otherArgs = Array(start + 1);
    while (++index < start) {
      otherArgs[index] = args[index];
    }
    otherArgs[start] = transform(array);
    return apply(func, this, otherArgs);
  };
}

/**
 * Creates a function that returns `value`.
 *
 * @static
 * @memberOf _
 * @since 2.4.0
 * @category Util
 * @param {*} value The value to return from the new function.
 * @returns {Function} Returns the new constant function.
 * @example
 *
 * var objects = _.times(2, _.constant({ 'a': 1 }));
 *
 * console.log(objects);
 * // => [{ 'a': 1 }, { 'a': 1 }]
 *
 * console.log(objects[0] === objects[1]);
 * // => true
 */
function constant(value) {
  return function() {
    return value;
  };
}

/**
 * The base implementation of `setToString` without support for hot loop shorting.
 *
 * @private
 * @param {Function} func The function to modify.
 * @param {Function} string The `toString` result.
 * @returns {Function} Returns `func`.
 */
var baseSetToString = !defineProperty ? identity : function(func, string) {
  return defineProperty(func, 'toString', {
    'configurable': true,
    'enumerable': false,
    'value': constant(string),
    'writable': true
  });
};

/** Used to detect hot functions by number of calls within a span of milliseconds. */
var HOT_COUNT = 800,
    HOT_SPAN = 16;

/* Built-in method references for those with the same name as other `lodash` methods. */
var nativeNow = Date.now;

/**
 * Creates a function that'll short out and invoke `identity` instead
 * of `func` when it's called `HOT_COUNT` or more times in `HOT_SPAN`
 * milliseconds.
 *
 * @private
 * @param {Function} func The function to restrict.
 * @returns {Function} Returns the new shortable function.
 */
function shortOut(func) {
  var count = 0,
      lastCalled = 0;

  return function() {
    var stamp = nativeNow(),
        remaining = HOT_SPAN - (stamp - lastCalled);

    lastCalled = stamp;
    if (remaining > 0) {
      if (++count >= HOT_COUNT) {
        return arguments[0];
      }
    } else {
      count = 0;
    }
    return func.apply(undefined, arguments);
  };
}

/**
 * Sets the `toString` method of `func` to return `string`.
 *
 * @private
 * @param {Function} func The function to modify.
 * @param {Function} string The `toString` result.
 * @returns {Function} Returns `func`.
 */
var setToString = shortOut(baseSetToString);

/**
 * The base implementation of `_.rest` which doesn't validate or coerce arguments.
 *
 * @private
 * @param {Function} func The function to apply a rest parameter to.
 * @param {number} [start=func.length-1] The start position of the rest parameter.
 * @returns {Function} Returns the new function.
 */
function baseRest(func, start) {
  return setToString(overRest(func, start, identity), func + '');
}

/**
 * Checks if the given arguments are from an iteratee call.
 *
 * @private
 * @param {*} value The potential iteratee value argument.
 * @param {*} index The potential iteratee index or key argument.
 * @param {*} object The potential iteratee object argument.
 * @returns {boolean} Returns `true` if the arguments are from an iteratee call,
 *  else `false`.
 */
function isIterateeCall(value, index, object) {
  if (!isObject(object)) {
    return false;
  }
  var type = typeof index;
  if (type == 'number'
        ? (isArrayLike(object) && isIndex(index, object.length))
        : (type == 'string' && index in object)
      ) {
    return eq(object[index], value);
  }
  return false;
}

/**
 * Creates a function like `_.assign`.
 *
 * @private
 * @param {Function} assigner The function to assign values.
 * @returns {Function} Returns the new assigner function.
 */
function createAssigner(assigner) {
  return baseRest(function(object, sources) {
    var index = -1,
        length = sources.length,
        customizer = length > 1 ? sources[length - 1] : undefined,
        guard = length > 2 ? sources[2] : undefined;

    customizer = (assigner.length > 3 && typeof customizer == 'function')
      ? (length--, customizer)
      : undefined;

    if (guard && isIterateeCall(sources[0], sources[1], guard)) {
      customizer = length < 3 ? undefined : customizer;
      length = 1;
    }
    object = Object(object);
    while (++index < length) {
      var source = sources[index];
      if (source) {
        assigner(object, source, index, customizer);
      }
    }
    return object;
  });
}

/**
 * This method is like `_.assign` except that it recursively merges own and
 * inherited enumerable string keyed properties of source objects into the
 * destination object. Source properties that resolve to `undefined` are
 * skipped if a destination value exists. Array and plain object properties
 * are merged recursively. Other objects and value types are overridden by
 * assignment. Source objects are applied from left to right. Subsequent
 * sources overwrite property assignments of previous sources.
 *
 * **Note:** This method mutates `object`.
 *
 * @static
 * @memberOf _
 * @since 0.5.0
 * @category Object
 * @param {Object} object The destination object.
 * @param {...Object} [sources] The source objects.
 * @returns {Object} Returns `object`.
 * @example
 *
 * var object = {
 *   'a': [{ 'b': 2 }, { 'd': 4 }]
 * };
 *
 * var other = {
 *   'a': [{ 'c': 3 }, { 'e': 5 }]
 * };
 *
 * _.merge(object, other);
 * // => { 'a': [{ 'b': 2, 'c': 3 }, { 'd': 4, 'e': 5 }] }
 */
var merge = createAssigner(function(object, source, srcIndex) {
  baseMerge(object, source, srcIndex);
});

var createProxiedApi = function (_a) {
    var givenApi = _a.givenApi, client = _a.client, tag = _a.tag;
    return new Proxy(givenApi, {
        get: function (target, prop, receiver) {
            var functionName = String(prop);
            if (Reflect.has(target, functionName)) {
                return Reflect.get(target, prop, receiver);
            }
            return function () {
                var args = [];
                for (var _i = 0; _i < arguments.length; _i++) {
                    args[_i] = arguments[_i];
                }
                return __awaiter(void 0, void 0, void 0, function () {
                    return __generator(this, function (_a) {
                        return [2 /*return*/, client
                                .post("/".concat(tag, "/").concat(functionName), args)
                                .then(function (r) { return r.data; })];
                    });
                });
            };
        }
    });
};
var getCookies = function (context) { var _a, _b, _c; return (_c = (_b = (_a = context === null || context === void 0 ? void 0 : context.req) === null || _a === void 0 ? void 0 : _a.headers) === null || _b === void 0 ? void 0 : _b.cookie) !== null && _c !== void 0 ? _c : ''; };
var getIntegrationConfig = function (context, configuration) {
    var _a;
    var cookie = getCookies(context);
    if (process.server && ((_a = context === null || context === void 0 ? void 0 : context.$config) === null || _a === void 0 ? void 0 : _a.middlewareUrl)) {
        Logger.info('Applied middlewareUrl as ', context.$config.middlewareUrl);
    }
    var _b = context.$config, middlewareUrl = _b.middlewareUrl, ssrMiddlewareUrl = _b.ssrMiddlewareUrl;
    if (!middlewareUrl) {
        throw new Error('`middlewareUrl` is required. Provide the `middlewareUrl` in your integration\'s configuration.');
    }
    var baseURL = process.server ? ssrMiddlewareUrl || middlewareUrl : middlewareUrl;
    if (!baseURL.match(/https?:\/\//) && baseURL.charAt(0) !== '/') {
        baseURL = "/".concat(baseURL);
    }
    return merge({
        axios: {
            baseURL: baseURL,
            headers: __assign(__assign({}, (cookie ? { cookie: cookie } : {})), (context.req ? { Host: context.req.headers['x-forwarded-host'] || context.req.headers.host } : {}))
        }
    }, configuration);
};

var parseCookies = function (cookieString) {
    return cookieString
        .split(';')
        .filter(String)
        .map(function (item) { return item.split('=').map(function (part) { return part.trim(); }); })
        .reduce(function (obj, _a) {
        var _b;
        var name = _a[0], value = _a[1];
        return (__assign(__assign({}, obj), (_b = {}, _b[name] = value, _b)));
    }, {});
};
var setCookieValues = function (cookieValues, cookieString) {
    if (cookieString === void 0) { cookieString = ''; }
    var parsed = parseCookies(cookieString);
    Object.entries(cookieValues).forEach(function (_a) {
        var name = _a[0], value = _a[1];
        return parsed[name] = value;
    });
    return Object.entries(parsed).map(function (_a) {
        var name = _a[0], value = _a[1];
        return "".concat(name, "=").concat(value);
    }).join('; ');
};
var integrationPlugin = function (pluginFn) { return function (nuxtCtx, inject) {
    var configure = function (tag, configuration) {
        var injectInContext = createAddIntegrationToCtx({ tag: tag, nuxtCtx: nuxtCtx, inject: inject });
        var config = getIntegrationConfig(nuxtCtx, configuration);
        var client = axios.create(config.axios);
        var api = createProxiedApi({ givenApi: configuration.api || {}, client: client, tag: tag });
        if (nuxtCtx.app.i18n.cookieValues) {
            client.defaults.headers.cookie = setCookieValues(nuxtCtx.app.i18n.cookieValues, client.defaults.headers.cookie);
        }
        injectInContext({ api: api, client: client, config: config });
    };
    var extend = function (tag, integrationProperties) {
        createExtendIntegrationInCtx({ tag: tag, nuxtCtx: nuxtCtx, inject: inject })(integrationProperties);
    };
    var integration = { configure: configure, extend: extend };
    pluginFn(__assign(__assign({}, nuxtCtx), { integration: integration }), inject);
}; };

var createFactoryParamsMethod = function (fn, fnName, context) { return function (argObj) {
    if (fnName === 'provide') {
        return fn(context);
    }
    return fn(context, argObj);
}; };
var createFactoryParamsReducer$1 = function (context) { return function (prev, _a) {
    var _b;
    var fnName = _a[0], fn = _a[1];
    return (__assign(__assign({}, prev), (_b = {}, _b[fnName] = createFactoryParamsMethod(fn, fnName, context), _b)));
}; };
var createCommonMethods = function (factoryParams, context) {
    return Object.entries(factoryParams)
        .reduce(createFactoryParamsReducer$1(context), {});
};

var createPlatformMethod = function (context, refs, functionObject) { return function (params) { return __awaiter(void 0, void 0, void 0, function () {
    var mainRef, loading, error, alias, _a, err_1;
    var _b;
    return __generator(this, function (_c) {
        switch (_c.label) {
            case 0:
                mainRef = refs.mainRef, loading = refs.loading, error = refs.error, alias = refs.alias;
                _c.label = 1;
            case 1:
                _c.trys.push([1, 3, 4, 5]);
                loading.value = true;
                _a = mainRef;
                return [4 /*yield*/, functionObject.fn(context, __assign(__assign({}, params), (_b = {}, _b[alias] = mainRef.value, _b)))];
            case 2:
                _a.value = _c.sent();
                loading.value = false;
                return [3 /*break*/, 5];
            case 3:
                err_1 = _c.sent();
                error.value[functionObject.fnName] = err_1;
                Logger.error("api.".concat(functionObject.fnName), err_1);
                return [3 /*break*/, 5];
            case 4:
                loading.value = false;
                return [7 /*endfinally*/];
            case 5: return [2 /*return*/];
        }
    });
}); }; };
var createFactoryParamsReducer = function (context, refs) { return function (prev, _a) {
    var _b;
    var fnName = _a[0], fn = _a[1];
    return (__assign(__assign({}, prev), (_b = {}, _b[fnName] = createPlatformMethod(context, refs, { fnName: fnName, fn: fn }), _b)));
}; };
var createPlatformMethods = function (apiSection, context, refs) {
    return Object.entries(apiSection).reduce(createFactoryParamsReducer(context, refs), {});
};

var configureFactoryParams = function (factoryParams, refs) {
    if (refs === void 0) { refs = null; }
    var context = generateContext(factoryParams);
    var api = factoryParams.api, methods = __rest(factoryParams, ["api"]);
    var commonMethods = createCommonMethods(methods, context);
    var platformMethods = refs ? createPlatformMethods(api || {}, context, refs) : {};
    return __assign(__assign({}, commonMethods), { api: platformMethods });
};

var i18nRedirectsUtil = function (_a) {
    var _b;
    var path = _a.path, defaultLocale = _a.defaultLocale, availableLocales = _a.availableLocales, cookieLocale = _a.cookieLocale, acceptedLanguages = _a.acceptedLanguages, autoRedirectByLocale = _a.autoRedirectByLocale;
    var localeRegexp = new RegExp("^/(?<locale>".concat(availableLocales.join('|'), ")(?=(/|$))"), 'g');
    var localeFromPath = (_b = localeRegexp.exec(path)) === null || _b === void 0 ? void 0 : _b.groups.locale;
    var strippedLocaleFromPath = path.replace("/".concat(localeFromPath), '');
    var removeTailingSlash = function (path) { return path.replace(/\/$/, ''); };
    var getTargetLocale = function () {
        var languagesOrderedByPriority = __spreadArray(__spreadArray(__spreadArray([
            localeFromPath
        ], (autoRedirectByLocale && [cookieLocale]), true), (autoRedirectByLocale && acceptedLanguages), true), [
            defaultLocale
        ]);
        return languagesOrderedByPriority.find(function (code) { return availableLocales.includes(code); });
    };
    var getRedirectPath = function () {
        var targetLocale = getTargetLocale();
        var isTargetDefaultLocale = targetLocale === defaultLocale;
        var isTargetInPath = targetLocale === localeFromPath;
        if (!localeFromPath && !isTargetInPath && !isTargetDefaultLocale) {
            return removeTailingSlash("/".concat(targetLocale).concat(strippedLocaleFromPath));
        }
        return '';
    };
    return {
        getRedirectPath: getRedirectPath,
        getTargetLocale: getTargetLocale
    };
};

var nopBefore = function (_a) {
    var args = _a.args;
    return args;
};
var nopAfter = function (_a) {
    var response = _a.response;
    return response;
};
var createExtendQuery = function (context) { return function (customQuery, defaults) {
    var customQueries = context.customQueries || {};
    var queryArgs = customQuery || {};
    var metadata = (customQuery && customQuery.metadata) || {};
    return Object.entries(defaults)
        .reduce(function (prev, _a) {
        var _b;
        var queryName = _a[0], initialArgs = _a[1];
        var queryFn = customQueries[queryArgs[queryName]] || (function () { return initialArgs; });
        return __assign(__assign({}, prev), (_b = {}, _b[queryName] = queryFn(__assign(__assign({}, initialArgs), { metadata: metadata })), _b));
    }, {});
}; };
var applyContextToApi = function (api, context, 
/**
 * By default we use NOP function for returning the same parameters as they come.
 * It's useful in extensions, when someone don't want to inject into changing arguments or the response,
 * in that case, we use default function, to handle that scenario - NOP
 */
hooks) {
    if (hooks === void 0) { hooks = { before: nopBefore, after: nopAfter }; }
    return Object.entries(api)
        .reduce(function (prev, _a) {
        var _b;
        var callName = _a[0], fn = _a[1];
        return (__assign(__assign({}, prev), (_b = {}, _b[callName] = function () {
            var args = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                args[_i] = arguments[_i];
            }
            return __awaiter(void 0, void 0, void 0, function () {
                var extendQuery, transformedArgs, apiClientContext, response, transformedResponse;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            extendQuery = createExtendQuery(context);
                            transformedArgs = hooks.before({ callName: callName, args: args });
                            apiClientContext = __assign(__assign({}, context), { extendQuery: extendQuery });
                            return [4 /*yield*/, fn.apply(void 0, __spreadArray([apiClientContext], transformedArgs))];
                        case 1:
                            response = _a.sent();
                            transformedResponse = hooks.after({ callName: callName, args: args, response: response });
                            return [2 /*return*/, transformedResponse];
                    }
                });
            });
        }, _b)));
    }, {});
};

var isFn = function (x) { return typeof x === 'function'; };
var apiClientFactory = function (factoryParams) {
    function createApiClient(config, customApi) {
        var _this = this;
        var _a;
        if (customApi === void 0) { customApi = {}; }
        var rawExtensions = ((_a = this === null || this === void 0 ? void 0 : this.middleware) === null || _a === void 0 ? void 0 : _a.extensions) || [];
        var lifecycles = Object.values(rawExtensions)
            .filter(function (ext) { return isFn(ext.hooks); })
            .map(function (_a) {
            var _b, _c;
            var hooks = _a.hooks;
            return hooks((_b = _this === null || _this === void 0 ? void 0 : _this.middleware) === null || _b === void 0 ? void 0 : _b.req, (_c = _this === null || _this === void 0 ? void 0 : _this.middleware) === null || _c === void 0 ? void 0 : _c.res);
        });
        var extendedApis = Object.keys(rawExtensions)
            .reduce(function (prev, curr) { return (__assign(__assign({}, prev), rawExtensions[curr].extendApiMethods)); }, customApi);
        var _config = lifecycles
            .filter(function (ext) { return isFn(ext.beforeCreate); })
            .reduce(function (prev, curr) { return curr.beforeCreate({ configuration: prev }); }, config);
        var settings = factoryParams.onCreate ? factoryParams.onCreate(_config) : { config: config, client: config.client };
        Logger.debug('apiClientFactory.create', settings);
        settings.config = lifecycles
            .filter(function (ext) { return isFn(ext.afterCreate); })
            .reduce(function (prev, curr) { return curr.afterCreate({ configuration: prev }); }, settings.config);
        var extensionHooks = {
            before: function (params) { return lifecycles
                .filter(function (e) { return isFn(e.beforeCall); })
                .reduce(function (args, e) { return e.beforeCall(__assign(__assign({}, params), { configuration: settings.config, args: args })); }, params.args); },
            after: function (params) { return lifecycles
                .filter(function (e) { return isFn(e.afterCall); })
                .reduce(function (response, e) { return e.afterCall(__assign(__assign({}, params), { configuration: settings.config, response: response })); }, params.response); }
        };
        var api = applyContextToApi(__assign(__assign({}, factoryParams.api), extendedApis), __assign(__assign({}, settings), (this === null || this === void 0 ? void 0 : this.middleware) || {}), extensionHooks);
        return {
            api: api,
            client: settings.client,
            settings: settings.config
        };
    }
    createApiClient._predefinedExtensions = factoryParams.extensions || [];
    return { createApiClient: createApiClient };
};

var useBillingFactory = function (factoryParams) {
    return function useBilling() {
        var _this = this;
        var loading = sharedRef(false, 'useBilling-loading');
        var billing = sharedRef(null, 'useBilling-billing');
        var error = sharedRef({
            load: null,
            save: null
        }, 'useBilling-error');
        var _factoryParams = configureFactoryParams(factoryParams, { mainRef: billing, alias: 'currentBilling', loading: loading, error: error });
        var load = function (_a) {
            var _b = _a === void 0 ? {} : _a, _c = _b.customQuery, customQuery = _c === void 0 ? null : _c;
            return __awaiter(_this, void 0, void 0, function () {
                var billingInfo, err_1;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0:
                            Logger.debug('useBilling.load');
                            _d.label = 1;
                        case 1:
                            _d.trys.push([1, 3, 4, 5]);
                            loading.value = true;
                            return [4 /*yield*/, _factoryParams.load({ customQuery: customQuery })];
                        case 2:
                            billingInfo = _d.sent();
                            error.value.load = null;
                            billing.value = billingInfo;
                            return [3 /*break*/, 5];
                        case 3:
                            err_1 = _d.sent();
                            error.value.load = err_1;
                            Logger.error('useBilling/load', err_1);
                            return [3 /*break*/, 5];
                        case 4:
                            loading.value = false;
                            return [7 /*endfinally*/];
                        case 5: return [2 /*return*/];
                    }
                });
            });
        };
        var save = function (saveParams) { return __awaiter(_this, void 0, void 0, function () {
            var billingInfo, err_2;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        Logger.debug('useBilling.save');
                        _a.label = 1;
                    case 1:
                        _a.trys.push([1, 3, 4, 5]);
                        loading.value = true;
                        return [4 /*yield*/, _factoryParams.save(saveParams)];
                    case 2:
                        billingInfo = _a.sent();
                        error.value.save = null;
                        billing.value = billingInfo;
                        return [3 /*break*/, 5];
                    case 3:
                        err_2 = _a.sent();
                        error.value.save = err_2;
                        Logger.error('useBilling/save', err_2);
                        return [3 /*break*/, 5];
                    case 4:
                        loading.value = false;
                        return [7 /*endfinally*/];
                    case 5: return [2 /*return*/];
                }
            });
        }); };
        return {
            api: _factoryParams.api,
            billing: computed(function () { return billing.value; }),
            loading: computed(function () { return loading.value; }),
            error: computed(function () { return error.value; }),
            load: load,
            save: save
        };
    };
};

var useCartFactory = function (factoryParams) {
    return function useCart() {
        var _this = this;
        var loading = sharedRef(false, 'useCart-loading');
        var cart = sharedRef(null, 'useCart-cart');
        var error = sharedRef({
            addItem: null,
            removeItem: null,
            updateItemQty: null,
            load: null,
            clear: null,
            applyCoupon: null,
            removeCoupon: null
        }, 'useCart-error');
        var _factoryParams = configureFactoryParams(factoryParams, { mainRef: cart, alias: 'currentCart', loading: loading, error: error });
        var setCart = function (newCart) {
            cart.value = newCart;
            Logger.debug('useCartFactory.setCart', newCart);
        };
        var addItem = function (_a) {
            var product = _a.product, quantity = _a.quantity, customQuery = _a.customQuery;
            return __awaiter(_this, void 0, void 0, function () {
                var updatedCart, err_1;
                return __generator(this, function (_b) {
                    switch (_b.label) {
                        case 0:
                            Logger.debug('useCart.addItem', { product: product, quantity: quantity });
                            _b.label = 1;
                        case 1:
                            _b.trys.push([1, 3, 4, 5]);
                            loading.value = true;
                            return [4 /*yield*/, _factoryParams.addItem({
                                    currentCart: cart.value,
                                    product: product,
                                    quantity: quantity,
                                    customQuery: customQuery
                                })];
                        case 2:
                            updatedCart = _b.sent();
                            error.value.addItem = null;
                            cart.value = updatedCart;
                            return [3 /*break*/, 5];
                        case 3:
                            err_1 = _b.sent();
                            error.value.addItem = err_1;
                            Logger.error('useCart/addItem', err_1);
                            return [3 /*break*/, 5];
                        case 4:
                            loading.value = false;
                            return [7 /*endfinally*/];
                        case 5: return [2 /*return*/];
                    }
                });
            });
        };
        var removeItem = function (_a) {
            var product = _a.product, customQuery = _a.customQuery;
            return __awaiter(_this, void 0, void 0, function () {
                var updatedCart, err_2;
                return __generator(this, function (_b) {
                    switch (_b.label) {
                        case 0:
                            Logger.debug('useCart.removeItem', { product: product });
                            _b.label = 1;
                        case 1:
                            _b.trys.push([1, 3, 4, 5]);
                            loading.value = true;
                            return [4 /*yield*/, _factoryParams.removeItem({
                                    currentCart: cart.value,
                                    product: product,
                                    customQuery: customQuery
                                })];
                        case 2:
                            updatedCart = _b.sent();
                            error.value.removeItem = null;
                            cart.value = updatedCart;
                            return [3 /*break*/, 5];
                        case 3:
                            err_2 = _b.sent();
                            error.value.removeItem = err_2;
                            Logger.error('useCart/removeItem', err_2);
                            return [3 /*break*/, 5];
                        case 4:
                            loading.value = false;
                            return [7 /*endfinally*/];
                        case 5: return [2 /*return*/];
                    }
                });
            });
        };
        var updateItemQty = function (_a) {
            var product = _a.product, quantity = _a.quantity, customQuery = _a.customQuery;
            return __awaiter(_this, void 0, void 0, function () {
                var updatedCart, err_3;
                return __generator(this, function (_b) {
                    switch (_b.label) {
                        case 0:
                            Logger.debug('useCart.updateItemQty', { product: product, quantity: quantity });
                            if (!(quantity && quantity > 0)) return [3 /*break*/, 5];
                            _b.label = 1;
                        case 1:
                            _b.trys.push([1, 3, 4, 5]);
                            loading.value = true;
                            return [4 /*yield*/, _factoryParams.updateItemQty({
                                    currentCart: cart.value,
                                    product: product,
                                    quantity: quantity,
                                    customQuery: customQuery
                                })];
                        case 2:
                            updatedCart = _b.sent();
                            error.value.updateItemQty = null;
                            cart.value = updatedCart;
                            return [3 /*break*/, 5];
                        case 3:
                            err_3 = _b.sent();
                            error.value.updateItemQty = err_3;
                            Logger.error('useCart/updateItemQty', err_3);
                            return [3 /*break*/, 5];
                        case 4:
                            loading.value = false;
                            return [7 /*endfinally*/];
                        case 5: return [2 /*return*/];
                    }
                });
            });
        };
        var load = function (_a) {
            var _b = _a === void 0 ? { customQuery: undefined } : _a, customQuery = _b.customQuery;
            return __awaiter(_this, void 0, void 0, function () {
                var _c, err_4;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0:
                            Logger.debug('useCart.load');
                            if (cart.value) {
                                /**
                                 * Triggering change for hydration purpose,
                                 * temporary issue related with cpapi plugin
                                 */
                                loading.value = false;
                                error.value.load = null;
                                cart.value = __assign({}, cart.value);
                                return [2 /*return*/];
                            }
                            _d.label = 1;
                        case 1:
                            _d.trys.push([1, 3, 4, 5]);
                            loading.value = true;
                            _c = cart;
                            return [4 /*yield*/, _factoryParams.load({ customQuery: customQuery })];
                        case 2:
                            _c.value = _d.sent();
                            error.value.load = null;
                            return [3 /*break*/, 5];
                        case 3:
                            err_4 = _d.sent();
                            error.value.load = err_4;
                            Logger.error('useCart/load', err_4);
                            return [3 /*break*/, 5];
                        case 4:
                            loading.value = false;
                            return [7 /*endfinally*/];
                        case 5: return [2 /*return*/];
                    }
                });
            });
        };
        var clear = function () { return __awaiter(_this, void 0, void 0, function () {
            var updatedCart, err_5;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        Logger.debug('useCart.clear');
                        _a.label = 1;
                    case 1:
                        _a.trys.push([1, 3, 4, 5]);
                        loading.value = true;
                        return [4 /*yield*/, _factoryParams.clear({ currentCart: cart.value })];
                    case 2:
                        updatedCart = _a.sent();
                        error.value.clear = null;
                        cart.value = updatedCart;
                        return [3 /*break*/, 5];
                    case 3:
                        err_5 = _a.sent();
                        error.value.clear = err_5;
                        Logger.error('useCart/clear', err_5);
                        return [3 /*break*/, 5];
                    case 4:
                        loading.value = false;
                        return [7 /*endfinally*/];
                    case 5: return [2 /*return*/];
                }
            });
        }); };
        var isInCart = function (_a) {
            var product = _a.product;
            return _factoryParams.isInCart({
                currentCart: cart.value,
                product: product
            });
        };
        var applyCoupon = function (_a) {
            var couponCode = _a.couponCode, customQuery = _a.customQuery;
            return __awaiter(_this, void 0, void 0, function () {
                var updatedCart, err_6;
                return __generator(this, function (_b) {
                    switch (_b.label) {
                        case 0:
                            Logger.debug('useCart.applyCoupon');
                            _b.label = 1;
                        case 1:
                            _b.trys.push([1, 3, 4, 5]);
                            loading.value = true;
                            return [4 /*yield*/, _factoryParams.applyCoupon({
                                    currentCart: cart.value,
                                    couponCode: couponCode,
                                    customQuery: customQuery
                                })];
                        case 2:
                            updatedCart = (_b.sent()).updatedCart;
                            error.value.applyCoupon = null;
                            cart.value = updatedCart;
                            return [3 /*break*/, 5];
                        case 3:
                            err_6 = _b.sent();
                            error.value.applyCoupon = err_6;
                            Logger.error('useCart/applyCoupon', err_6);
                            return [3 /*break*/, 5];
                        case 4:
                            loading.value = false;
                            return [7 /*endfinally*/];
                        case 5: return [2 /*return*/];
                    }
                });
            });
        };
        var removeCoupon = function (_a) {
            var couponCode = _a.couponCode, customQuery = _a.customQuery;
            return __awaiter(_this, void 0, void 0, function () {
                var updatedCart, err_7;
                return __generator(this, function (_b) {
                    switch (_b.label) {
                        case 0:
                            Logger.debug('useCart.removeCoupon');
                            _b.label = 1;
                        case 1:
                            _b.trys.push([1, 3, 4, 5]);
                            loading.value = true;
                            return [4 /*yield*/, _factoryParams.removeCoupon({
                                    currentCart: cart.value,
                                    couponCode: couponCode,
                                    customQuery: customQuery
                                })];
                        case 2:
                            updatedCart = (_b.sent()).updatedCart;
                            error.value.removeCoupon = null;
                            cart.value = updatedCart;
                            loading.value = false;
                            return [3 /*break*/, 5];
                        case 3:
                            err_7 = _b.sent();
                            error.value.removeCoupon = err_7;
                            Logger.error('useCart/removeCoupon', err_7);
                            return [3 /*break*/, 5];
                        case 4:
                            loading.value = false;
                            return [7 /*endfinally*/];
                        case 5: return [2 /*return*/];
                    }
                });
            });
        };
        return {
            api: _factoryParams.api,
            setCart: setCart,
            cart: computed(function () { return cart.value; }),
            isInCart: isInCart,
            addItem: addItem,
            load: load,
            removeItem: removeItem,
            clear: clear,
            updateItemQty: updateItemQty,
            applyCoupon: applyCoupon,
            removeCoupon: removeCoupon,
            loading: computed(function () { return loading.value; }),
            error: computed(function () { return error.value; })
        };
    };
};

function useCategoryFactory(factoryParams) {
    return function useCategory(id) {
        var _this = this;
        var categories = sharedRef([], "useCategory-categories-".concat(id));
        var loading = sharedRef(false, "useCategory-loading-".concat(id));
        var error = sharedRef({
            search: null
        }, "useCategory-error-".concat(id));
        var _factoryParams = configureFactoryParams(factoryParams, { mainRef: categories, alias: 'currentCategories', loading: loading, error: error });
        var search = function (searchParams) { return __awaiter(_this, void 0, void 0, function () {
            var _a, err_1;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        Logger.debug("useCategory/".concat(id, "/search"), searchParams);
                        _b.label = 1;
                    case 1:
                        _b.trys.push([1, 3, 4, 5]);
                        loading.value = true;
                        _a = categories;
                        return [4 /*yield*/, _factoryParams.categorySearch(searchParams)];
                    case 2:
                        _a.value = _b.sent();
                        error.value.search = null;
                        return [3 /*break*/, 5];
                    case 3:
                        err_1 = _b.sent();
                        error.value.search = err_1;
                        Logger.error("useCategory/".concat(id, "/search"), err_1);
                        return [3 /*break*/, 5];
                    case 4:
                        loading.value = false;
                        return [7 /*endfinally*/];
                    case 5: return [2 /*return*/];
                }
            });
        }); };
        return {
            api: _factoryParams.api,
            search: search,
            loading: computed(function () { return loading.value; }),
            categories: computed(function () { return categories.value; }),
            error: computed(function () { return error.value; })
        };
    };
}

function useContentFactory(factoryParams) {
    return function useContent(id) {
        var _this = this;
        var content = sharedRef([], "useContent-content-".concat(id));
        var loading = sharedRef(false, "useContent-loading-".concat(id));
        var error = sharedRef({
            search: null
        }, "useContent-error-".concat(id));
        var _factoryParams = configureFactoryParams(factoryParams, { mainRef: content, alias: 'currentContent', loading: loading, error: error });
        var search = function (params) { return __awaiter(_this, void 0, void 0, function () {
            var _a, err_1;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        Logger.debug("useContent/".concat(id, "/search"), params);
                        _b.label = 1;
                    case 1:
                        _b.trys.push([1, 3, 4, 5]);
                        loading.value = true;
                        _a = content;
                        return [4 /*yield*/, _factoryParams.search(params)];
                    case 2:
                        _a.value = _b.sent();
                        error.value.search = null;
                        return [3 /*break*/, 5];
                    case 3:
                        err_1 = _b.sent();
                        error.value.search = err_1;
                        Logger.error("useContent/".concat(id, "/search"), err_1);
                        return [3 /*break*/, 5];
                    case 4:
                        loading.value = false;
                        return [7 /*endfinally*/];
                    case 5: return [2 /*return*/];
                }
            });
        }); };
        return {
            api: _factoryParams.api,
            search: search,
            content: computed(function () { return content.value; }),
            loading: computed(function () { return loading.value; }),
            error: computed(function () { return error.value; })
        };
    };
}
function renderContentFactory(factoryParams) {
    return {
        render: function render(createElement) {
            var components = [];
            // eslint-disable-next-line
            var self = this;
            var content = self.content;
            var resolvedContent = factoryParams.extractContent(content);
            resolvedContent.map(function component(component) {
                var componentName = component.componentName, props = component.props;
                components.push(createElement(componentName, { attrs: { name: componentName }, props: props }, self.$slots.default));
            });
            return createElement('div', components);
        },
        props: {
            content: {
                type: [Array, Object]
            }
        }
    };
}

var useFacetFactory = function (factoryParams) {
    var useFacet = function (id) {
        var ssrKey = id || 'useFacet';
        var loading = sharedRef(false, "".concat(ssrKey, "-loading"));
        var result = sharedRef({ data: null, input: null }, "".concat(ssrKey, "-facets"));
        var _factoryParams = configureFactoryParams(factoryParams);
        var error = sharedRef({
            search: null
        }, "useFacet-error-".concat(id));
        var search = function (params) { return __awaiter(void 0, void 0, void 0, function () {
            var _a, err_1;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        Logger.debug("useFacet/".concat(ssrKey, "/search"), params);
                        result.value.input = params;
                        _b.label = 1;
                    case 1:
                        _b.trys.push([1, 3, 4, 5]);
                        loading.value = true;
                        _a = result.value;
                        return [4 /*yield*/, _factoryParams.search(result.value)];
                    case 2:
                        _a.data = _b.sent();
                        error.value.search = null;
                        return [3 /*break*/, 5];
                    case 3:
                        err_1 = _b.sent();
                        error.value.search = err_1;
                        Logger.error("useFacet/".concat(ssrKey, "/search"), err_1);
                        return [3 /*break*/, 5];
                    case 4:
                        loading.value = false;
                        return [7 /*endfinally*/];
                    case 5: return [2 /*return*/];
                }
            });
        }); };
        return {
            result: computed(function () { return result.value; }),
            loading: computed(function () { return loading.value; }),
            error: computed(function () { return error.value; }),
            search: search
        };
    };
    return useFacet;
};

var useMakeOrderFactory = function (factoryParams) {
    return function useMakeOrder() {
        var _this = this;
        var order = sharedRef(null, 'useMakeOrder-order');
        var loading = sharedRef(false, 'useMakeOrder-loading');
        var error = sharedRef({
            make: null
        }, 'useMakeOrder-error');
        var _factoryParams = configureFactoryParams(factoryParams, { mainRef: order, alias: 'currentOrder', loading: loading, error: error });
        var make = function (params) {
            if (params === void 0) { params = { customQuery: null }; }
            return __awaiter(_this, void 0, void 0, function () {
                var createdOrder, err_1;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            Logger.debug('useMakeOrder.make');
                            _a.label = 1;
                        case 1:
                            _a.trys.push([1, 3, 4, 5]);
                            loading.value = true;
                            return [4 /*yield*/, _factoryParams.make(params)];
                        case 2:
                            createdOrder = _a.sent();
                            error.value.make = null;
                            order.value = createdOrder;
                            return [3 /*break*/, 5];
                        case 3:
                            err_1 = _a.sent();
                            error.value.make = err_1;
                            Logger.error('useMakeOrder.make', err_1);
                            return [3 /*break*/, 5];
                        case 4:
                            loading.value = false;
                            return [7 /*endfinally*/];
                        case 5: return [2 /*return*/];
                    }
                });
            });
        };
        return {
            api: _factoryParams.api,
            order: order,
            make: make,
            loading: computed(function () { return loading.value; }),
            error: computed(function () { return error.value; })
        };
    };
};

function useProductFactory(factoryParams) {
    return function useProduct(id) {
        var _this = this;
        var products = sharedRef([], "useProduct-products-".concat(id));
        var loading = sharedRef(false, "useProduct-loading-".concat(id));
        var error = sharedRef({
            search: null
        }, "useProduct-error-".concat(id));
        var _factoryParams = configureFactoryParams(factoryParams, { mainRef: products, alias: 'currentProducts', loading: loading, error: error });
        var search = function (searchParams) { return __awaiter(_this, void 0, void 0, function () {
            var _a, err_1;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        Logger.debug("useProduct/".concat(id, "/search"), searchParams);
                        _b.label = 1;
                    case 1:
                        _b.trys.push([1, 3, 4, 5]);
                        loading.value = true;
                        _a = products;
                        return [4 /*yield*/, _factoryParams.productsSearch(searchParams)];
                    case 2:
                        _a.value = _b.sent();
                        error.value.search = null;
                        return [3 /*break*/, 5];
                    case 3:
                        err_1 = _b.sent();
                        error.value.search = err_1;
                        Logger.error("useProduct/".concat(id, "/search"), err_1);
                        return [3 /*break*/, 5];
                    case 4:
                        loading.value = false;
                        return [7 /*endfinally*/];
                    case 5: return [2 /*return*/];
                }
            });
        }); };
        return {
            search: search,
            products: computed(function () { return products.value; }),
            loading: computed(function () { return loading.value; }),
            error: computed(function () { return error.value; })
        };
    };
}

function useReviewFactory(factoryParams) {
    return function useReview(id) {
        var _this = this;
        var reviews = sharedRef([], "useReviews-reviews-".concat(id));
        var loading = sharedRef(false, "useReviews-loading-".concat(id));
        var error = sharedRef({
            search: null,
            addReview: null
        }, "useReviews-error-".concat(id));
        var _factoryParams = configureFactoryParams(factoryParams, { mainRef: reviews, alias: 'currentReviews', loading: loading, error: error });
        var search = function (searchParams) { return __awaiter(_this, void 0, void 0, function () {
            var _a, err_1;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        Logger.debug("useReview/".concat(id, "/search"), searchParams);
                        _b.label = 1;
                    case 1:
                        _b.trys.push([1, 3, 4, 5]);
                        loading.value = true;
                        _a = reviews;
                        return [4 /*yield*/, _factoryParams.searchReviews(searchParams)];
                    case 2:
                        _a.value = _b.sent();
                        error.value.search = null;
                        return [3 /*break*/, 5];
                    case 3:
                        err_1 = _b.sent();
                        error.value.search = err_1;
                        Logger.error("useReview/".concat(id, "/search"), err_1);
                        return [3 /*break*/, 5];
                    case 4:
                        loading.value = false;
                        return [7 /*endfinally*/];
                    case 5: return [2 /*return*/];
                }
            });
        }); };
        var addReview = function (params) { return __awaiter(_this, void 0, void 0, function () {
            var _a, err_2;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        Logger.debug("useReview/".concat(id, "/addReview"), params);
                        _b.label = 1;
                    case 1:
                        _b.trys.push([1, 3, 4, 5]);
                        loading.value = true;
                        _a = reviews;
                        return [4 /*yield*/, _factoryParams.addReview(params)];
                    case 2:
                        _a.value = _b.sent();
                        error.value.addReview = null;
                        return [3 /*break*/, 5];
                    case 3:
                        err_2 = _b.sent();
                        error.value.addReview = err_2;
                        Logger.error("useReview/".concat(id, "/addReview"), err_2);
                        return [3 /*break*/, 5];
                    case 4:
                        loading.value = false;
                        return [7 /*endfinally*/];
                    case 5: return [2 /*return*/];
                }
            });
        }); };
        return {
            api: _factoryParams.api,
            search: search,
            addReview: addReview,
            reviews: computed(function () { return reviews.value; }),
            loading: computed(function () { return loading.value; }),
            error: computed(function () { return error.value; })
        };
    };
}

var useShippingFactory = function (factoryParams) {
    return function useShipping() {
        var _this = this;
        var loading = sharedRef(false, 'useShipping-loading');
        var shipping = sharedRef(null, 'useShipping-shipping');
        var error = sharedRef({
            load: null,
            save: null
        }, 'useShipping-error');
        var _factoryParams = configureFactoryParams(factoryParams, { mainRef: shipping, alias: 'currentShipping', loading: loading, error: error });
        var load = function (_a) {
            var _b = _a === void 0 ? {} : _a, _c = _b.customQuery, customQuery = _c === void 0 ? null : _c;
            return __awaiter(_this, void 0, void 0, function () {
                var shippingInfo, err_1;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0:
                            Logger.debug('useShipping.load');
                            _d.label = 1;
                        case 1:
                            _d.trys.push([1, 3, 4, 5]);
                            loading.value = true;
                            return [4 /*yield*/, _factoryParams.load({ customQuery: customQuery })];
                        case 2:
                            shippingInfo = _d.sent();
                            error.value.load = null;
                            shipping.value = shippingInfo;
                            return [3 /*break*/, 5];
                        case 3:
                            err_1 = _d.sent();
                            error.value.load = err_1;
                            Logger.error('useShipping/load', err_1);
                            return [3 /*break*/, 5];
                        case 4:
                            loading.value = false;
                            return [7 /*endfinally*/];
                        case 5: return [2 /*return*/];
                    }
                });
            });
        };
        var save = function (saveParams) { return __awaiter(_this, void 0, void 0, function () {
            var shippingInfo, err_2;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        Logger.debug('useShipping.save');
                        _a.label = 1;
                    case 1:
                        _a.trys.push([1, 3, 4, 5]);
                        loading.value = true;
                        return [4 /*yield*/, _factoryParams.save(saveParams)];
                    case 2:
                        shippingInfo = _a.sent();
                        error.value.save = null;
                        shipping.value = shippingInfo;
                        return [3 /*break*/, 5];
                    case 3:
                        err_2 = _a.sent();
                        error.value.save = err_2;
                        Logger.error('useShipping/save', err_2);
                        return [3 /*break*/, 5];
                    case 4:
                        loading.value = false;
                        return [7 /*endfinally*/];
                    case 5: return [2 /*return*/];
                }
            });
        }); };
        return {
            api: _factoryParams.api,
            shipping: computed(function () { return shipping.value; }),
            loading: computed(function () { return loading.value; }),
            error: computed(function () { return error.value; }),
            load: load,
            save: save
        };
    };
};

var useUserBillingFactory = function (factoryParams) {
    var useUserBilling = function () {
        var loading = sharedRef(false, 'useUserBilling-loading');
        var billing = sharedRef({}, 'useUserBilling-billing');
        var error = sharedRef({
            addAddress: null,
            deleteAddress: null,
            updateAddress: null,
            load: null,
            setDefaultAddress: null
        }, 'useUserBilling-error');
        var _factoryParams = configureFactoryParams(factoryParams, { mainRef: billing, alias: 'currentBilling', loading: loading, error: error });
        var readonlyBilling = unref(billing);
        var addAddress = function (_a) {
            var address = _a.address, customQuery = _a.customQuery;
            return __awaiter(void 0, void 0, void 0, function () {
                var _b, err_1;
                return __generator(this, function (_c) {
                    switch (_c.label) {
                        case 0:
                            Logger.debug('useUserBilling.addAddress', address);
                            _c.label = 1;
                        case 1:
                            _c.trys.push([1, 3, 4, 5]);
                            loading.value = true;
                            _b = billing;
                            return [4 /*yield*/, _factoryParams.addAddress({
                                    address: address,
                                    billing: readonlyBilling,
                                    customQuery: customQuery
                                })];
                        case 2:
                            _b.value = _c.sent();
                            error.value.addAddress = null;
                            return [3 /*break*/, 5];
                        case 3:
                            err_1 = _c.sent();
                            error.value.addAddress = err_1;
                            Logger.error('useUserBilling/addAddress', err_1);
                            return [3 /*break*/, 5];
                        case 4:
                            loading.value = false;
                            return [7 /*endfinally*/];
                        case 5: return [2 /*return*/];
                    }
                });
            });
        };
        var deleteAddress = function (_a) {
            var address = _a.address, customQuery = _a.customQuery;
            return __awaiter(void 0, void 0, void 0, function () {
                var _b, err_2;
                return __generator(this, function (_c) {
                    switch (_c.label) {
                        case 0:
                            Logger.debug('useUserBilling.deleteAddress', address);
                            _c.label = 1;
                        case 1:
                            _c.trys.push([1, 3, 4, 5]);
                            loading.value = true;
                            _b = billing;
                            return [4 /*yield*/, _factoryParams.deleteAddress({
                                    address: address,
                                    billing: readonlyBilling,
                                    customQuery: customQuery
                                })];
                        case 2:
                            _b.value = _c.sent();
                            error.value.deleteAddress = null;
                            return [3 /*break*/, 5];
                        case 3:
                            err_2 = _c.sent();
                            error.value.deleteAddress = err_2;
                            Logger.error('useUserBilling/deleteAddress', err_2);
                            return [3 /*break*/, 5];
                        case 4:
                            loading.value = false;
                            return [7 /*endfinally*/];
                        case 5: return [2 /*return*/];
                    }
                });
            });
        };
        var updateAddress = function (_a) {
            var address = _a.address, customQuery = _a.customQuery;
            return __awaiter(void 0, void 0, void 0, function () {
                var _b, err_3;
                return __generator(this, function (_c) {
                    switch (_c.label) {
                        case 0:
                            Logger.debug('useUserBilling.updateAddress', address);
                            _c.label = 1;
                        case 1:
                            _c.trys.push([1, 3, 4, 5]);
                            loading.value = true;
                            _b = billing;
                            return [4 /*yield*/, _factoryParams.updateAddress({
                                    address: address,
                                    billing: readonlyBilling,
                                    customQuery: customQuery
                                })];
                        case 2:
                            _b.value = _c.sent();
                            error.value.updateAddress = null;
                            return [3 /*break*/, 5];
                        case 3:
                            err_3 = _c.sent();
                            error.value.updateAddress = err_3;
                            Logger.error('useUserBilling/updateAddress', err_3);
                            return [3 /*break*/, 5];
                        case 4:
                            loading.value = false;
                            return [7 /*endfinally*/];
                        case 5: return [2 /*return*/];
                    }
                });
            });
        };
        var load = function () { return __awaiter(void 0, void 0, void 0, function () {
            var _a, err_4;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        Logger.debug('useUserBilling.load');
                        _b.label = 1;
                    case 1:
                        _b.trys.push([1, 3, 4, 5]);
                        loading.value = true;
                        _a = billing;
                        return [4 /*yield*/, _factoryParams.load({
                                billing: readonlyBilling
                            })];
                    case 2:
                        _a.value = _b.sent();
                        error.value.load = null;
                        return [3 /*break*/, 5];
                    case 3:
                        err_4 = _b.sent();
                        error.value.load = err_4;
                        Logger.error('useUserBilling/load', err_4);
                        return [3 /*break*/, 5];
                    case 4:
                        loading.value = false;
                        return [7 /*endfinally*/];
                    case 5: return [2 /*return*/];
                }
            });
        }); };
        var setDefaultAddress = function (_a) {
            var address = _a.address, customQuery = _a.customQuery;
            return __awaiter(void 0, void 0, void 0, function () {
                var _b, err_5;
                return __generator(this, function (_c) {
                    switch (_c.label) {
                        case 0:
                            Logger.debug('useUserBilling.setDefaultAddress');
                            _c.label = 1;
                        case 1:
                            _c.trys.push([1, 3, 4, 5]);
                            loading.value = true;
                            _b = billing;
                            return [4 /*yield*/, _factoryParams.setDefaultAddress({
                                    address: address,
                                    billing: readonlyBilling,
                                    customQuery: customQuery
                                })];
                        case 2:
                            _b.value = _c.sent();
                            error.value.setDefaultAddress = null;
                            return [3 /*break*/, 5];
                        case 3:
                            err_5 = _c.sent();
                            error.value.setDefaultAddress = err_5;
                            Logger.error('useUserBilling/setDefaultAddress', err_5);
                            return [3 /*break*/, 5];
                        case 4:
                            loading.value = false;
                            return [7 /*endfinally*/];
                        case 5: return [2 /*return*/];
                    }
                });
            });
        };
        return {
            api: _factoryParams.api,
            billing: computed(function () { return billing.value; }),
            loading: computed(function () { return loading.value; }),
            error: computed(function () { return error.value; }),
            addAddress: addAddress,
            deleteAddress: deleteAddress,
            updateAddress: updateAddress,
            load: load,
            setDefaultAddress: setDefaultAddress
        };
    };
    return useUserBilling;
};

var useUserFactory = function (factoryParams) {
    return function useUser() {
        var _this = this;
        var errorsFactory = function () { return ({
            updateUser: null,
            register: null,
            login: null,
            logout: null,
            changePassword: null,
            load: null
        }); };
        var user = sharedRef(null, 'useUser-user');
        var loading = sharedRef(false, 'useUser-loading');
        var isAuthenticated = computed(function () { return Boolean(user.value); });
        var error = sharedRef(errorsFactory(), 'useUser-error');
        var _factoryParams = configureFactoryParams(factoryParams, { mainRef: user, alias: 'currentUser', loading: loading, error: error });
        var setUser = function (newUser) {
            user.value = newUser;
            Logger.debug('useUserFactory.setUser', newUser);
        };
        var resetErrorValue = function () {
            error.value = errorsFactory();
        };
        var updateUser = function (_a) {
            var providedUser = _a.user, customQuery = _a.customQuery;
            return __awaiter(_this, void 0, void 0, function () {
                var _b, err_1;
                return __generator(this, function (_c) {
                    switch (_c.label) {
                        case 0:
                            Logger.debug('useUserFactory.updateUser', providedUser);
                            resetErrorValue();
                            _c.label = 1;
                        case 1:
                            _c.trys.push([1, 3, 4, 5]);
                            loading.value = true;
                            _b = user;
                            return [4 /*yield*/, _factoryParams.updateUser({ currentUser: user.value, updatedUserData: providedUser, customQuery: customQuery })];
                        case 2:
                            _b.value = _c.sent();
                            error.value.updateUser = null;
                            return [3 /*break*/, 5];
                        case 3:
                            err_1 = _c.sent();
                            error.value.updateUser = err_1;
                            Logger.error('useUser/updateUser', err_1);
                            return [3 /*break*/, 5];
                        case 4:
                            loading.value = false;
                            return [7 /*endfinally*/];
                        case 5: return [2 /*return*/];
                    }
                });
            });
        };
        var register = function (_a) {
            var providedUser = _a.user, customQuery = _a.customQuery;
            return __awaiter(_this, void 0, void 0, function () {
                var _b, err_2;
                return __generator(this, function (_c) {
                    switch (_c.label) {
                        case 0:
                            Logger.debug('useUserFactory.register', providedUser);
                            resetErrorValue();
                            _c.label = 1;
                        case 1:
                            _c.trys.push([1, 3, 4, 5]);
                            loading.value = true;
                            _b = user;
                            return [4 /*yield*/, _factoryParams.register(__assign(__assign({}, providedUser), { customQuery: customQuery }))];
                        case 2:
                            _b.value = _c.sent();
                            error.value.register = null;
                            return [3 /*break*/, 5];
                        case 3:
                            err_2 = _c.sent();
                            error.value.register = err_2;
                            Logger.error('useUser/register', err_2);
                            return [3 /*break*/, 5];
                        case 4:
                            loading.value = false;
                            return [7 /*endfinally*/];
                        case 5: return [2 /*return*/];
                    }
                });
            });
        };
        var login = function (_a) {
            var providedUser = _a.user, customQuery = _a.customQuery;
            return __awaiter(_this, void 0, void 0, function () {
                var _b, err_3;
                return __generator(this, function (_c) {
                    switch (_c.label) {
                        case 0:
                            Logger.debug('useUserFactory.login', providedUser);
                            resetErrorValue();
                            _c.label = 1;
                        case 1:
                            _c.trys.push([1, 3, 4, 5]);
                            loading.value = true;
                            _b = user;
                            return [4 /*yield*/, _factoryParams.logIn(__assign(__assign({}, providedUser), { customQuery: customQuery }))];
                        case 2:
                            _b.value = _c.sent();
                            error.value.login = null;
                            return [3 /*break*/, 5];
                        case 3:
                            err_3 = _c.sent();
                            error.value.login = err_3;
                            Logger.error('useUser/login', err_3);
                            return [3 /*break*/, 5];
                        case 4:
                            loading.value = false;
                            return [7 /*endfinally*/];
                        case 5: return [2 /*return*/];
                    }
                });
            });
        };
        var logout = function () { return __awaiter(_this, void 0, void 0, function () {
            var err_4;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        Logger.debug('useUserFactory.logout');
                        resetErrorValue();
                        _a.label = 1;
                    case 1:
                        _a.trys.push([1, 3, , 4]);
                        return [4 /*yield*/, _factoryParams.logOut({ currentUser: user.value })];
                    case 2:
                        _a.sent();
                        error.value.logout = null;
                        user.value = null;
                        return [3 /*break*/, 4];
                    case 3:
                        err_4 = _a.sent();
                        error.value.logout = err_4;
                        Logger.error('useUser/logout', err_4);
                        return [3 /*break*/, 4];
                    case 4: return [2 /*return*/];
                }
            });
        }); };
        var changePassword = function (params) { return __awaiter(_this, void 0, void 0, function () {
            var _a, err_5;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        Logger.debug('useUserFactory.changePassword', { currentPassword: mask(params.current), newPassword: mask(params.new) });
                        resetErrorValue();
                        _b.label = 1;
                    case 1:
                        _b.trys.push([1, 3, 4, 5]);
                        loading.value = true;
                        _a = user;
                        return [4 /*yield*/, _factoryParams.changePassword({
                                currentUser: user.value,
                                currentPassword: params.current,
                                newPassword: params.new,
                                customQuery: params.customQuery
                            })];
                    case 2:
                        _a.value = _b.sent();
                        error.value.changePassword = null;
                        return [3 /*break*/, 5];
                    case 3:
                        err_5 = _b.sent();
                        error.value.changePassword = err_5;
                        Logger.error('useUser/changePassword', err_5);
                        return [3 /*break*/, 5];
                    case 4:
                        loading.value = false;
                        return [7 /*endfinally*/];
                    case 5: return [2 /*return*/];
                }
            });
        }); };
        var load = function (_a) {
            var _b = _a === void 0 ? { customQuery: undefined } : _a, customQuery = _b.customQuery;
            return __awaiter(_this, void 0, void 0, function () {
                var _c, err_6;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0:
                            Logger.debug('useUserFactory.load');
                            resetErrorValue();
                            _d.label = 1;
                        case 1:
                            _d.trys.push([1, 3, 4, 5]);
                            loading.value = true;
                            _c = user;
                            return [4 /*yield*/, _factoryParams.load({ customQuery: customQuery })];
                        case 2:
                            _c.value = _d.sent();
                            error.value.load = null;
                            return [3 /*break*/, 5];
                        case 3:
                            err_6 = _d.sent();
                            error.value.load = err_6;
                            Logger.error('useUser/load', err_6);
                            return [3 /*break*/, 5];
                        case 4:
                            loading.value = false;
                            return [7 /*endfinally*/];
                        case 5: return [2 /*return*/];
                    }
                });
            });
        };
        return {
            api: _factoryParams.api,
            setUser: setUser,
            user: computed(function () { return user.value; }),
            updateUser: updateUser,
            register: register,
            login: login,
            logout: logout,
            isAuthenticated: isAuthenticated,
            changePassword: changePassword,
            load: load,
            loading: computed(function () { return loading.value; }),
            error: computed(function () { return error.value; })
        };
    };
};

function useUserOrderFactory(factoryParams) {
    return function useUserOrder() {
        var _this = this;
        var orders = sharedRef({
            results: [],
            total: 0
        }, 'useUserOrder-orders');
        var loading = sharedRef(false, 'useUserOrder-loading');
        var error = sharedRef({}, 'useUserOrder-error');
        var _factoryParams = configureFactoryParams(factoryParams, { mainRef: orders, alias: 'currentOrders', loading: loading, error: error });
        var search = function (searchParams) { return __awaiter(_this, void 0, void 0, function () {
            var _a, err_1;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        Logger.debug('useUserOrder.search', searchParams);
                        _b.label = 1;
                    case 1:
                        _b.trys.push([1, 3, 4, 5]);
                        loading.value = true;
                        _a = orders;
                        return [4 /*yield*/, _factoryParams.searchOrders(searchParams)];
                    case 2:
                        _a.value = _b.sent();
                        error.value.search = null;
                        return [3 /*break*/, 5];
                    case 3:
                        err_1 = _b.sent();
                        error.value.search = err_1;
                        Logger.error('useUserOrder/search', err_1);
                        return [3 /*break*/, 5];
                    case 4:
                        loading.value = false;
                        return [7 /*endfinally*/];
                    case 5: return [2 /*return*/];
                }
            });
        }); };
        return {
            api: _factoryParams.api,
            orders: computed(function () { return orders.value; }),
            search: search,
            loading: computed(function () { return loading.value; }),
            error: computed(function () { return error.value; })
        };
    };
}

var useUserShippingFactory = function (factoryParams) {
    var useUserShipping = function () {
        var loading = sharedRef(false, 'useUserShipping-loading');
        var shipping = sharedRef({}, 'useUserShipping-shipping');
        var readonlyShipping = unref(shipping);
        var error = sharedRef({
            addAddress: null,
            deleteAddress: null,
            updateAddress: null,
            load: null,
            setDefaultAddress: null
        }, 'useUserShipping-error');
        var _factoryParams = configureFactoryParams(factoryParams, { mainRef: shipping, alias: 'currentShipping', loading: loading, error: error });
        var addAddress = function (_a) {
            var address = _a.address, customQuery = _a.customQuery;
            return __awaiter(void 0, void 0, void 0, function () {
                var _b, err_1;
                return __generator(this, function (_c) {
                    switch (_c.label) {
                        case 0:
                            Logger.debug('useUserShipping.addAddress', mask(address));
                            _c.label = 1;
                        case 1:
                            _c.trys.push([1, 3, 4, 5]);
                            loading.value = true;
                            _b = shipping;
                            return [4 /*yield*/, _factoryParams.addAddress({
                                    address: address,
                                    shipping: readonlyShipping,
                                    customQuery: customQuery
                                })];
                        case 2:
                            _b.value = _c.sent();
                            error.value.addAddress = null;
                            return [3 /*break*/, 5];
                        case 3:
                            err_1 = _c.sent();
                            error.value.addAddress = err_1;
                            Logger.error('useUserShipping/addAddress', err_1);
                            return [3 /*break*/, 5];
                        case 4:
                            loading.value = false;
                            return [7 /*endfinally*/];
                        case 5: return [2 /*return*/];
                    }
                });
            });
        };
        var deleteAddress = function (_a) {
            var address = _a.address, customQuery = _a.customQuery;
            return __awaiter(void 0, void 0, void 0, function () {
                var _b, err_2;
                return __generator(this, function (_c) {
                    switch (_c.label) {
                        case 0:
                            Logger.debug('useUserShipping.deleteAddress', address);
                            _c.label = 1;
                        case 1:
                            _c.trys.push([1, 3, 4, 5]);
                            loading.value = true;
                            _b = shipping;
                            return [4 /*yield*/, _factoryParams.deleteAddress({
                                    address: address,
                                    shipping: readonlyShipping,
                                    customQuery: customQuery
                                })];
                        case 2:
                            _b.value = _c.sent();
                            error.value.deleteAddress = null;
                            return [3 /*break*/, 5];
                        case 3:
                            err_2 = _c.sent();
                            error.value.deleteAddress = err_2;
                            Logger.error('useUserShipping/deleteAddress', err_2);
                            return [3 /*break*/, 5];
                        case 4:
                            loading.value = false;
                            return [7 /*endfinally*/];
                        case 5: return [2 /*return*/];
                    }
                });
            });
        };
        var updateAddress = function (_a) {
            var address = _a.address, customQuery = _a.customQuery;
            return __awaiter(void 0, void 0, void 0, function () {
                var _b, err_3;
                return __generator(this, function (_c) {
                    switch (_c.label) {
                        case 0:
                            Logger.debug('useUserShipping.updateAddress', address);
                            _c.label = 1;
                        case 1:
                            _c.trys.push([1, 3, 4, 5]);
                            loading.value = true;
                            _b = shipping;
                            return [4 /*yield*/, _factoryParams.updateAddress({
                                    address: address,
                                    shipping: readonlyShipping,
                                    customQuery: customQuery
                                })];
                        case 2:
                            _b.value = _c.sent();
                            error.value.updateAddress = null;
                            return [3 /*break*/, 5];
                        case 3:
                            err_3 = _c.sent();
                            error.value.updateAddress = err_3;
                            Logger.error('useUserShipping/updateAddress', err_3);
                            return [3 /*break*/, 5];
                        case 4:
                            loading.value = false;
                            return [7 /*endfinally*/];
                        case 5: return [2 /*return*/];
                    }
                });
            });
        };
        var load = function () { return __awaiter(void 0, void 0, void 0, function () {
            var _a, err_4;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        Logger.debug('useUserShipping.load');
                        _b.label = 1;
                    case 1:
                        _b.trys.push([1, 3, 4, 5]);
                        loading.value = true;
                        _a = shipping;
                        return [4 /*yield*/, _factoryParams.load({
                                shipping: readonlyShipping
                            })];
                    case 2:
                        _a.value = _b.sent();
                        error.value.load = null;
                        return [3 /*break*/, 5];
                    case 3:
                        err_4 = _b.sent();
                        error.value.load = err_4;
                        Logger.error('useUserShipping/load', err_4);
                        return [3 /*break*/, 5];
                    case 4:
                        loading.value = false;
                        return [7 /*endfinally*/];
                    case 5: return [2 /*return*/];
                }
            });
        }); };
        var setDefaultAddress = function (_a) {
            var address = _a.address, customQuery = _a.customQuery;
            return __awaiter(void 0, void 0, void 0, function () {
                var _b, err_5;
                return __generator(this, function (_c) {
                    switch (_c.label) {
                        case 0:
                            Logger.debug('useUserShipping.setDefaultAddress', address);
                            _c.label = 1;
                        case 1:
                            _c.trys.push([1, 3, 4, 5]);
                            loading.value = true;
                            _b = shipping;
                            return [4 /*yield*/, _factoryParams.setDefaultAddress({
                                    address: address,
                                    shipping: readonlyShipping,
                                    customQuery: customQuery
                                })];
                        case 2:
                            _b.value = _c.sent();
                            error.value.setDefaultAddress = null;
                            return [3 /*break*/, 5];
                        case 3:
                            err_5 = _c.sent();
                            error.value.setDefaultAddress = err_5;
                            Logger.error('useUserShipping/setDefaultAddress', err_5);
                            return [3 /*break*/, 5];
                        case 4:
                            loading.value = false;
                            return [7 /*endfinally*/];
                        case 5: return [2 /*return*/];
                    }
                });
            });
        };
        return {
            api: _factoryParams.api,
            shipping: computed(function () { return shipping.value; }),
            loading: computed(function () { return loading.value; }),
            error: computed(function () { return error.value; }),
            addAddress: addAddress,
            deleteAddress: deleteAddress,
            updateAddress: updateAddress,
            load: load,
            setDefaultAddress: setDefaultAddress
        };
    };
    return useUserShipping;
};

var useWishlistFactory = function (factoryParams) {
    var useWishlist = function () {
        var loading = sharedRef(false, 'useWishlist-loading');
        var wishlist = sharedRef(null, 'useWishlist-wishlist');
        var error = sharedRef({
            addItem: null,
            removeItem: null,
            load: null,
            clear: null
        }, 'useWishlist-error');
        var _factoryParams = configureFactoryParams(factoryParams, { mainRef: wishlist, alias: 'currentWishlist', loading: loading, error: error });
        var setWishlist = function (newWishlist) {
            wishlist.value = newWishlist;
            Logger.debug('useWishlistFactory.setWishlist', newWishlist);
        };
        var addItem = function (_a) {
            var product = _a.product, customQuery = _a.customQuery;
            return __awaiter(void 0, void 0, void 0, function () {
                var updatedWishlist, err_1;
                return __generator(this, function (_b) {
                    switch (_b.label) {
                        case 0:
                            Logger.debug('useWishlist.addItem', product);
                            _b.label = 1;
                        case 1:
                            _b.trys.push([1, 3, 4, 5]);
                            loading.value = true;
                            return [4 /*yield*/, _factoryParams.addItem({
                                    currentWishlist: wishlist.value,
                                    product: product,
                                    customQuery: customQuery
                                })];
                        case 2:
                            updatedWishlist = _b.sent();
                            error.value.addItem = null;
                            wishlist.value = updatedWishlist;
                            return [3 /*break*/, 5];
                        case 3:
                            err_1 = _b.sent();
                            error.value.addItem = err_1;
                            Logger.error('useWishlist/addItem', err_1);
                            return [3 /*break*/, 5];
                        case 4:
                            loading.value = false;
                            return [7 /*endfinally*/];
                        case 5: return [2 /*return*/];
                    }
                });
            });
        };
        var removeItem = function (_a) {
            var product = _a.product, customQuery = _a.customQuery;
            return __awaiter(void 0, void 0, void 0, function () {
                var updatedWishlist, err_2;
                return __generator(this, function (_b) {
                    switch (_b.label) {
                        case 0:
                            Logger.debug('useWishlist.removeItem', product);
                            _b.label = 1;
                        case 1:
                            _b.trys.push([1, 3, 4, 5]);
                            loading.value = true;
                            return [4 /*yield*/, _factoryParams.removeItem({
                                    currentWishlist: wishlist.value,
                                    product: product,
                                    customQuery: customQuery
                                })];
                        case 2:
                            updatedWishlist = _b.sent();
                            error.value.removeItem = null;
                            wishlist.value = updatedWishlist;
                            return [3 /*break*/, 5];
                        case 3:
                            err_2 = _b.sent();
                            error.value.removeItem = err_2;
                            Logger.error('useWishlist/removeItem', err_2);
                            return [3 /*break*/, 5];
                        case 4:
                            loading.value = false;
                            return [7 /*endfinally*/];
                        case 5: return [2 /*return*/];
                    }
                });
            });
        };
        var load = function (_a) {
            var _b = _a === void 0 ? { customQuery: undefined } : _a, customQuery = _b.customQuery;
            return __awaiter(void 0, void 0, void 0, function () {
                var _c, err_3;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0:
                            Logger.debug('useWishlist.load');
                            if (wishlist.value)
                                return [2 /*return*/];
                            _d.label = 1;
                        case 1:
                            _d.trys.push([1, 3, 4, 5]);
                            loading.value = true;
                            _c = wishlist;
                            return [4 /*yield*/, _factoryParams.load({ customQuery: customQuery })];
                        case 2:
                            _c.value = _d.sent();
                            error.value.load = null;
                            return [3 /*break*/, 5];
                        case 3:
                            err_3 = _d.sent();
                            error.value.load = err_3;
                            Logger.error('useWishlist/load', err_3);
                            return [3 /*break*/, 5];
                        case 4:
                            loading.value = false;
                            return [7 /*endfinally*/];
                        case 5: return [2 /*return*/];
                    }
                });
            });
        };
        var clear = function () { return __awaiter(void 0, void 0, void 0, function () {
            var updatedWishlist, err_4;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        Logger.debug('useWishlist.clear');
                        _a.label = 1;
                    case 1:
                        _a.trys.push([1, 3, 4, 5]);
                        loading.value = true;
                        return [4 /*yield*/, _factoryParams.clear({
                                currentWishlist: wishlist.value
                            })];
                    case 2:
                        updatedWishlist = _a.sent();
                        error.value.clear = null;
                        wishlist.value = updatedWishlist;
                        return [3 /*break*/, 5];
                    case 3:
                        err_4 = _a.sent();
                        error.value.clear = err_4;
                        Logger.error('useWishlist/clear', err_4);
                        return [3 /*break*/, 5];
                    case 4:
                        loading.value = false;
                        return [7 /*endfinally*/];
                    case 5: return [2 /*return*/];
                }
            });
        }); };
        var isInWishlist = function (_a) {
            var product = _a.product;
            Logger.debug('useWishlist.isInWishlist', product);
            return _factoryParams.isInWishlist({
                currentWishlist: wishlist.value,
                product: product
            });
        };
        return {
            api: _factoryParams.api,
            wishlist: computed(function () { return wishlist.value; }),
            isInWishlist: isInWishlist,
            addItem: addItem,
            load: load,
            removeItem: removeItem,
            clear: clear,
            setWishlist: setWishlist,
            loading: computed(function () { return loading.value; }),
            error: computed(function () { return error.value; })
        };
    };
    return useWishlist;
};

var useShippingProviderFactory = function (factoryParams) {
    return function useShippingProvider() {
        var _this = this;
        var loading = sharedRef(false, 'useShippingProvider-loading');
        var state = sharedRef(null, 'useShippingProvider-response');
        var error = sharedRef({
            load: null,
            save: null
        }, 'useShippingProvider-error');
        var _factoryParams = configureFactoryParams(factoryParams, { mainRef: state, alias: 'currentState', loading: loading, error: error });
        var setState = function (newState) {
            state.value = newState;
            Logger.debug('useShippingProvider.setState', newState);
        };
        var save = function (_a) {
            var shippingMethod = _a.shippingMethod, _b = _a.customQuery, customQuery = _b === void 0 ? null : _b;
            return __awaiter(_this, void 0, void 0, function () {
                var _c, err_1;
                return __generator(this, function (_d) {
                    switch (_d.label) {
                        case 0:
                            Logger.debug('useShippingProvider.save');
                            _d.label = 1;
                        case 1:
                            _d.trys.push([1, 3, 4, 5]);
                            loading.value = true;
                            _c = state;
                            return [4 /*yield*/, _factoryParams.save({ shippingMethod: shippingMethod, customQuery: customQuery, state: state })];
                        case 2:
                            _c.value = _d.sent();
                            error.value.save = null;
                            return [3 /*break*/, 5];
                        case 3:
                            err_1 = _d.sent();
                            error.value.save = err_1;
                            Logger.error('useShippingProvider/save', err_1);
                            return [3 /*break*/, 5];
                        case 4:
                            loading.value = false;
                            return [7 /*endfinally*/];
                        case 5: return [2 /*return*/];
                    }
                });
            });
        };
        var load = function (_a) {
            var _b = _a === void 0 ? {} : _a, _c = _b.customQuery, customQuery = _c === void 0 ? null : _c;
            return __awaiter(_this, void 0, void 0, function () {
                var _d, err_2;
                return __generator(this, function (_e) {
                    switch (_e.label) {
                        case 0:
                            Logger.debug('useShippingProvider.load');
                            _e.label = 1;
                        case 1:
                            _e.trys.push([1, 3, 4, 5]);
                            loading.value = true;
                            _d = state;
                            return [4 /*yield*/, _factoryParams.load({ customQuery: customQuery, state: state })];
                        case 2:
                            _d.value = _e.sent();
                            error.value.load = null;
                            return [3 /*break*/, 5];
                        case 3:
                            err_2 = _e.sent();
                            error.value.load = err_2;
                            Logger.error('useShippingProvider/load', err_2);
                            return [3 /*break*/, 5];
                        case 4:
                            loading.value = false;
                            return [7 /*endfinally*/];
                        case 5: return [2 /*return*/];
                    }
                });
            });
        };
        return {
            api: _factoryParams.api,
            state: state,
            loading: computed(function () { return loading.value; }),
            error: computed(function () { return error.value; }),
            load: load,
            save: save,
            setState: setState
        };
    };
};

function useForgotPasswordFactory(factoryParams) {
    return function useForgotPassword() {
        var _this = this;
        var result = sharedRef({
            resetPasswordResult: null,
            setNewPasswordResult: null
        }, 'useForgotPassword-result');
        var loading = sharedRef(false, 'useProduct-loading');
        var _factoryParams = configureFactoryParams(factoryParams);
        var error = sharedRef({
            request: null,
            setNew: null
        }, 'useForgotPassword-error');
        var request = function (resetPasswordParams) { return __awaiter(_this, void 0, void 0, function () {
            var _a, err_1;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        Logger.debug('useForgotPassword/request', resetPasswordParams.email);
                        _b.label = 1;
                    case 1:
                        _b.trys.push([1, 3, 4, 5]);
                        loading.value = true;
                        _a = result;
                        return [4 /*yield*/, _factoryParams.resetPassword(__assign({ currentResult: result.value }, resetPasswordParams))];
                    case 2:
                        _a.value = _b.sent();
                        error.value.request = null;
                        return [3 /*break*/, 5];
                    case 3:
                        err_1 = _b.sent();
                        error.value.request = err_1;
                        Logger.error('useForgotPassword/request', err_1);
                        return [3 /*break*/, 5];
                    case 4:
                        loading.value = false;
                        return [7 /*endfinally*/];
                    case 5: return [2 /*return*/];
                }
            });
        }); };
        var setNew = function (setNewPasswordParams) { return __awaiter(_this, void 0, void 0, function () {
            var _a, err_2;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        Logger.debug('useForgotPassword/setNew', setNewPasswordParams);
                        _b.label = 1;
                    case 1:
                        _b.trys.push([1, 3, 4, 5]);
                        loading.value = true;
                        _a = result;
                        return [4 /*yield*/, _factoryParams.setNewPassword(__assign({ currentResult: result.value }, setNewPasswordParams))];
                    case 2:
                        _a.value = _b.sent();
                        error.value.setNew = null;
                        return [3 /*break*/, 5];
                    case 3:
                        err_2 = _b.sent();
                        error.value.setNew = err_2;
                        Logger.error('useForgotPassword/setNew', err_2);
                        return [3 /*break*/, 5];
                    case 4:
                        loading.value = false;
                        return [7 /*endfinally*/];
                    case 5: return [2 /*return*/];
                }
            });
        }); };
        return {
            request: request,
            setNew: setNew,
            result: computed(function () { return result.value; }),
            loading: computed(function () { return loading.value; }),
            error: computed(function () { return error.value; })
        };
    };
}

function useStoreFactory(factoryParams) {
    return function useStore() {
        /* @private */
        var _factoryParams = configureFactoryParams(factoryParams);
        /* @readonly */
        var response = sharedRef(null, 'useStore-response');
        var loading = sharedRef(false, 'useStore-loading');
        var error = sharedRef({ load: null, change: null }, 'useStore-error');
        /* @public */
        function load(params) {
            return __awaiter(this, void 0, void 0, function () {
                var customQuery, _a, err_1;
                return __generator(this, function (_b) {
                    switch (_b.label) {
                        case 0:
                            Logger.debug('useStoreFactory.load', params);
                            error.value.load = null;
                            _b.label = 1;
                        case 1:
                            _b.trys.push([1, 3, 4, 5]);
                            loading.value = true;
                            customQuery = Object(params).customQuery;
                            _a = response;
                            return [4 /*yield*/, _factoryParams.load({
                                    customQuery: customQuery
                                })];
                        case 2:
                            _a.value = _b.sent();
                            return [3 /*break*/, 5];
                        case 3:
                            err_1 = _b.sent();
                            error.value.load = err_1;
                            return [3 /*break*/, 5];
                        case 4:
                            loading.value = false;
                            return [7 /*endfinally*/];
                        case 5: return [2 /*return*/];
                    }
                });
            });
        }
        function change(params) {
            return __awaiter(this, void 0, void 0, function () {
                var _a, customQuery, currentStore, store, _b, err_2;
                return __generator(this, function (_c) {
                    switch (_c.label) {
                        case 0:
                            Logger.debug('useStoreFactory.change', params);
                            error.value.change = null;
                            _c.label = 1;
                        case 1:
                            _c.trys.push([1, 3, 4, 5]);
                            loading.value = true;
                            _a = Object(params), customQuery = _a.customQuery, currentStore = _a.currentStore, store = _a.store;
                            _b = response;
                            return [4 /*yield*/, _factoryParams.change({
                                    currentStore: currentStore,
                                    store: store,
                                    customQuery: customQuery
                                })];
                        case 2:
                            _b.value = _c.sent();
                            return [3 /*break*/, 5];
                        case 3:
                            err_2 = _c.sent();
                            error.value.change = err_2;
                            return [3 /*break*/, 5];
                        case 4:
                            loading.value = false;
                            return [7 /*endfinally*/];
                        case 5: return [2 /*return*/];
                    }
                });
            });
        }
        /* @interface */
        return {
            load: load,
            change: change,
            response: computed(function () { return response.value; }),
            loading: computed(function () { return loading.value; }),
            error: computed(function () { return error.value; })
        };
    };
}

function useSearchFactory(factoryParams) {
    return function useSearch(id) {
        var _this = this;
        var result = sharedRef([], "useSearch-products-".concat(id));
        var loading = sharedRef(false, "useSearch-loading-".concat(id));
        var _factoryParams = configureFactoryParams(factoryParams);
        var error = sharedRef({
            search: null
        }, "useSearch-error-".concat(id));
        var search = function (searchParams) { return __awaiter(_this, void 0, void 0, function () {
            var _a, err_1;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        Logger.debug("useSearch/".concat(id, "/search"), searchParams);
                        _b.label = 1;
                    case 1:
                        _b.trys.push([1, 3, 4, 5]);
                        loading.value = true;
                        _a = result;
                        return [4 /*yield*/, _factoryParams.search(searchParams)];
                    case 2:
                        _a.value = _b.sent();
                        error.value.search = null;
                        return [3 /*break*/, 5];
                    case 3:
                        err_1 = _b.sent();
                        error.value.search = err_1;
                        Logger.error("useSearch/".concat(id, "/search"), err_1);
                        return [3 /*break*/, 5];
                    case 4:
                        loading.value = false;
                        return [7 /*endfinally*/];
                    case 5: return [2 /*return*/];
                }
            });
        }); };
        return {
            search: search,
            result: computed(function () { return result.value; }),
            loading: computed(function () { return loading.value; }),
            error: computed(function () { return error.value; })
        };
    };
}

/* istanbul ignore file */
/**
 * Default name of the cookie storing active localization code
 */
var VSF_LOCALE_COOKIE = 'vsf-locale';
/**
 * Default name of the cookie storing active currency code
 */
var VSF_CURRENCY_COOKIE = 'vsf-currency';
/**
 * Default name of the cookie storing active country code
 */
var VSF_COUNTRY_COOKIE = 'vsf-country';
/**
 * Default name of the cookie storing active store code
 */
var VSF_STORE_COOKIE = 'vsf-store';
/**
 * Default name of the cookie storing active channel code
 */
var VSF_CHANNEL_COOKIE = 'vsf-channel';
// TODO - remove this interface
var AgnosticOrderStatus;
(function (AgnosticOrderStatus) {
    AgnosticOrderStatus["Open"] = "Open";
    AgnosticOrderStatus["Pending"] = "Pending";
    AgnosticOrderStatus["Confirmed"] = "Confirmed";
    AgnosticOrderStatus["Shipped"] = "Shipped";
    AgnosticOrderStatus["Complete"] = "Complete";
    AgnosticOrderStatus["Cancelled"] = "Cancelled";
    AgnosticOrderStatus["Refunded"] = "Refunded";
})(AgnosticOrderStatus || (AgnosticOrderStatus = {}));

/**
 * Core Vue Storefront 2 library.
 *
 * @remarks
 * The `@vue-storefront/core` library is a core of the whole Vue Storefront 2 application.
 * It defines common interfaces for all eCommerce integrations, factories for creating
 * composables, logger, SSR helpers and more.
 *
 * @packageDocumentation
 */
if (typeof window !== 'undefined') {
    window.$vuestorefront = window.$vuestorefront || { integrations: [] };
}
function track(id) {
    if (typeof window !== 'undefined') {
        if (window.$vuestorefront) {
            window.$vuestorefront.integrations.push(id);
        }
    }
}

export { AgnosticOrderStatus, Logger, VSF_CHANNEL_COOKIE, VSF_COUNTRY_COOKIE, VSF_CURRENCY_COOKIE, VSF_LOCALE_COOKIE, VSF_STORE_COOKIE, addBasePath, apiClientFactory, configureContext, configureFactoryParams, configureSSR, generateContext, i18nRedirectsUtil, integrationPlugin, mask, onSSR, registerLogger, renderContentFactory, sharedRef, track, useBillingFactory, useCartFactory, useCategoryFactory, useContentFactory, useFacetFactory, useForgotPasswordFactory, useMakeOrderFactory, useProductFactory, useReviewFactory, useSearchFactory, useShippingFactory, useShippingProviderFactory, useStoreFactory, useUserBillingFactory, useUserFactory, useUserOrderFactory, useUserShippingFactory, useVSFContext, useWishlistFactory, vsfRef, wrap };
//# sourceMappingURL=index.es.js.map
