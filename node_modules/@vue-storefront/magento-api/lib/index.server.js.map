{
  "version": 3,
  "sources": ["../src/index.server.ts", "../src/api/index.ts", "../src/api/addBundleProductsToCart/addBundleProductsToCart.ts", "../src/api/getHeaders.ts", "../src/api/addBundleProductsToCart/index.ts", "../src/api/addConfigurableProductsToCart/addConfigurableProductsToCart.ts", "../src/api/addConfigurableProductsToCart/index.ts", "../src/api/addProductsToCart/addProductsToCart.ts", "../src/api/addProductsToCart/index.ts", "../src/api/addProductToWishList/addProductsToWishlist.ts", "../src/api/addProductToWishList/index.ts", "../src/api/addSimpleProductsToCart/addSimpleProductsToCart.ts", "../src/api/addSimpleProductsToCart/index.ts", "../src/api/addDownloadableProductsToCart/addDownloadableProductsToCart.ts", "../src/api/addDownloadableProductsToCart/index.ts", "../src/api/addVirtualProductsToCart/addVirtualProductsToCart.ts", "../src/api/addVirtualProductsToCart/index.ts", "../src/api/applyCouponToCart/applyCouponToCart.ts", "../src/api/applyCouponToCart/index.ts", "../src/api/availableStores/availableStores.ts", "../src/api/availableStores/index.ts", "../src/api/cart/cart.ts", "../src/api/cart/index.ts", "../src/api/cartTotalQty/cartTotalQty.ts", "../src/api/cartTotalQty/index.ts", "../src/api/categoryList/categoryList.ts", "../src/api/categoryList/index.ts", "../src/api/categorySearch/categorySearch.ts", "../src/api/categorySearch/index.ts", "../src/api/changeCustomerPassword/changeCustomerPassword.ts", "../src/api/changeCustomerPassword/index.ts", "../src/api/cmsBlocks/cmsBlocks.ts", "../src/api/cmsBlocks/index.ts", "../src/api/cmsPage/index.ts", "../src/api/cmsPage/cmsPage.ts", "../src/api/countries/countriesList.ts", "../src/api/countries/index.ts", "../src/api/country/countryInformation.ts", "../src/api/country/index.ts", "../src/api/createCustomer/index.ts", "../src/helpers/recaptcha/recaptchaValidator.ts", "../src/api/createCustomer/createCustomer.ts", "../src/api/createCustomerAddress/createCustomerAddress.ts", "../src/api/createCustomerAddress/index.ts", "../src/api/createEmptyCart/createEmptyCart.ts", "../src/api/createEmptyCart/index.ts", "../src/api/createProductReview/index.ts", "../src/api/createProductReview/createProductReview.ts", "../src/api/currency/currency.ts", "../src/api/currency/index.ts", "../src/api/customer/customer.ts", "../src/api/customer/index.ts", "../src/api/customerCart/customerCart.ts", "../src/api/customerCart/index.ts", "../src/api/customerOrders/customerOrders.ts", "../src/api/customerOrders/index.ts", "../src/api/customerProductReview/customerProductReview.ts", "../src/api/customerProductReview/index.ts", "../src/api/customMutation/index.ts", "../src/api/customQuery/index.ts", "../src/api/deleteCustomerAddress/deleteCustomerAddress.ts", "../src/api/deleteCustomerAddress/index.ts", "../src/api/generateCustomerToken/index.ts", "../src/api/generateCustomerToken/generateCustomerToken.ts", "../src/api/getAvailableCustomerPaymentMethods/CustomerPaymentMethods.ts", "../src/api/getAvailableCustomerPaymentMethods/index.ts", "../src/api/getAvailableCustomerShippingMethods/CustomerShippingMethods.ts", "../src/api/getAvailableCustomerShippingMethods/index.ts", "../src/api/getAvailablePaymentMethods/GuestAvailablePaymentMethods.ts", "../src/api/getAvailablePaymentMethods/index.ts", "../src/api/getAvailableShippingMethods/GuestAvailableShippingMethods.ts", "../src/api/getAvailableShippingMethods/index.ts", "../src/api/getCustomerAddresses/getCustomerAddresses.ts", "../src/api/getCustomerAddresses/index.ts", "../src/api/mergeCarts/mergeCarts.ts", "../src/api/mergeCarts/index.ts", "../src/api/placeOrder/placeOrder.ts", "../src/api/placeOrder/index.ts", "../src/api/productDetail/index.ts", "../src/api/productDetail/productDetailsQuery.ts", "../src/api/productReview/productReview.ts", "../src/api/productReview/index.ts", "../src/api/productReviewRatingsMetadata/productReviewRatingsMetadata.ts", "../src/api/productReviewRatingsMetadata/index.ts", "../src/api/products/productsList.ts", "../src/api/products/index.ts", "../src/api/relatedProduct/relatedProduct.ts", "../src/api/relatedProduct/index.ts", "../src/api/removeCouponFromCart/removeCouponFromCart.ts", "../src/api/removeCouponFromCart/index.ts", "../src/api/removeItemFromCart/removeItemFromCart.ts", "../src/api/removeItemFromCart/index.ts", "../src/api/removeProductsFromWishlist/removeProductsFromWishlist.ts", "../src/api/removeProductsFromWishlist/index.ts", "../src/api/requestPasswordResetEmail/index.ts", "../src/api/requestPasswordResetEmail/requestPasswordResetEmail.ts", "../src/api/resetPassword/index.ts", "../src/api/resetPassword/resetPassword.ts", "../src/api/revokeCustomerToken/revokeCustomerToken.ts", "../src/api/revokeCustomerToken/index.ts", "../src/api/setBillingAddressOnCart/setBillingAddressOnCart.ts", "../src/api/setBillingAddressOnCart/index.ts", "../src/api/setGuestEmailOnCart/setGuestEmailOnCart.ts", "../src/api/setGuestEmailOnCart/index.ts", "../src/api/setPaymentMethodOnCart/setPaymentMethodOnCart.ts", "../src/api/setPaymentMethodOnCart/index.ts", "../src/api/setShippingAddressesOnCart/setShippingAddressesOnCart.ts", "../src/api/setShippingAddressesOnCart/index.ts", "../src/api/setShippingMethodsOnCart/setShippingMethodsOnCart.ts", "../src/api/setShippingMethodsOnCart/index.ts", "../src/api/storeConfig/storeConfig.ts", "../src/api/storeConfig/index.ts", "../src/api/subscribeEmailToNewsletter/subscribeEmailToNewsletter.ts", "../src/api/subscribeEmailToNewsletter/index.ts", "../src/api/updateCartItems/updateCartItems.ts", "../src/api/updateCartItems/index.ts", "../src/api/updateCustomer/updateCustomer.ts", "../src/api/updateCustomer/index.ts", "../src/api/updateCustomerAddress/updateCustomerAddress.ts", "../src/api/updateCustomerAddress/index.ts", "../src/api/updateCustomerEmail/updateCustomerEmail.ts", "../src/api/updateCustomerEmail/index.ts", "../src/api/upsellProduct/upsellProducts.ts", "../src/api/upsellProduct/index.ts", "../src/api/urlResolver/urlResolver.ts", "../src/api/urlResolver/index.ts", "../src/api/route/route.ts", "../src/api/route/index.ts", "../src/api/wishlist/wishlist.ts", "../src/api/wishlist/index.ts", "../src/api/wishlistItemsCount/wishlistItemsCount.ts", "../src/api/wishlistItemsCount/index.ts", "../src/helpers/magentoLink/index.ts", "../src/helpers/magentoLink/graphQl.ts", "../src/helpers/magentoLink/linkHandlers.ts", "../src/helpers/url/standardURL.ts", "../src/helpers/apiClient/defaultSettings.ts"],
  "sourcesContent": ["/* istanbul ignore file */\nimport { ApiClientExtension, apiClientFactory } from '@vue-storefront/core';\nimport * as api from './api';\nimport { ClientInstance, Config } from './types/setup';\nimport { createMagentoConnection } from './helpers/magentoLink';\nimport { defaultSettings } from './helpers/apiClient/defaultSettings';\nimport { apolloClientFactory } from './helpers/magentoLink/graphQl';\n\nconst buildConfig = (settings: Config) => ({\n  ...defaultSettings,\n  ...settings,\n  state: settings.state || defaultSettings.state,\n} as unknown as Config);\n\nconst init = (settings: Config) => {\n  const config = buildConfig(settings);\n\n  if (settings.client) {\n    return {\n      client: settings.client,\n      config,\n    };\n  }\n\n  if (settings.customOptions && settings.customOptions.link) {\n    return {\n      client: apolloClientFactory(settings.customOptions),\n      config,\n    };\n  }\n\n  const { apolloLink } = createMagentoConnection(config);\n\n  const client = apolloClientFactory({\n    link: apolloLink,\n    ...settings.customOptions,\n    defaultOptions: {\n      query: {\n        errorPolicy: 'all',\n        fetchPolicy: 'no-cache',\n      },\n      mutate: {\n        errorPolicy: 'all',\n      },\n    },\n  });\n\n  return {\n    config,\n    client,\n  };\n};\n\nconst onCreate = (settings: Config): { config: Config; client: ClientInstance } => {\n  if (!settings?.client) {\n    return init(settings);\n  }\n\n  const config = buildConfig(settings);\n\n  return { config, client: settings.client };\n};\n\nconst tokenExtension: ApiClientExtension = {\n  name: 'tokenExtension',\n  hooks: (req, res) => ({\n    beforeCreate: ({ configuration }) => {\n      const cartCookieName: string = configuration.cookies?.cartCookieName || defaultSettings.cookies.cartCookieName;\n      const customerCookieName: string = configuration.cookies?.customerCookieName || defaultSettings.cookies.customerCookieName;\n      const storeCookieName: string = configuration.cookies?.storeCookieName || defaultSettings.cookies.storeCookieName;\n      const currencyCookieName: string = configuration.cookies?.currencyCookieName || defaultSettings.cookies.currencyCookieName;\n\n      return {\n        ...configuration,\n        state: {\n          getCartId: () => req.cookies[cartCookieName],\n          setCartId: (id) => {\n            if (!id) {\n              // eslint-disable-next-line no-param-reassign\n              delete req.cookies[cartCookieName];\n              return;\n            }\n            res.cookie(cartCookieName, JSON.stringify(id));\n          },\n          getCustomerToken: () => req.cookies[customerCookieName],\n          setCustomerToken: (token) => {\n            if (!token) {\n              // eslint-disable-next-line no-param-reassign\n              delete req.cookies[customerCookieName];\n              return;\n            }\n            res.cookie(customerCookieName, JSON.stringify(token));\n          },\n          getStore: () => req.cookies[storeCookieName],\n          setStore: (id) => {\n            if (!id) {\n              // eslint-disable-next-line no-param-reassign\n              delete req.cookies[storeCookieName];\n              return;\n            }\n            res.cookie(storeCookieName, JSON.stringify(id));\n          },\n          getCurrency: () => req.cookies[currencyCookieName],\n          setCurrency: (id) => {\n            if (!id) {\n              // eslint-disable-next-line no-param-reassign\n              delete req.cookies[currencyCookieName];\n              return;\n            }\n            res.cookie(currencyCookieName, JSON.stringify(id));\n          },\n        },\n      };\n    },\n  }),\n};\n\nconst { createApiClient } = apiClientFactory({\n  onCreate,\n  api,\n  extensions: [tokenExtension],\n});\n\nexport {\n  createApiClient,\n  init,\n};\n", "export { default as addBundleProductsToCart } from './addBundleProductsToCart';\nexport { default as addConfigurableProductsToCart } from './addConfigurableProductsToCart';\nexport { default as addProductsToCart } from './addProductsToCart';\nexport { default as addProductToWishList } from './addProductToWishList';\nexport { default as addSimpleProductsToCart } from './addSimpleProductsToCart';\nexport { default as addDownloadableProductsToCart } from './addDownloadableProductsToCart';\nexport { default as addVirtualProductsToCart } from './addVirtualProductsToCart';\nexport { default as applyCouponToCart } from './applyCouponToCart';\nexport { default as availableStores } from './availableStores';\nexport { default as cart } from './cart';\nexport { default as cartTotalQty } from './cartTotalQty';\nexport { default as categoryList } from './categoryList';\nexport { default as categorySearch } from './categorySearch';\nexport { default as changeCustomerPassword } from './changeCustomerPassword';\nexport { default as cmsBlocks } from './cmsBlocks';\nexport { default as cmsPage } from './cmsPage';\nexport { default as countries } from './countries';\nexport { default as country } from './country';\nexport { default as createCustomer } from './createCustomer';\nexport { default as createCustomerAddress } from './createCustomerAddress';\nexport { default as createEmptyCart } from './createEmptyCart';\nexport { default as createProductReview } from './createProductReview';\nexport { default as currency } from './currency';\nexport { default as customer } from './customer';\nexport { default as customerCart } from './customerCart';\nexport { default as customerOrders } from './customerOrders';\nexport { default as customerProductReview } from './customerProductReview';\nexport { default as customMutation } from './customMutation';\nexport { default as customQuery } from './customQuery';\nexport { default as deleteCustomerAddress } from './deleteCustomerAddress';\nexport { default as generateCustomerToken } from './generateCustomerToken';\nexport { default as getAvailableCustomerPaymentMethods } from './getAvailableCustomerPaymentMethods';\nexport { default as getAvailableCustomerShippingMethods } from './getAvailableCustomerShippingMethods';\nexport { default as getAvailablePaymentMethods } from './getAvailablePaymentMethods';\nexport { default as getAvailableShippingMethods } from './getAvailableShippingMethods';\nexport { default as getCustomerAddresses } from './getCustomerAddresses';\nexport { default as mergeCarts } from './mergeCarts';\nexport { default as placeOrder } from './placeOrder';\nexport { default as productDetail } from './productDetail';\nexport { default as productReview } from './productReview';\nexport { default as productReviewRatingsMetadata } from './productReviewRatingsMetadata';\nexport { default as products } from './products';\nexport { default as relatedProduct } from './relatedProduct';\nexport { default as removeCouponFromCart } from './removeCouponFromCart';\nexport { default as removeItemFromCart } from './removeItemFromCart';\nexport { default as removeProductsFromWishlist } from './removeProductsFromWishlist';\nexport { default as requestPasswordResetEmail } from './requestPasswordResetEmail';\nexport { default as resetPassword } from './resetPassword';\nexport { default as revokeCustomerToken } from './revokeCustomerToken';\nexport { default as setBillingAddressOnCart } from './setBillingAddressOnCart';\nexport { default as setGuestEmailOnCart } from './setGuestEmailOnCart';\nexport { default as setPaymentMethodOnCart } from './setPaymentMethodOnCart';\nexport { default as setShippingAddressesOnCart } from './setShippingAddressesOnCart';\nexport { default as setShippingMethodsOnCart } from './setShippingMethodsOnCart';\nexport { default as storeConfig } from './storeConfig';\nexport { default as subscribeEmailToNewsletter } from './subscribeEmailToNewsletter';\nexport { default as updateCartItems } from './updateCartItems';\nexport { default as updateCustomer } from './updateCustomer';\nexport { default as updateCustomerAddress } from './updateCustomerAddress';\nexport { default as updateCustomerEmail } from './updateCustomerEmail';\nexport { default as upsellProduct } from './upsellProduct';\nexport { default as urlResolver } from './urlResolver';\nexport { default as route } from './route';\nexport { default as wishlist } from './wishlist';\nexport { default as wishlistItemsCount } from './wishlistItemsCount';\n", "import gql from 'graphql-tag';\n\nexport default gql`\n  mutation addBundleProductsToCart($input: AddBundleProductsToCartInput) {\n    addBundleProductsToCart(input: $input) {\n      cart {\n        id\n        email\n        is_virtual\n        applied_coupons {\n          code\n        }\n        prices {\n          subtotal_excluding_tax {\n            value\n          },\n          subtotal_including_tax {\n            value\n          },\n          applied_taxes {\n            amount {\n              value\n            },\n            label\n          }\n          discounts {\n            amount {\n              value\n            },\n            label\n          }\n          grand_total {\n            value\n          }\n        }\n        items {\n          uid\n          product {\n            uid\n            __typename\n            sku\n            name\n            stock_status\n            only_x_left_in_stock\n            rating_summary\n            thumbnail {\n              url\n              position\n              disabled\n              label\n            }\n            url_key\n            url_rewrites {\n              url\n            }\n            price_range {\n              maximum_price {\n                final_price {\n                  currency\n                  value\n                }\n                regular_price {\n                  currency\n                  value\n                }\n              }\n              minimum_price {\n                final_price {\n                  currency\n                  value\n                }\n                regular_price {\n                  currency\n                  value\n                }\n              }\n            }\n            categories {\n              uid\n              name\n              url_suffix\n              url_path\n              breadcrumbs {\n                category_name,\n                category_url_path\n              }\n            }\n            review_count\n            reviews {\n              items {\n                average_rating\n                ratings_breakdown {\n                  name\n                  value\n                }\n              }\n            }\n          }\n          prices {\n            row_total {\n              value\n            }\n            row_total_including_tax {\n              value\n            }\n            total_item_discount {\n              value\n            }\n          }\n          quantity\n          ... on ConfigurableCartItem {\n            configurable_options {\n              configurable_product_option_uid\n              option_label\n              configurable_product_option_value_uid\n              value_label\n            }\n            configured_variant {\n              sku\n              thumbnail {\n                url\n              }\n            }\n          }\n          ... on BundleCartItem {\n            bundle_options {\n              uid\n              label\n              type\n              values {\n                id\n                label\n                price\n                quantity\n              }\n            }\n          }\n        }\n        total_quantity\n        shipping_addresses {\n          firstname\n          lastname\n          street\n          city\n          company\n          region {\n            code\n            region_id\n            label\n          }\n          postcode\n          telephone\n          country {\n            code\n            label\n          }\n          selected_shipping_method {\n            carrier_code\n            carrier_title\n            method_code\n            method_title\n            amount {\n              value\n              currency\n            }\n          }\n        }\n        billing_address {\n          firstname\n          lastname\n          street\n          city\n          company\n          region {\n            code\n            region_id\n            label\n          }\n          postcode\n          telephone\n          country {\n            code\n            label\n          }\n        }\n      }\n    }\n  }\n`;\n", "import { Context } from '../types/context';\n\nexport default function getHeaders(context: Context) {\n  const { getCustomerToken, getStore, getCurrency } = context.config.state;\n\n  return {\n    ...(getCustomerToken() && { Authorization: `Bearer ${getCustomerToken()}` }),\n    ...(getStore() && { store: getStore() }),\n    ...(getCurrency() && { 'Content-Currency': getCurrency() }),\n  };\n}\n", "import { FetchResult } from '@apollo/client/core';\nimport { CustomQuery } from '@vue-storefront/core';\nimport addBundleProductsToCart from './addBundleProductsToCart';\nimport {\n  AddBundleProductsToCartMutation,\n  AddBundleProductsToCartMutationVariables,\n  AddBundleProductsToCartInput,\n} from '../../types/GraphQL';\nimport { Context } from '../../types/context';\nimport getHeaders from '../getHeaders';\n\nexport default async (\n  context: Context,\n  input: AddBundleProductsToCartInput,\n  customQuery: CustomQuery = { addBundleProductsToCart: 'addBundleProductsToCart' },\n): Promise<FetchResult<AddBundleProductsToCartMutation>> => {\n  const { addBundleProductsToCart: addBundleProductsToCartGQL } = context.extendQuery(\n    customQuery,\n    {\n      addBundleProductsToCart: {\n        query: addBundleProductsToCart,\n        variables: { input },\n      },\n    },\n  );\n\n  return context.client\n    .mutate<any, AddBundleProductsToCartMutationVariables>({\n    mutation: addBundleProductsToCartGQL.query,\n    variables: addBundleProductsToCartGQL.variables,\n    context: {\n      headers: getHeaders(context),\n    },\n  });\n};\n", "import gql from 'graphql-tag';\n\n/** GraphQL Mutation that adds configurable products to shopping cart */\nexport default gql`\n  mutation addConfigurableProductsToCart($input: AddConfigurableProductsToCartInput) {\n    addConfigurableProductsToCart(input: $input) {\n      cart {\n        id\n        email\n        is_virtual\n        applied_coupons {\n          code\n        }\n        prices {\n          subtotal_excluding_tax {\n            value\n          },\n          subtotal_including_tax {\n            value\n          },\n          applied_taxes {\n            amount {\n              value\n            },\n            label\n          }\n          discounts {\n            amount {\n              value\n            },\n            label\n          }\n          grand_total {\n            value\n          }\n        }\n        items {\n          uid\n          product {\n            uid\n            __typename\n            sku\n            name\n            stock_status\n            only_x_left_in_stock\n            rating_summary\n            thumbnail {\n              url\n              position\n              disabled\n              label\n            }\n            url_key\n            url_rewrites {\n              url\n            }\n            price_range {\n              maximum_price {\n                final_price {\n                  currency\n                  value\n                }\n                regular_price {\n                  currency\n                  value\n                }\n              }\n              minimum_price {\n                final_price {\n                  currency\n                  value\n                }\n                regular_price {\n                  currency\n                  value\n                }\n              }\n            }\n            categories {\n              uid\n              name\n              url_suffix\n              url_path\n              breadcrumbs {\n                category_name,\n                category_url_path\n              }\n            }\n            review_count\n            reviews {\n              items {\n                average_rating\n                ratings_breakdown {\n                  name\n                  value\n                }\n              }\n            }\n          }\n          prices {\n            row_total {\n              value\n            }\n            row_total_including_tax {\n              value\n            }\n            total_item_discount {\n              value\n            }\n          }\n          quantity\n          ... on ConfigurableCartItem {\n            configurable_options {\n              configurable_product_option_uid\n              option_label\n              configurable_product_option_value_uid\n              value_label\n            }\n            configured_variant {\n              sku\n              thumbnail {\n                url\n              }\n            }\n          }\n          ... on BundleCartItem {\n            bundle_options {\n              uid\n              label\n              type\n              values {\n                id\n                label\n                price\n                quantity\n              }\n            }\n          }\n        }\n        total_quantity\n        shipping_addresses {\n          firstname\n          lastname\n          street\n          city\n          company\n          region {\n            code\n            region_id\n            label\n          }\n          postcode\n          telephone\n          country {\n            code\n            label\n          }\n          selected_shipping_method {\n            carrier_code\n            carrier_title\n            method_code\n            method_title\n            amount {\n              value\n              currency\n            }\n          }\n        }\n        billing_address {\n          firstname\n          lastname\n          street\n          city\n          company\n          region {\n            code\n            region_id\n            label\n          }\n          postcode\n          telephone\n          country {\n            code\n            label\n          }\n        }\n      }\n    }\n  }\n`;\n", "import { FetchResult } from '@apollo/client/core';\nimport { CustomQuery } from '@vue-storefront/core';\nimport type { Context } from '../../types/context';\nimport {\n  AddConfigurableProductsToCartInput, AddConfigurableProductsToCartMutation, AddConfigurableProductsToCartMutationVariables,\n} from '../../types/GraphQL';\nimport addConfigurableProductsToCartMutation from './addConfigurableProductsToCart';\nimport getHeaders from '../getHeaders';\n\n/**\n * Adds a set of configurable products to a specified cart\n * @param context VSF Context\n * @param input ID of the cart and products to be added\n * @param [customQuery] (optional) - custom GraphQL query that extends the default one\n */\nexport default async function addConfigurableProductsToCart(\n  context: Context,\n  input: AddConfigurableProductsToCartInput,\n  customQuery: CustomQuery = { addConfigurableProductsToCart: 'addConfigurableProductsToCart' },\n): Promise<FetchResult<AddConfigurableProductsToCartMutation>> {\n  const { addConfigurableProductsToCart: addConfigurableProductsToCartGQL } = context.extendQuery(\n    customQuery,\n    {\n      addConfigurableProductsToCart: {\n        query: addConfigurableProductsToCartMutation,\n        variables: { input },\n      },\n    },\n  );\n  return context.client.mutate<any, AddConfigurableProductsToCartMutationVariables>({\n    mutation: addConfigurableProductsToCartGQL.query,\n    variables: addConfigurableProductsToCartGQL.variables,\n    context: {\n      headers: getHeaders(context),\n    },\n  });\n}\n", "import gql from 'graphql-tag';\n\n/** GraphQL Mutation that adds a product to the cart */\nexport default gql`\n  mutation addProductsToCart($cartId: String!, $cartItems: [CartItemInput!]!) {\n    addProductsToCart(cartId,: $cartId, cartItems,: $cartItems) {\n      cart {\n        id\n        email\n        is_virtual\n        applied_coupons {\n          code\n        }\n        prices {\n          subtotal_excluding_tax {\n            value\n          },\n          subtotal_including_tax {\n            value\n          },\n          applied_taxes {\n            amount {\n              value\n            },\n            label\n          }\n          discounts {\n            amount {\n              value\n            },\n            label\n          }\n          grand_total {\n            value\n          }\n        }\n        items {\n          uid\n          product {\n            uid\n            __typename\n            sku\n            name\n            stock_status\n            only_x_left_in_stock\n            rating_summary\n            thumbnail {\n              url\n              position\n              disabled\n              label\n            }\n            url_key\n            url_rewrites {\n              url\n            }\n            price_range {\n              maximum_price {\n                final_price {\n                  currency\n                  value\n                }\n                regular_price {\n                  currency\n                  value\n                }\n              }\n              minimum_price {\n                final_price {\n                  currency\n                  value\n                }\n                regular_price {\n                  currency\n                  value\n                }\n              }\n            }\n            categories {\n              uid\n              name\n              url_suffix\n              url_path\n              breadcrumbs {\n                category_name,\n                category_url_path\n              }\n            }\n            review_count\n            reviews {\n              items {\n                average_rating\n                ratings_breakdown {\n                  name\n                  value\n                }\n              }\n            }\n          }\n          prices {\n            row_total {\n              value\n            }\n            row_total_including_tax {\n              value\n            }\n            total_item_discount {\n              value\n            }\n          }\n          quantity\n          ... on ConfigurableCartItem {\n            configurable_options {\n              configurable_product_option_uid\n              option_label\n              configurable_product_option_value_uid\n              value_label\n            }\n            configured_variant {\n              sku\n              thumbnail {\n                url\n              }\n            }\n          }\n          ... on BundleCartItem {\n            bundle_options {\n              uid\n              label\n              type\n              values {\n                id\n                label\n                price\n                quantity\n              }\n            }\n          }\n        }\n        total_quantity\n        shipping_addresses {\n          firstname\n          lastname\n          street\n          city\n          company\n          region {\n            code\n            region_id\n            label\n          }\n          postcode\n          telephone\n          country {\n            code\n            label\n          }\n          selected_shipping_method {\n            carrier_code\n            carrier_title\n            method_code\n            method_title\n            amount {\n              value\n              currency\n            }\n          }\n        }\n        billing_address {\n          firstname\n          lastname\n          street\n          city\n          company\n          region {\n            code\n            region_id\n            label\n          }\n          postcode\n          telephone\n          country {\n            code\n            label\n          }\n        }\n      }\n      user_errors {\n        code\n        message\n      }\n    }\n  }\n`;\n", "import { FetchResult } from '@apollo/client/core';\nimport { CustomQuery } from '@vue-storefront/core';\nimport { Context } from '../../types/context';\nimport {\n  AddProductsToCartMutation, CartItemInput,\n} from '../../types/GraphQL';\nimport addProductsToCartMutation from './addProductsToCart';\nimport getHeaders from '../getHeaders';\n\nexport type AddProductsToCartInput = {\n  cartId: string;\n  cartItems: CartItemInput[];\n};\n\n/**\n * Adds products to the specified cart\n * @param context VSF Context\n * @param input ID of the cart and products to be added\n * @param [customQuery] (optional) - custom GraphQL query that extends the default one\n */\nexport default async function addProductsToCart(\n  context: Context,\n  input: AddProductsToCartInput,\n  customQuery: CustomQuery = { addProductsToCart: 'addProductsToCart' },\n): Promise<FetchResult<AddProductsToCartMutation>> {\n  const { addProductsToCart: addProductsToCartGQL } = context.extendQuery(\n    customQuery,\n    {\n      addProductsToCart: {\n        query: addProductsToCartMutation,\n        variables: { ...input },\n      },\n    },\n  );\n  return context.client.mutate<AddProductsToCartMutation, AddProductsToCartInput>({\n    mutation: addProductsToCartGQL.query,\n    variables: addProductsToCartGQL.variables,\n    context: {\n      headers: getHeaders(context),\n    },\n  });\n}\n", "import gql from 'graphql-tag';\n\nexport default gql`\n  mutation addProductsToWishlist($id: ID!, $items: [WishlistItemInput!]!) {\n    addProductsToWishlist(wishlistId: $id, wishlistItems: $items) {\n      wishlist {\n        id\n        items_count\n        sharing_code\n        items_v2 {\n          items {\n            id\n            quantity\n            description\n            added_at\n            product {\n              ...on ConfigurableProduct {\n                configurable_options {\n                  attribute_code\n                  attribute_uid\n                  label\n                  position\n                  uid\n                  use_default\n                  values {\n                    label\n                    swatch_data {\n                      value\n                    }\n                    uid\n                  }\n                }\n              }\n              ... on BundleProduct {\n                items {\n                  sku\n                  title\n                  options {\n                    uid\n                    quantity\n                    product {\n                      uid\n                      sku\n                      name\n                      price_range {\n                        maximum_price {\n                          final_price {\n                            currency\n                            value\n                          }\n                          regular_price {\n                            currency\n                            value\n                          }\n                        }\n                        minimum_price {\n                          final_price {\n                            currency\n                            value\n                          }\n                          regular_price {\n                            currency\n                            value\n                          }\n                        }\n                      }\n                    }\n                  }\n                }\n              }\n              uid\n              __typename\n              sku\n              name\n              stock_status\n              only_x_left_in_stock\n              rating_summary\n              categories {\n                uid\n                name\n                url_suffix\n                url_path\n                breadcrumbs {\n                  category_name,\n                  category_url_path\n                }\n              }\n              price_range {\n                maximum_price {\n                  final_price {\n                    currency\n                    value\n                  }\n                  regular_price {\n                    currency\n                    value\n                  }\n                }\n                minimum_price {\n                  final_price {\n                    currency\n                    value\n                  }\n                  regular_price {\n                    currency\n                    value\n                  }\n                }\n              }\n              thumbnail {\n                url\n                position\n                disabled\n                label\n              }\n              url_key\n              url_rewrites {\n                url\n              }\n              review_count\n              reviews {\n                items {\n                  average_rating\n                  ratings_breakdown {\n                    name\n                    value\n                  }\n                }\n              }\n              ... on GroupedProduct {\n                items {\n                  product {\n                    sku\n                  }\n                }\n              }\n            }\n          }\n          page_info {\n            current_page\n            page_size\n            total_pages\n          }\n        }\n      }\n    }\n  }\n`;\n", "import { FetchResult } from '@apollo/client/core';\nimport { CustomQuery } from '@vue-storefront/core';\nimport addProductsToWishlist from './addProductsToWishlist';\nimport {\n  AddProductsToWishlistMutation,\n  AddProductsToWishlistMutationVariables,\n} from '../../types/GraphQL';\nimport { Context } from '../../types/context';\nimport getHeaders from '../getHeaders';\n\nexport default async (\n  context: Context,\n  input: AddProductsToWishlistMutationVariables,\n  customQuery: CustomQuery = { addProductsToWishlist: 'addProductsToWishlist' },\n): Promise<FetchResult<AddProductsToWishlistMutation>> => {\n  const { addProductsToWishlist: addProductsToWishlistGQL } = context.extendQuery(\n    customQuery,\n    {\n      addProductsToWishlist: {\n        query: addProductsToWishlist,\n        variables: { ...input },\n      },\n    },\n  );\n  return context.client.mutate<AddProductsToWishlistMutation, AddProductsToWishlistMutationVariables>({\n    mutation: addProductsToWishlistGQL.query,\n    variables: addProductsToWishlistGQL.variables,\n    context: {\n      headers: getHeaders(context),\n    },\n  });\n};\n", "import gql from 'graphql-tag';\n\nexport default gql`\n  mutation addSimpleProductsToCart($input: AddSimpleProductsToCartInput) {\n    addSimpleProductsToCart(input: $input) {\n      cart {\n        id\n        email\n        is_virtual\n        applied_coupons {\n          code\n        }\n        prices {\n          subtotal_excluding_tax {\n            value\n          },\n          subtotal_including_tax {\n            value\n          },\n          applied_taxes {\n            amount {\n              value\n            },\n            label\n          }\n          discounts {\n            amount {\n              value\n            },\n            label\n          }\n          grand_total {\n            value\n          }\n        }\n        items {\n          uid\n          product {\n            uid\n            __typename\n            sku\n            name\n            stock_status\n            only_x_left_in_stock\n            rating_summary\n            thumbnail {\n              url\n              position\n              disabled\n              label\n            }\n            url_key\n            url_rewrites {\n              url\n            }\n            price_range {\n              maximum_price {\n                final_price {\n                  currency\n                  value\n                }\n                regular_price {\n                  currency\n                  value\n                }\n              }\n              minimum_price {\n                final_price {\n                  currency\n                  value\n                }\n                regular_price {\n                  currency\n                  value\n                }\n              }\n            }\n            categories {\n              uid\n              name\n              url_suffix\n              url_path\n              breadcrumbs {\n                category_name,\n                category_url_path\n              }\n            }\n            review_count\n            reviews {\n              items {\n                average_rating\n                ratings_breakdown {\n                  name\n                  value\n                }\n              }\n            }\n          }\n          prices {\n            row_total {\n              value\n            }\n            row_total_including_tax {\n              value\n            }\n            total_item_discount {\n              value\n            }\n          }\n          quantity\n          ... on ConfigurableCartItem {\n            configurable_options {\n              configurable_product_option_uid\n              option_label\n              configurable_product_option_value_uid\n              value_label\n            }\n            configured_variant {\n              sku\n              thumbnail {\n                url\n              }\n            }\n          }\n          ... on BundleCartItem {\n            bundle_options {\n              uid\n              label\n              type\n              values {\n                id\n                label\n                price\n                quantity\n              }\n            }\n          }\n        }\n        total_quantity\n        shipping_addresses {\n          firstname\n          lastname\n          street\n          city\n          company\n          region {\n            code\n            region_id\n            label\n          }\n          postcode\n          telephone\n          country {\n            code\n            label\n          }\n          selected_shipping_method {\n            carrier_code\n            carrier_title\n            method_code\n            method_title\n            amount {\n              value\n              currency\n            }\n          }\n        }\n        billing_address {\n          firstname\n          lastname\n          street\n          city\n          company\n          region {\n            code\n            region_id\n            label\n          }\n          postcode\n          telephone\n          country {\n            code\n            label\n          }\n        }\n      }\n    }\n  }\n`;\n", "import { FetchResult } from '@apollo/client/core';\nimport { CustomQuery } from '@vue-storefront/core';\nimport addSimpleProductsToCart from './addSimpleProductsToCart';\nimport {\n  AddSimpleProductsToCartInput,\n  AddSimpleProductsToCartMutation,\n  AddSimpleProductsToCartMutationVariables,\n} from '../../types/GraphQL';\nimport { Context } from '../../types/context';\nimport getHeaders from '../getHeaders';\n\nexport default async (\n  context: Context,\n  input: AddSimpleProductsToCartInput,\n  customQuery: CustomQuery = { addSimpleProductsToCart: 'addSimpleProductsToCart' },\n): Promise<FetchResult<AddSimpleProductsToCartMutation>> => {\n  const { addSimpleProductsToCart: addSimpleProductsToCartGQL } = context.extendQuery(\n    customQuery,\n    {\n      addSimpleProductsToCart: {\n        query: addSimpleProductsToCart,\n        variables: { input },\n      },\n    },\n  );\n  return context.client.mutate<AddSimpleProductsToCartMutation, AddSimpleProductsToCartMutationVariables>({\n    mutation: addSimpleProductsToCartGQL.query,\n    variables: addSimpleProductsToCartGQL.variables,\n    context: {\n      headers: getHeaders(context),\n    },\n  });\n};\n", "import gql from 'graphql-tag';\n\n/** GraphQL Mutation that adds downloadable products to shopping cart */\nexport default gql`\n  mutation addDownloadableProductsToCart($input: AddDownloadableProductsToCartInput) {\n    addDownloadableProductsToCart(input: $input) {\n      cart {\n        id\n        email\n        is_virtual\n        applied_coupons {\n          code\n        }\n        prices {\n          subtotal_excluding_tax {\n            value\n          },\n          subtotal_including_tax {\n            value\n          },\n          applied_taxes {\n            amount {\n              value\n            },\n            label\n          }\n          discounts {\n            amount {\n              value\n            },\n            label\n          }\n          grand_total {\n            value\n          }\n        }\n        items {\n          uid\n          product {\n            uid\n            __typename\n            sku\n            name\n            stock_status\n            only_x_left_in_stock\n            rating_summary\n            thumbnail {\n              url\n              position\n              disabled\n              label\n            }\n            url_key\n            url_rewrites {\n              url\n            }\n            price_range {\n              maximum_price {\n                final_price {\n                  currency\n                  value\n                }\n                regular_price {\n                  currency\n                  value\n                }\n              }\n              minimum_price {\n                final_price {\n                  currency\n                  value\n                }\n                regular_price {\n                  currency\n                  value\n                }\n              }\n            }\n            categories {\n              uid\n              name\n              url_suffix\n              url_path\n              breadcrumbs {\n                category_name,\n                category_url_path\n              }\n            }\n            review_count\n            reviews {\n              items {\n                average_rating\n                ratings_breakdown {\n                  name\n                  value\n                }\n              }\n            }\n          }\n          prices {\n            row_total {\n              value\n            }\n            row_total_including_tax {\n              value\n            }\n            total_item_discount {\n              value\n            }\n          }\n          quantity\n          ... on ConfigurableCartItem {\n            configurable_options {\n              configurable_product_option_uid\n              option_label\n              configurable_product_option_value_uid\n              value_label\n            }\n            configured_variant {\n              sku\n              thumbnail {\n                url\n              }\n            }\n          }\n          ... on BundleCartItem {\n            bundle_options {\n              uid\n              label\n              type\n              values {\n                id\n                label\n                price\n                quantity\n              }\n            }\n          }\n        }\n        total_quantity\n        shipping_addresses {\n          firstname\n          lastname\n          street\n          city\n          company\n          region {\n            code\n            region_id\n            label\n          }\n          postcode\n          telephone\n          country {\n            code\n            label\n          }\n          selected_shipping_method {\n            carrier_code\n            carrier_title\n            method_code\n            method_title\n            amount {\n              value\n              currency\n            }\n          }\n        }\n        billing_address {\n          firstname\n          lastname\n          street\n          city\n          company\n          region {\n            code\n            region_id\n            label\n          }\n          postcode\n          telephone\n          country {\n            code\n            label\n          }\n        }\n      }\n    }\n  }\n`;\n", "import { FetchResult } from '@apollo/client/core';\nimport { CustomQuery } from '@vue-storefront/core';\nimport type { Context } from '../../types/context';\nimport {\n  AddDownloadableProductsToCartInput,\n  AddDownloadableProductsToCartMutation,\n  AddDownloadableProductsToCartMutationVariables,\n} from '../../types/GraphQL';\nimport addDownloadableProductsToCartMutation from './addDownloadableProductsToCart';\nimport getHeaders from '../getHeaders';\n\n/**\n * Adds a set of downloadable products to a specified cart\n * @param context VSF Context\n * @param input ID of the cart and products to be added\n * @param customQuery custom GraphQL query that extends the default one\n */\nexport default async function addDownloadableProductsToCart(\n  context: Context,\n  input: AddDownloadableProductsToCartInput,\n  customQuery: CustomQuery = { addDownloadableProductsToCart: 'addDownloadableProductsToCart' },\n): Promise<FetchResult<AddDownloadableProductsToCartMutation>> {\n  const { addDownloadableProductsToCart: addDownloadableProductsToCartGQL } = context.extendQuery(\n    customQuery,\n    {\n      addDownloadableProductsToCart: {\n        query: addDownloadableProductsToCartMutation,\n        variables: { input },\n      },\n    },\n  );\n  return context.client.mutate<AddDownloadableProductsToCartMutation, AddDownloadableProductsToCartMutationVariables>({\n    mutation: addDownloadableProductsToCartGQL.query,\n    variables: addDownloadableProductsToCartGQL.variables,\n    context: {\n      headers: getHeaders(context),\n    },\n  });\n}\n", "import gql from 'graphql-tag';\n\n/** GraphQL Mutation that adds virtual products to shopping cart */\nexport default gql`\n  mutation addVirtualProductsToCart($input: AddVirtualProductsToCartInput) {\n    addVirtualProductsToCart(input: $input) {\n      cart {\n        id\n        email\n        is_virtual\n        applied_coupons {\n          code\n        }\n        prices {\n          subtotal_excluding_tax {\n            value\n          },\n          subtotal_including_tax {\n            value\n          },\n          applied_taxes {\n            amount {\n              value\n            },\n            label\n          }\n          discounts {\n            amount {\n              value\n            },\n            label\n          }\n          grand_total {\n            value\n          }\n        }\n        items {\n          uid\n          product {\n            uid\n            __typename\n            sku\n            name\n            stock_status\n            only_x_left_in_stock\n            rating_summary\n            thumbnail {\n              url\n              position\n              disabled\n              label\n            }\n            url_key\n            url_rewrites {\n              url\n            }\n            price_range {\n              maximum_price {\n                final_price {\n                  currency\n                  value\n                }\n                regular_price {\n                  currency\n                  value\n                }\n              }\n              minimum_price {\n                final_price {\n                  currency\n                  value\n                }\n                regular_price {\n                  currency\n                  value\n                }\n              }\n            }\n            categories {\n              uid\n              name\n              url_suffix\n              url_path\n              breadcrumbs {\n                category_name,\n                category_url_path\n              }\n            }\n            review_count\n            reviews {\n              items {\n                average_rating\n                ratings_breakdown {\n                  name\n                  value\n                }\n              }\n            }\n          }\n          prices {\n            row_total {\n              value\n            }\n            row_total_including_tax {\n              value\n            }\n            total_item_discount {\n              value\n            }\n          }\n          quantity\n          ... on ConfigurableCartItem {\n            configurable_options {\n              configurable_product_option_uid\n              option_label\n              configurable_product_option_value_uid\n              value_label\n            }\n            configured_variant {\n              sku\n              thumbnail {\n                url\n              }\n            }\n          }\n          ... on BundleCartItem {\n            bundle_options {\n              uid\n              label\n              type\n              values {\n                id\n                label\n                price\n                quantity\n              }\n            }\n          }\n        }\n        total_quantity\n        shipping_addresses {\n          firstname\n          lastname\n          street\n          city\n          company\n          region {\n            code\n            region_id\n            label\n          }\n          postcode\n          telephone\n          country {\n            code\n            label\n          }\n          selected_shipping_method {\n            carrier_code\n            carrier_title\n            method_code\n            method_title\n            amount {\n              value\n              currency\n            }\n          }\n        }\n        billing_address {\n          firstname\n          lastname\n          street\n          city\n          company\n          region {\n            code\n            region_id\n            label\n          }\n          postcode\n          telephone\n          country {\n            code\n            label\n          }\n        }\n      }\n    }\n  }\n`;\n", "import { FetchResult } from '@apollo/client/core';\nimport { CustomQuery } from '@vue-storefront/core';\nimport type { Context } from '../../types/context';\nimport {\n  AddVirtualProductsToCartInput,\n  AddVirtualProductsToCartMutation,\n  AddVirtualProductsToCartMutationVariables,\n} from '../../types/GraphQL';\nimport addVirtualProductsToCartMutation from './addVirtualProductsToCart';\nimport getHeaders from '../getHeaders';\n\n/**\n * Adds a set of virtual products to a specified cart\n * @param context VSF Context\n * @param input ID of the cart and products to add\n * @param customQuery custom GraphQL query that extends the default one\n */\nexport default async function addVirtualProductsToCart(\n  context: Context,\n  input: AddVirtualProductsToCartInput,\n  customQuery: CustomQuery = { addVirtualProductsToCart: 'addVirtualProductsToCart' },\n): Promise<FetchResult<AddVirtualProductsToCartMutation>> {\n  const { addVirtualProductsToCart: addVirtualProductsToCartGQL } = context.extendQuery(\n    customQuery,\n    {\n      addVirtualProductsToCart: {\n        query: addVirtualProductsToCartMutation,\n        variables: { input },\n      },\n    },\n  );\n  return context.client.mutate<AddVirtualProductsToCartMutation, AddVirtualProductsToCartMutationVariables>({\n    mutation: addVirtualProductsToCartGQL.query,\n    variables: addVirtualProductsToCartGQL.variables,\n    context: {\n      headers: getHeaders(context),\n    },\n  });\n}\n", "import gql from 'graphql-tag';\n\n/** GraphQL Mutation to apply a coupon to a card */\nexport default gql`\n  mutation applyCouponToCart($input: ApplyCouponToCartInput) {\n    applyCouponToCart(input: $input) {\n      cart {\n        id\n        email\n        is_virtual\n        applied_coupons {\n          code\n        }\n        prices {\n          subtotal_excluding_tax {\n            value\n          },\n          subtotal_including_tax {\n            value\n          },\n          applied_taxes {\n            amount {\n              value\n            },\n            label\n          }\n          discounts {\n            amount {\n              value\n            },\n            label\n          }\n          grand_total {\n            value\n          }\n        }\n        items {\n          uid\n          product {\n            uid\n            __typename\n            sku\n            name\n            stock_status\n            only_x_left_in_stock\n            rating_summary\n            thumbnail {\n              url\n              position\n              disabled\n              label\n            }\n            url_key\n            url_rewrites {\n              url\n            }\n            price_range {\n              maximum_price {\n                final_price {\n                  currency\n                  value\n                }\n                regular_price {\n                  currency\n                  value\n                }\n              }\n              minimum_price {\n                final_price {\n                  currency\n                  value\n                }\n                regular_price {\n                  currency\n                  value\n                }\n              }\n            }\n            categories {\n              uid\n              name\n              url_suffix\n              url_path\n              breadcrumbs {\n                category_name,\n                category_url_path\n              }\n            }\n            review_count\n            reviews {\n              items {\n                average_rating\n                ratings_breakdown {\n                  name\n                  value\n                }\n              }\n            }\n          }\n          prices {\n            row_total {\n              value\n            }\n            row_total_including_tax {\n              value\n            }\n            total_item_discount {\n              value\n            }\n          }\n          quantity\n          ... on ConfigurableCartItem {\n            configurable_options {\n              configurable_product_option_uid\n              option_label\n              configurable_product_option_value_uid\n              value_label\n            }\n            configured_variant {\n              sku\n              thumbnail {\n                url\n              }\n            }\n          }\n          ... on BundleCartItem {\n            bundle_options {\n              uid\n              label\n              type\n              values {\n                id\n                label\n                price\n                quantity\n              }\n            }\n          }\n        }\n        total_quantity\n        shipping_addresses {\n          firstname\n          lastname\n          street\n          city\n          company\n          region {\n            code\n            region_id\n            label\n          }\n          postcode\n          telephone\n          country {\n            code\n            label\n          }\n          selected_shipping_method {\n            carrier_code\n            carrier_title\n            method_code\n            method_title\n            amount {\n              value\n              currency\n            }\n          }\n        }\n        billing_address {\n          firstname\n          lastname\n          street\n          city\n          company\n          region {\n            code\n            region_id\n            label\n          }\n          postcode\n          telephone\n          country {\n            code\n            label\n          }\n        }\n      }\n    }\n  }\n`;\n", "import { FetchResult } from '@apollo/client/core';\nimport { CustomQuery } from '@vue-storefront/core';\nimport type { Context } from '../../types/context';\nimport {\n  ApplyCouponToCartInput,\n  ApplyCouponToCartMutation,\n  ApplyCouponToCartMutationVariables,\n} from '../../types/GraphQL';\nimport applyCouponToCartMutation from './applyCouponToCart';\nimport getHeaders from '../getHeaders';\n\n/**\n * Applies a coupon to a given card\n * @param context VSF context\n * @param input ID of the card and coupon to apply\n * @param customQuery custom GraphQL query that extends the default one\n */\nexport default async function applyCouponToCart(\n  context: Context,\n  input: ApplyCouponToCartInput,\n  customQuery: CustomQuery = { applyCouponToCart: 'applyCouponToCart' },\n): Promise<FetchResult<ApplyCouponToCartMutation>> {\n  const { applyCouponToCart: applyCouponToCartGQL } = context.extendQuery(\n    customQuery,\n    {\n      applyCouponToCart: {\n        query: applyCouponToCartMutation,\n        variables: { input },\n      },\n    },\n  );\n  return context.client.mutate<ApplyCouponToCartMutation, ApplyCouponToCartMutationVariables>({\n    mutation: applyCouponToCartGQL.query,\n    variables: applyCouponToCartGQL.variables,\n    context: {\n      headers: getHeaders(context),\n    },\n  });\n}\n", "import gql from 'graphql-tag';\n\nexport default gql`\n  query availableStores {\n    availableStores {\n      absolute_footer\n      allow_guests_to_write_product_reviews\n      allow_items\n      allow_order\n      autocomplete_on_storefront\n      base_currency_code\n      base_link_url\n      base_media_url\n      base_static_url\n      base_url\n      catalog_default_sort_by\n      category_fixed_product_tax_display_setting\n      category_url_suffix\n      cms_home_page\n      cms_no_cookies\n      cms_no_route\n      code\n      configurable_thumbnail_source\n      copyright\n      default_description\n      default_display_currency_code\n      default_keywords\n      default_title\n      front\n      grid_per_page\n      grid_per_page_values\n      head_includes\n      head_shortcut_icon\n      header_logo_src\n      id\n      is_default_store\n      is_default_store_group\n      list_mode\n      list_per_page\n      list_per_page_values\n      locale\n      logo_alt\n      logo_height\n      logo_width\n      magento_wishlist_general_is_enabled\n      minimum_password_length\n      no_route\n      payment_payflowpro_cc_vault_active\n      product_fixed_product_tax_display_setting\n      product_reviews_enabled\n      product_url_suffix\n      required_character_classes_number\n      root_category_id\n      root_category_uid\n      sales_fixed_product_tax_display_setting\n      secure_base_link_url\n      secure_base_media_url\n      secure_base_static_url\n      secure_base_url\n      show_cms_breadcrumbs\n      store_code\n      store_group_code\n      store_group_name\n      store_name\n      store_sort_order\n      timezone\n      title_prefix\n      title_separator\n      title_suffix\n      use_store_in_url\n      website_code\n      website_id\n      website_name\n      weight_unit\n      welcome\n    }\n  }\n`;\n", "import { ApolloQueryResult } from '@apollo/client/core';\nimport { CustomQuery } from '@vue-storefront/core';\nimport {\n  AvailableStoresQuery,\n} from '../../types/GraphQL';\nimport availableStores from './availableStores';\nimport { Context } from '../../types/context';\nimport getHeaders from '../getHeaders';\n\n/**\n * Returns list of available stores\n */\nexport default async (\n  context: Context,\n  customQuery: CustomQuery = { availableStores: 'availableStores' },\n): Promise<ApolloQueryResult<AvailableStoresQuery>> => {\n  const { availableStores: availableStoresGQL } = context.extendQuery(\n    customQuery,\n    {\n      availableStores: {\n        query: availableStores,\n      },\n    },\n  );\n\n  return context.client.query<AvailableStoresQuery>({\n    query: availableStoresGQL.query,\n    context: {\n      headers: getHeaders(context),\n    },\n  });\n};\n", "import gql from 'graphql-tag';\n\n/** GraphQL query to fetch a cart */\nexport default gql`\n  query cart($cartId: String!) {\n    cart(cart_id:$cartId) {\n      id\n      email\n      is_virtual\n      applied_coupons {\n        code\n      }\n      prices {\n        subtotal_excluding_tax {\n          value\n        },\n        subtotal_including_tax {\n          value\n        },\n        applied_taxes {\n          amount {\n            value\n          },\n          label\n        }\n        discounts {\n          amount {\n            value\n          },\n          label\n        }\n        grand_total {\n          value\n        }\n      }\n      items {\n        uid\n        product {\n          uid\n          __typename\n          sku\n          name\n          stock_status\n          only_x_left_in_stock\n          rating_summary\n          thumbnail {\n            url\n            position\n            disabled\n            label\n          }\n          url_key\n          url_rewrites {\n            url\n          }\n          price_range {\n            maximum_price {\n              final_price {\n                currency\n                value\n              }\n              regular_price {\n                currency\n                value\n              }\n            }\n            minimum_price {\n              final_price {\n                currency\n                value\n              }\n              regular_price {\n                currency\n                value\n              }\n            }\n          }\n          categories {\n            uid\n            name\n            url_suffix\n            url_path\n            breadcrumbs {\n              category_name,\n              category_url_path\n            }\n          }\n          review_count\n          reviews {\n            items {\n              average_rating\n              ratings_breakdown {\n                name\n                value\n              }\n            }\n          }\n        }\n        prices {\n          row_total {\n            value\n          }\n          row_total_including_tax {\n            value\n          }\n          total_item_discount {\n            value\n          }\n        }\n        quantity\n        ... on ConfigurableCartItem {\n          configurable_options {\n            configurable_product_option_uid\n            option_label\n            configurable_product_option_value_uid\n            value_label\n          }\n          configured_variant {\n            sku\n            thumbnail {\n              url\n            }\n          }\n        }\n        ... on BundleCartItem {\n          bundle_options {\n            uid\n            label\n            type\n            values {\n              id\n              label\n              price\n              quantity\n            }\n          }\n        }\n      }\n      total_quantity\n      shipping_addresses {\n        firstname\n        lastname\n        street\n        city\n        company\n        region {\n          code\n          region_id\n          label\n        }\n        postcode\n        telephone\n        country {\n          code\n          label\n        }\n        selected_shipping_method {\n          carrier_code\n          carrier_title\n          method_code\n          method_title\n          amount {\n            value\n            currency\n          }\n        }\n      }\n      billing_address {\n        firstname\n        lastname\n        street\n        city\n        company\n        region {\n          code\n          region_id\n          label\n        }\n        postcode\n        telephone\n        country {\n          code\n          label\n        }\n      }\n    }\n  }\n`;\n", "import { ApolloQueryResult } from '@apollo/client/core';\nimport { CustomQuery } from '@vue-storefront/core';\nimport { Context } from '../../types/context';\nimport type { CartQuery, CartQueryVariables } from '../../types/GraphQL';\nimport cartQuery from './cart';\nimport getHeaders from '../getHeaders';\n\n/**\n * Fetches a cart by its ID\n * @param context VSF context\n * @param cartId ID of the cart to fetch\n * @param customQuery custom GraphQL query that extends the default one\n */\nexport default async function cart(\n  context: Context,\n  cartId: string,\n  customQuery: CustomQuery = { cart: 'cart' },\n): Promise<ApolloQueryResult<CartQuery>> {\n  const { cart: cartGQL } = context.extendQuery(\n    customQuery,\n    {\n      cart: {\n        query: cartQuery,\n        variables: { cartId: cartId ?? '' },\n      },\n    },\n  );\n  return context.client.query<CartQuery, CartQueryVariables>({\n    query: cartGQL.query,\n    variables: cartGQL.variables,\n    context: {\n      headers: getHeaders(context),\n    },\n  });\n}\n", "import gql from 'graphql-tag';\n\nexport default gql`\n  query cartTotalQty($cartId: String!) {\n    cart(cart_id:$cartId) {\n      total_quantity\n    }\n  }\n`;\n", "import { ApolloQueryResult } from '@apollo/client/core';\nimport { CustomQuery } from '@vue-storefront/core';\nimport { CartQuery, CartQueryVariables } from '../../types/GraphQL';\nimport query from './cartTotalQty';\nimport { Context } from '../../types/context';\nimport getHeaders from '../getHeaders';\n\nexport default async (\n  context: Context,\n  cartId: string,\n  customQuery: CustomQuery = { cartTotalQty: 'cartTotalQty' },\n): Promise<ApolloQueryResult<CartQuery>> => {\n  const { cartTotalQty } = context.extendQuery(\n    customQuery,\n    {\n      cartTotalQty: {\n        query,\n        variables: { cartId: cartId ?? '' },\n      },\n    },\n  );\n  return context.client.query<CartQuery, CartQueryVariables>({\n    query: cartTotalQty.query,\n    variables: cartTotalQty.variables,\n    context: {\n      headers: getHeaders(context),\n    },\n  });\n};\n", "import gql from 'graphql-tag';\n\n/** GraphQL Query that fetches the category list. */\nexport default gql`\n  query categoryList {\n    categories {\n      items {\n        children {\n          include_in_menu\n          is_anchor\n          level\n          name\n          position\n          product_count\n          uid\n          url_path\n          url_suffix\n          children {\n            include_in_menu\n            is_anchor\n            level\n            name\n            position\n            product_count\n            uid\n            url_path\n            url_suffix\n            children {\n              include_in_menu\n              is_anchor\n              level\n              name\n              position\n              product_count\n              uid\n              url_path\n              url_suffix\n            }\n          }\n        }\n        product_count\n        name\n        uid\n      }\n    }\n  }\n`;\n", "import { ApolloQueryResult } from '@apollo/client/core';\nimport { CustomQuery } from '@vue-storefront/core';\nimport { CategoryListQuery, CategoryListQueryVariables } from '../../types/GraphQL';\nimport categoryListQuery from './categoryList';\nimport { Context } from '../../types/context';\nimport getHeaders from '../getHeaders';\n\n/**\n * Fetches the category list.\n *\n * @param context VSF Context\n * @param params\n * @param [customQuery] (optional) - custom GraphQL query that extends the default query\n */\nexport default async function categoryList(\n  context: Context,\n  params: CategoryListQueryVariables,\n  customQuery: CustomQuery = { categoryList: 'categoryList' },\n): Promise<ApolloQueryResult<CategoryListQuery>> {\n  const { categoryList: categoryListGQL } = context.extendQuery(customQuery, {\n    categoryList: {\n      query: categoryListQuery,\n      variables: { ...params },\n    },\n  });\n\n  return context.client.query<CategoryListQuery, CategoryListQueryVariables>({\n    query: categoryListGQL.query,\n    variables: categoryListGQL.variables,\n    context: {\n      headers: getHeaders(context),\n    },\n  });\n}\n", "import gql from 'graphql-tag';\n\n/** GraphQL Query that searches for categories using filters. */\nexport default gql`\n  query categorySearch($filters: CategoryFilterInput) {\n    categoryList(filters: $filters) {\n      include_in_menu\n      is_anchor\n      level\n      name\n      position\n      product_count\n      uid\n      url_path\n      url_suffix\n    }\n  }\n`;\n", "import { ApolloQueryResult } from '@apollo/client/core';\nimport { CustomQuery } from '@vue-storefront/core';\nimport { CategorySearchQuery, CategorySearchQueryVariables } from '../../types/GraphQL';\nimport categorySearchQuery from './categorySearch';\nimport { Context } from '../../types/context';\nimport getHeaders from '../getHeaders';\n\n/**\n * Searches for categories using received filters.\n *\n * @param context VSF Context\n * @param filters filters used to search for categories. A filter contains at\n * least one attribute, a comparison operator, and the value that is being\n * searched for.\n * @param [customQuery] (optional) - custom GraphQL query that extends the default query\n */\nexport default async function categorySearch(\n  context: Context,\n  filters: CategorySearchQueryVariables,\n  customQuery: CustomQuery = { categorySearch: 'categorySearch' },\n): Promise<ApolloQueryResult<CategorySearchQuery>> {\n  const { categorySearch: categorySearchGQL } = context.extendQuery(customQuery, {\n    categorySearch: {\n      query: categorySearchQuery,\n      variables: { ...filters },\n    },\n  });\n\n  return context.client.query<CategorySearchQuery, CategorySearchQueryVariables>({\n    query: categorySearchGQL.query,\n    variables: categorySearchGQL.variables,\n    context: {\n      headers: getHeaders(context),\n    },\n  });\n}\n", "import gql from 'graphql-tag';\n\nexport default gql`\n  mutation changeCustomerPassword($currentPassword: String!, $newPassword: String!) {\n    changeCustomerPassword(\n      currentPassword: $currentPassword\n      newPassword: $newPassword\n    ) {\n      date_of_birth\n      default_billing\n      default_shipping\n      email\n      firstname\n      is_subscribed\n      lastname\n      middlename\n      prefix\n      suffix\n      taxvat\n      addresses {\n        city\n        country_code\n        default_billing\n        default_shipping\n        extension_attributes {\n          attribute_code\n          value\n        }\n        firstname\n        id\n        lastname\n        postcode\n        prefix\n        region {\n          region_code\n          region_id\n          region\n        }\n        street\n        suffix\n        telephone\n        vat_id\n      }\n    }\n  }\n`;\n", "import { FetchResult } from '@apollo/client/core';\nimport { CustomQuery } from '@vue-storefront/core';\nimport changeCustomerPassword from './changeCustomerPassword';\nimport {\n  ChangeCustomerPasswordMutation,\n  ChangeCustomerPasswordMutationVariables,\n} from '../../types/GraphQL';\nimport { Context } from '../../types/context';\nimport getHeaders from '../getHeaders';\n\n/**\n * Changes password of the current customer. To override the default query, use the `changeCustomerPassword` query key.\n */\nexport default async (\n  context: Context,\n  params: { currentPassword: string; newPassword: string; },\n  customQuery: CustomQuery = { changeCustomerPassword: 'changeCustomerPassword' },\n): Promise<FetchResult<ChangeCustomerPasswordMutation>> => {\n  try {\n    const { changeCustomerPassword: changeCustomerPasswordGQL } = context.extendQuery(\n      customQuery,\n      {\n        changeCustomerPassword: {\n          query: changeCustomerPassword,\n          variables: { ...params },\n        },\n      },\n    );\n    return await context.client\n      .mutate<ChangeCustomerPasswordMutation, ChangeCustomerPasswordMutationVariables>({\n      mutation: changeCustomerPasswordGQL.query,\n      variables: changeCustomerPasswordGQL.variables,\n      context: {\n        headers: getHeaders(context),\n      },\n    });\n  } catch (error) {\n  // For error in data we don't throw 500, because it's not server error\n    if (error.graphQLErrors) {\n      return {\n        errors: error.graphQLErrors,\n        data: null,\n      };\n    }\n    throw error.networkError?.result || error;\n  }\n};\n", "import gql from 'graphql-tag';\n\nexport default gql`\n  query cmsBlock($identifiers: [String]) {\n      cmsBlocks(identifiers: $identifiers) {\n          items {\n              content\n              identifier\n              title\n          }\n      }\n  }\n`;\n", "import { ApolloQueryResult } from '@apollo/client/core';\nimport { CustomQuery } from '@vue-storefront/core';\nimport { CmsBlockQuery, CmsBlockQueryVariables } from '../../types/GraphQL';\nimport cmsBlocks from './cmsBlocks';\nimport { Context } from '../../types/context';\nimport getHeaders from '../getHeaders';\n\n/**\n * Fetch CMS Blocks from Magento Api.\n *\n * @param context - VSF Context\n * @param identifiers - identifiers of CMS blocks\n * @param [customQuery] - (optional) - custom GraphQL query that extends the default cmsBlocks query\n */\nexport default async function getCmsBlocks(\n  context: Context,\n  identifiers: string,\n  customQuery: CustomQuery = { cmsBlocks: 'cmsBlocks' },\n): Promise<ApolloQueryResult<CmsBlockQuery>> {\n  const { cmsBlocks: cmsBlocksGQL } = context.extendQuery(\n    customQuery,\n    {\n      cmsBlocks: {\n        query: cmsBlocks,\n        variables: { identifiers },\n      },\n    },\n  );\n  return context.client.query<CmsBlockQuery, CmsBlockQueryVariables>({\n    query: cmsBlocksGQL.query,\n    variables: cmsBlocksGQL.variables,\n    context: {\n      headers: getHeaders(context),\n    },\n  });\n}\n", "import { ApolloQueryResult } from '@apollo/client/core';\nimport { CustomQuery, Logger } from '@vue-storefront/core';\nimport { CmsPageQueryVariables, CmsPageQuery } from '../../types/GraphQL';\nimport cmsPage from './cmsPage';\nimport { Context } from '../../types/context';\nimport getHeaders from '../getHeaders';\n\n/**\n * Fetch CMS Page from Magento\n * @param context - VSF Context\n * @param identifier - identifier of CMS page\n * @param customQuery - (optional) - custom query that extends default cmsPage GraphQL query\n */\nexport default async function getCmsPage(\n  context: Context,\n  identifier: string,\n  customQuery: CustomQuery = { cmsPage: 'cmsPage' },\n): Promise<ApolloQueryResult<CmsPageQuery>> {\n  try {\n    const { cmsPage: cmsPageGQL } = context.extendQuery(\n      customQuery,\n      {\n        cmsPage: {\n          query: cmsPage,\n          variables: { identifier },\n        },\n      },\n    );\n\n    return await context.client\n      .query<CmsPageQuery, CmsPageQueryVariables>({\n      query: cmsPageGQL.query,\n      variables: cmsPageGQL.variables,\n      context: {\n        headers: getHeaders(context),\n      },\n    });\n  } catch (error) {\n    // For error in data we don't throw 500, because it's not server error\n    if (error.graphQLErrors) {\n      Logger.debug(error);\n\n      return {\n        ...error,\n        errors: error.graphQLErrors,\n        data: null,\n      };\n    }\n    Logger.error(error);\n    throw error.networkError?.result || error;\n  }\n}\n", "import gql from 'graphql-tag';\n\nexport default gql`\n  query cmsPage($identifier: String) {\n    cmsPage(identifier:$identifier) {\n      identifier\n      content\n      title\n      meta_title\n      meta_description\n      meta_keywords\n      content_heading\n    }\n  }\n`;\n", "import gql from 'graphql-tag';\n\n/** GraphQL Query that fetches the list of countries from the API */\nexport default gql`\n  query countriesList {\n    countries {\n      id\n      two_letter_abbreviation\n      full_name_locale\n      full_name_english\n    }\n  }\n`;\n", "import { ApolloQueryResult } from '@apollo/client/core';\nimport { CustomQuery } from '@vue-storefront/core';\nimport { CountriesListQuery } from '../../types/GraphQL';\nimport countriesListQuery from './countriesList';\nimport { Context } from '../../types/context';\nimport getHeaders from '../getHeaders';\n\n/**\n * Loads the list of countries\n * @param context VSF Context\n * @param [customQuery] (optional) - custom GraphQL query that extends the default one\n */\nexport default async function countries(\n  context: Context,\n  customQuery: CustomQuery = { countries: 'countries' },\n): Promise<ApolloQueryResult<CountriesListQuery>> {\n  const { countries: countriesGQL } = context.extendQuery(\n    customQuery,\n    {\n      countries: {\n        query: countriesListQuery,\n      },\n    },\n  );\n  return context.client.query<CountriesListQuery>({\n    query: countriesGQL.query,\n    context: {\n      headers: getHeaders(context),\n    },\n  });\n}\n", "import gql from 'graphql-tag';\n\nexport default gql`\n  query countryInformation($id: String) {\n    country(id: $id) {\n      id\n      two_letter_abbreviation\n      full_name_locale\n      full_name_english\n      available_regions {\n        id\n        code\n        name\n      }\n    }\n  }\n`;\n", "import { ApolloQueryResult } from '@apollo/client/core';\nimport { CustomQuery } from '@vue-storefront/core';\nimport { CountryInformationQuery, CountryInformationQueryVariables } from '../../types/GraphQL';\nimport countryInformation from './countryInformation';\nimport { Context } from '../../types/context';\nimport getHeaders from '../getHeaders';\n\n/**\n * Fetches the information about a country given its ID\n * @param context VSF Context\n * @param id ID of the country to be fetched\n * @param [customQuery] (optional) - custom GraphQL query that extends the default one\n */\nexport default async function country(\n  context: Context,\n  id: string,\n  customQuery: CustomQuery = { country: 'country' },\n): Promise<ApolloQueryResult<CountryInformationQuery>> {\n  const { country: countryGQL } = context.extendQuery(\n    customQuery,\n    {\n      country: {\n        query: countryInformation,\n        variables: { id },\n      },\n    },\n  );\n  return context.client.query<CountryInformationQuery, CountryInformationQueryVariables>({\n    query: countryGQL.query,\n    variables: countryGQL.variables,\n    context: {\n      headers: getHeaders(context),\n    },\n  });\n}\n", "import { FetchResult } from '@apollo/client/core';\nimport { CustomQuery } from '@vue-storefront/core';\nimport { GraphQLError } from 'graphql';\nimport recaptchaValidator from '../../helpers/recaptcha/recaptchaValidator';\nimport {\n  CreateCustomerMutation,\n  CreateCustomerMutationVariables,\n  CustomerCreateInput,\n} from '../../types/GraphQL';\nimport createCustomer from './createCustomer';\nimport { Context } from '../../types/context';\nimport getHeaders from '../getHeaders';\n\n/**\n * Registers a new customer. To override the default query, use the `createCustomer` query key.\n */\nexport default async (\n  context: Context,\n  input: CustomerCreateInput,\n  customQuery: CustomQuery = { createCustomer: 'createCustomer' },\n): Promise<FetchResult<CreateCustomerMutation>> => {\n  try {\n    const {\n      recaptchaToken, ...variables\n    } = input;\n\n    if (context.config.recaptcha.isEnabled) {\n      /**\n       * recaptcha token verification\n       */\n      const response = await recaptchaValidator(context, recaptchaToken);\n\n      if (!response.success) {\n        return {\n          errors: [new GraphQLError('Error during reCaptcha verification. Please try again.')],\n          data: null,\n        };\n      }\n    }\n\n    const { createCustomer: createCustomerGQL } = context.extendQuery(\n      customQuery,\n      {\n        createCustomer: {\n          query: createCustomer,\n          variables: { input: variables },\n        },\n      },\n    );\n\n    return await context.client.mutate<CreateCustomerMutation, CreateCustomerMutationVariables>({\n      mutation: createCustomerGQL.query,\n      variables: createCustomerGQL.variables,\n      context: {\n        headers: getHeaders(context),\n      },\n    });\n  } catch (error) {\n    // For error in data we don't throw 500, because it's not server error\n    if (error.graphQLErrors) {\n      return {\n        errors: error.graphQLErrors,\n        data: null,\n      };\n    }\n    throw error.networkError?.result || error;\n  }\n};\n", "import { Context } from '../../types/context';\n\ninterface RecaptchaApiResponse {\n  success: boolean,\n  challenge_ts: string,\n  hostname: string,\n  'error-codes'?: [any],\n  score?: number\n}\n\nexport default async (\n  context: Context,\n  token: string,\n): Promise<RecaptchaApiResponse> => {\n  try {\n    const { secretkey } = context.config.recaptcha;\n    const url = `https://www.google.com/recaptcha/api/siteverify?secret=${secretkey}&response=${token}`;\n\n    const result = await fetch(url);\n    const response = await result.json();\n\n    return response;\n  } catch (error) {\n    throw error.message || error;\n  }\n};\n", "import gql from 'graphql-tag';\n\nexport default gql`\n  mutation createCustomer($input: CustomerCreateInput!) {\n    createCustomerV2(input: $input) {\n      customer {\n        date_of_birth\n        default_billing\n        default_shipping\n        email\n        firstname\n        is_subscribed\n        lastname\n        middlename\n        prefix\n        suffix\n        taxvat\n        addresses {\n          city\n          country_code\n          default_billing\n          default_shipping\n          extension_attributes {\n            attribute_code\n            value\n          }\n          firstname\n          id\n          lastname\n          postcode\n          prefix\n          region {\n            region_code\n            region_id\n            region\n          }\n          street\n          suffix\n          telephone\n          vat_id\n        }\n      }\n    }\n  }\n`;\n", "import gql from 'graphql-tag';\n\n/** GraphQL Mutation that creates new customer address. */\nexport default gql`\n  mutation createCustomerAddress($input: CustomerAddressInput!) {\n    createCustomerAddress(input: $input) {\n      id\n      region {\n        region\n        region_id\n        region_code\n      }\n      country_code\n      street\n      telephone\n      postcode\n      city\n      default_shipping\n      default_billing\n      vat_id\n    }\n  }\n`;\n", "import { FetchResult } from '@apollo/client/core';\nimport { CustomQuery } from '@vue-storefront/core';\nimport createCustomerAddressMutation from './createCustomerAddress';\nimport {\n  CreateCustomerAddressMutation,\n  CreateCustomerAddressMutationVariables,\n  CustomerAddressInput,\n} from '../../types/GraphQL';\nimport { Context } from '../../types/context';\nimport getHeaders from '../getHeaders';\n\n/**\n * Creates a customer address.\n *\n * @param context VSF Context\n * @param input new customer address data\n * @param [customQuery] (optional) - custom GraphQL query that extends the default query\n */\nexport default async function createCustomerAddress(\n  context: Context,\n  input: CustomerAddressInput,\n  customQuery: CustomQuery = { createCustomerAddress: 'createCustomerAddress' },\n): Promise<FetchResult<CreateCustomerAddressMutation>> {\n  const { createCustomerAddress: createCustomerAddressGQL } = context.extendQuery(\n    customQuery,\n    {\n      createCustomerAddress: {\n        query: createCustomerAddressMutation,\n        variables: { input },\n      },\n    },\n  );\n\n  return context.client.mutate<CreateCustomerAddressMutation, CreateCustomerAddressMutationVariables>({\n    mutation: createCustomerAddressGQL.query,\n    variables: createCustomerAddressGQL.variables,\n    context: {\n      headers: getHeaders(context),\n    },\n  });\n}\n", "import gql from 'graphql-tag';\n\nexport default gql`\n  mutation createEmptyCart {\n    createEmptyCart\n  }\n`;\n", "import { FetchResult } from '@apollo/client/core';\nimport { CustomQuery } from '@vue-storefront/core';\nimport { CreateEmptyCartMutation } from '../../types/GraphQL';\nimport createEmptyCart from './createEmptyCart';\nimport { Context } from '../../types/context';\nimport getHeaders from '../getHeaders';\n\nexport default async (\n  context: Context,\n  customQuery: CustomQuery = { createEmptyCart: 'createEmptyCart' },\n): Promise<FetchResult<CreateEmptyCartMutation>> => {\n  const { createEmptyCart: createEmptyCartGQL } = context.extendQuery(\n    customQuery,\n    {\n      createEmptyCart: {\n        query: createEmptyCart,\n      },\n    },\n  );\n\n  return context.client.mutate<CreateEmptyCartMutation>({\n    mutation: createEmptyCartGQL.query,\n    context: {\n      headers: getHeaders(context),\n    },\n  });\n};\n", "import { FetchResult } from '@apollo/client/core';\nimport { CustomQuery } from '@vue-storefront/core';\nimport { GraphQLError } from 'graphql';\nimport { CreateProductReviewMutation, CreateProductReviewInput } from '../../types/GraphQL';\nimport createProductReview from './createProductReview';\nimport { Context } from '../../types/context';\nimport recaptchaValidator from '../../helpers/recaptcha/recaptchaValidator';\nimport getHeaders from '../getHeaders';\n\n/**\n * Creates a new product review\n */\nexport default async (\n  context: Context,\n  input: CreateProductReviewInput,\n  customQuery: CustomQuery = { createProductReview: 'createProductReview' },\n): Promise<FetchResult<CreateProductReviewMutation>> => {\n  const {\n    recaptchaToken, ...variables\n  } = input;\n\n  if (context.config.recaptcha.isEnabled) {\n    /**\n     * recaptcha token verification\n     */\n    const response = await recaptchaValidator(context, recaptchaToken);\n\n    if (!response.success) {\n      return {\n        errors: [new GraphQLError('Error during reCaptcha verification. Please try again.')],\n        data: null,\n      };\n    }\n  }\n\n  const { createProductReview: createProductReviewGQL } = context.extendQuery(\n    customQuery,\n    {\n      createProductReview: {\n        query: createProductReview,\n        variables: { input: variables },\n      },\n    },\n  );\n\n  return context.client.mutate<CreateProductReviewMutation, { input: CreateProductReviewInput }>({\n    mutation: createProductReviewGQL.query,\n    variables: createProductReviewGQL.variables,\n    context: {\n      headers: getHeaders(context),\n    },\n  });\n};\n", "import gql from 'graphql-tag';\n\nexport default gql`\n  mutation createProductReview($input: CreateProductReviewInput!) {\n    createProductReview(input: $input){\n      review {\n        average_rating\n        ratings_breakdown {\n          name\n          value\n        }\n        nickname\n        summary\n        text\n        created_at\n      }\n    }\n  }\n`;\n", "import gql from 'graphql-tag';\n\n/** GraphQL Query that fetches the currency information. */\nexport default gql`\n  query currency {\n    currency{\n      available_currency_codes\n      base_currency_code\n      base_currency_symbol\n      default_display_currecy_code\n      default_display_currecy_symbol\n      default_display_currency_code\n      default_display_currency_symbol\n      exchange_rates {\n        currency_to\n        rate\n      }\n    }\n  }\n`;\n", "import { ApolloQueryResult } from '@apollo/client/core';\nimport { CustomQuery } from '@vue-storefront/core';\nimport { CurrencyQuery } from '../../types/GraphQL';\nimport currencyQuery from './currency';\nimport { Context } from '../../types/context';\nimport getHeaders from '../getHeaders';\n\n/**\n * Fetches the currency information.\n *\n * @param context VSF context\n * @param [customQuery] (optional) - custom GraphQL query that extends the default query\n */\nexport default async function currency(\n  context: Context,\n  customQuery: CustomQuery = { currency: 'currency' },\n): Promise<ApolloQueryResult<CurrencyQuery>> {\n  const { currency: currencyGQL } = context.extendQuery(customQuery, {\n    currency: {\n      query: currencyQuery,\n    },\n  });\n\n  return context.client.query<CurrencyQuery>({\n    query: currencyGQL.query,\n    context: {\n      headers: getHeaders(context),\n    },\n  });\n}\n", "import gql from 'graphql-tag';\n\nexport default gql`\n  query customer {\n    customer {\n      date_of_birth\n      default_billing\n      default_shipping\n      email\n      firstname\n      is_subscribed\n      lastname\n      middlename\n      prefix\n      suffix\n      taxvat\n      addresses {\n        city\n        country_code\n        default_billing\n        default_shipping\n        extension_attributes {\n          attribute_code\n          value\n        }\n        firstname\n        id\n        lastname\n        postcode\n        prefix\n        region {\n          region_code\n          region_id\n          region\n        }\n        street\n        suffix\n        telephone\n        vat_id\n      }\n      is_subscribed\n    }\n  }\n`;\n", "import { ApolloQueryResult } from '@apollo/client/core';\nimport { CustomQuery } from '@vue-storefront/core';\nimport { CustomerQuery } from '../../types/GraphQL';\nimport customer from './customer';\nimport { Context } from '../../types/context';\nimport getHeaders from '../getHeaders';\n\n/**\n * Returns the information about the current customer. To override the default query, use the `customer` query key.\n */\nexport default async (\n  context: Context,\n  customQuery: CustomQuery = { customer: 'customer' },\n): Promise<ApolloQueryResult<CustomerQuery>> => {\n  const { customer: customerGQL } = context.extendQuery(\n    customQuery,\n    {\n      customer: {\n        query: customer,\n      },\n    },\n  );\n\n  return context.client.query<CustomerQuery>({\n    query: customerGQL.query,\n    context: {\n      headers: getHeaders(context),\n    },\n  });\n};\n", "import gql from 'graphql-tag';\n\n/** GraphQL query to get the cart of the current logged in customer */\nexport default gql`\n  query customerCart {\n    customerCart {\n      id\n      email\n      is_virtual\n      applied_coupons {\n        code\n      }\n      prices {\n        subtotal_excluding_tax {\n          value\n        },\n        subtotal_including_tax {\n          value\n        },\n        applied_taxes {\n          amount {\n            value\n          },\n          label\n        }\n        discounts {\n          amount {\n            value\n          },\n          label\n        }\n        grand_total {\n          value\n        }\n      }\n      items {\n        uid\n        product {\n          uid\n          __typename\n          sku\n          name\n          stock_status\n          only_x_left_in_stock\n          rating_summary\n          thumbnail {\n            url\n            position\n            disabled\n            label\n          }\n          url_key\n          url_rewrites {\n            url\n          }\n          price_range {\n            maximum_price {\n              final_price {\n                currency\n                value\n              }\n              regular_price {\n                currency\n                value\n              }\n            }\n            minimum_price {\n              final_price {\n                currency\n                value\n              }\n              regular_price {\n                currency\n                value\n              }\n            }\n          }\n          categories {\n            uid\n            name\n            url_suffix\n            url_path\n            breadcrumbs {\n              category_name,\n              category_url_path\n            }\n          }\n          review_count\n          reviews {\n            items {\n              average_rating\n              ratings_breakdown {\n                name\n                value\n              }\n            }\n          }\n        }\n        prices {\n          row_total {\n            value\n          }\n          row_total_including_tax {\n            value\n          }\n          total_item_discount {\n            value\n          }\n        }\n        quantity\n        ... on ConfigurableCartItem {\n          configurable_options {\n            configurable_product_option_uid\n            option_label\n            configurable_product_option_value_uid\n            value_label\n          }\n          configured_variant {\n            sku\n            thumbnail {\n              url\n            }\n          }\n        }\n        ... on BundleCartItem {\n          bundle_options {\n            uid\n            label\n            type\n            values {\n              id\n              label\n              price\n              quantity\n            }\n          }\n        }\n      }\n      total_quantity\n      shipping_addresses {\n        firstname\n        lastname\n        street\n        city\n        company\n        region {\n          code\n          region_id\n          label\n        }\n        postcode\n        telephone\n        country {\n          code\n          label\n        }\n        selected_shipping_method {\n          carrier_code\n          carrier_title\n          method_code\n          method_title\n          amount {\n            value\n            currency\n          }\n        }\n      }\n      billing_address {\n        firstname\n        lastname\n        street\n        city\n        company\n        region {\n          code\n          region_id\n          label\n        }\n        postcode\n        telephone\n        country {\n          code\n          label\n        }\n      }\n    }\n  }\n`;\n", "import { ApolloQueryResult } from '@apollo/client/core';\nimport type { CustomQuery } from '@vue-storefront/core';\nimport type { Context } from '../../types/context';\nimport type { CustomerCartQuery } from '../../types/GraphQL';\nimport customerCartQuery from './customerCart';\nimport getHeaders from '../getHeaders';\n\n/**\n * Fetches the cart of the current logged in user\n * @param context VSF context\n * @param customQuery custom GraphQL query that extends the default one\n */\nexport default async function customerCart(\n  context: Context,\n  customQuery: CustomQuery = { customerCart: 'customerCart' },\n): Promise<ApolloQueryResult<CustomerCartQuery>> {\n  const { customerCart: customerCartGQL } = context.extendQuery(\n    customQuery,\n    {\n      customerCart: {\n        query: customerCartQuery,\n      },\n    },\n  );\n\n  return context.client.query<CustomerCartQuery>({\n    query: customerCartGQL.query,\n    context: {\n      headers: getHeaders(context),\n    },\n  });\n}\n", "import gql from 'graphql-tag';\n\nexport default gql`\n  query customerOrders($currentPage: Int = 1, $filter: CustomerOrdersFilterInput = {}, $pageSize: Int = 10) {\n    customer {\n      orders(currentPage: $currentPage, filter: $filter, pageSize: $pageSize) {\n        items {\n          number\n          id\n          order_date\n          grand_total\n          total {\n            discounts {\n              amount {\n                currency\n                value\n              }\n              label\n            }\n            base_grand_total {\n              currency\n              value\n            }\n            shipping_handling {\n              amount_excluding_tax {\n                currency\n                value\n              }\n              amount_including_tax {\n                currency\n                value\n              }\n              discounts {\n                amount {\n                  currency\n                  value\n                }\n              }\n              taxes {\n                amount{\n                  currency\n                  value\n                }\n                rate\n                title\n              }\n              total_amount {\n                currency\n                value\n              }\n            }\n            subtotal {\n              currency\n              value\n            }\n            taxes {\n              amount {\n                currency\n                value\n              }\n              rate\n              title\n            }\n            total_shipping {\n              currency\n              value\n            }\n            total_tax {\n              currency\n              value\n            }\n          }\n          status\n          comments {\n            message\n            timestamp\n          }\n          invoices {\n            comments {\n              message\n              timestamp\n            }\n            id\n            items {\n              discounts {\n                amount {\n                  currency\n                  value\n                }\n                label\n              }\n              id\n              product_name\n              product_sale_price {\n                currency\n                value\n              }\n              product_sku\n              quantity_invoiced\n            }\n            number\n            total {\n              discounts {\n                amount {\n                  currency\n                  value\n                }\n                label\n              }\n              base_grand_total {\n                currency\n                value\n              }\n              shipping_handling {\n                amount_excluding_tax {\n                  currency\n                  value\n                }\n                amount_including_tax {\n                  currency\n                  value\n                }\n                discounts {\n                  amount {\n                    currency\n                    value\n                  }\n                }\n                taxes {\n                  amount{\n                    currency\n                    value\n                  }\n                  rate\n                  title\n                }\n                total_amount {\n                  currency\n                  value\n                }\n              }\n              subtotal {\n                currency\n                value\n              }\n              taxes {\n                amount {\n                  currency\n                  value\n                }\n                rate\n                title\n              }\n              total_shipping {\n                currency\n                value\n              }\n              total_tax {\n                currency\n                value\n              }\n            }\n          }\n          items {\n            discounts {\n              amount {\n                currency\n                value\n              }\n              label\n            }\n            entered_options {\n              label\n              value\n            }\n            id\n            product_name\n            product_sale_price {\n              currency\n              value\n            }\n            product_sku\n            product_type\n            product_url_key\n            quantity_canceled\n            quantity_invoiced\n            quantity_ordered\n            quantity_refunded\n            quantity_returned\n            quantity_shipped\n            selected_options {\n              label\n              value\n            }\n            status\n          }\n          payment_methods {\n            name\n            type\n            additional_data {\n              name\n              value\n            }\n          }\n          shipments {\n            comments {\n              message\n              timestamp\n            }\n            id\n            number\n            tracking {\n              carrier\n              number\n              title\n            }\n            items {\n              id\n              product_name\n              product_sale_price {\n                currency\n                value\n              }\n              product_sku\n              quantity_shipped\n            }\n          }\n          shipping_address {\n            city\n            country_code\n            firstname\n            lastname\n            postcode\n            prefix\n            region\n            street\n            suffix\n            telephone\n          }\n          billing_address {\n            city\n            country_code\n            firstname\n            lastname\n            postcode\n            prefix\n            region\n            street\n            suffix\n            telephone\n          }\n          shipping_method\n        }\n        page_info {\n            current_page\n            total_pages\n            page_size\n        }\n        total_count\n      }\n    }\n  }\n`;\n", "import { ApolloQueryResult } from '@apollo/client/core';\nimport { CustomQuery } from '@vue-storefront/core';\nimport {\n  CustomerOrdersFilterInput,\n  CustomerOrdersQuery,\n  CustomerOrdersQueryVariables,\n} from '../../types/GraphQL';\nimport customerOrdersQuery from './customerOrders';\nimport { Context } from '../../types/context';\nimport { GetOrdersSearchParams } from '../../types/API';\nimport getHeaders from '../getHeaders';\n\ntype Variables = {\n  pageSize: number;\n  currentPage: number;\n  filter?: CustomerOrdersFilterInput;\n};\n\n/**\n * Returns customer orders. To override the default query, use the `customerOrders` query key.\n */\nexport default async (\n  context: Context,\n  searchParams: GetOrdersSearchParams,\n  customQuery: CustomQuery = { customerOrders: 'customerOrders' },\n): Promise<ApolloQueryResult<CustomerOrdersQuery>> => {\n  const defaultParams = {\n    pageSize: 10,\n    currentPage: 1,\n    ...searchParams,\n  };\n\n  const variables: Variables = {\n    pageSize: defaultParams.pageSize <= 0 ? 10 : defaultParams.pageSize,\n    currentPage: defaultParams.currentPage <= 0 ? 1 : defaultParams.currentPage,\n  };\n\n  if (defaultParams.filter) variables.filter = defaultParams.filter;\n\n  const { customerOrders } = context.extendQuery(customQuery, {\n    customerOrders: {\n      query: customerOrdersQuery,\n      variables,\n    },\n  });\n\n  try {\n    return await context.client.query<CustomerOrdersQuery, CustomerOrdersQueryVariables>({\n      query: customerOrders.query,\n      variables: customerOrders.variables,\n      context: {\n        headers: getHeaders(context),\n      },\n    });\n  } catch (error) {\n    throw error.graphQLErrors?.[0].message || error.networkError?.result || error;\n  }\n};\n", "import gql from 'graphql-tag';\n\nexport default gql`\n  query customerProductReview($pageSize: Int = 10, $currentPage: Int = 1) {\n    customer {\n        reviews(pageSize: $pageSize, currentPage: $currentPage) {\n          items {\n            average_rating\n            ratings_breakdown {\n              name\n              value\n            }\n            nickname\n            summary\n            text\n            created_at\n            product {\n              name\n              uid\n            }\n          }\n          page_info {\n            current_page\n            page_size\n            total_pages\n          }\n        }\n    }\n  }\n`;\n", "import { ApolloQueryResult } from '@apollo/client/core';\nimport { CustomQuery } from '@vue-storefront/core';\nimport {\n  CustomerProductReviewQuery,\n  CustomerProductReviewQueryVariables,\n} from '../../types/GraphQL';\nimport customerProductReview from './customerProductReview';\nimport { Context } from '../../types/context';\nimport getHeaders from '../getHeaders';\n\nexport type CustomerProductReviewParams = {\n  pageSize: number;\n  currentPage: number;\n};\n\n/**\n * Returns product reviews created by the current customer\n */\nexport default async (\n  context: Context,\n  searchParams?: CustomerProductReviewParams,\n  customQuery: CustomQuery = { reviews: 'reviews' },\n): Promise<ApolloQueryResult<CustomerProductReviewQuery>> => {\n  const defaultParams = {\n    pageSize: 10,\n    currentPage: 1,\n  };\n\n  const variables: CustomerProductReviewParams = {\n    pageSize: defaultParams.pageSize,\n    currentPage: defaultParams.currentPage,\n  };\n\n  const { reviews } = context.extendQuery(customQuery, {\n    reviews: {\n      query: customerProductReview,\n      variables,\n    },\n  });\n\n  try {\n    return await context.client.query<CustomerProductReviewQuery, CustomerProductReviewQueryVariables>({\n      query: reviews.query,\n      variables: reviews.variables,\n      context: {\n        headers: getHeaders(context),\n      },\n    });\n  } catch (error) {\n    throw error.graphQLErrors?.[0].message || error.networkError?.result || error;\n  }\n};\n", "import gql from 'graphql-tag';\nimport { FetchPolicy, FetchResult } from '@apollo/client/core';\nimport { Context } from '../../types/context';\nimport getHeaders from '../getHeaders';\n\nexport default async <MUTATION = any, MUTATION_VARIABLES = any>(\n  context: Context,\n  {\n    mutation,\n    mutationVariables,\n    fetchPolicy,\n  }: {\n    mutation: string,\n    mutationVariables: MUTATION_VARIABLES,\n    fetchPolicy?: Extract<FetchPolicy, 'network-only' | 'no-cache'>,\n  },\n): Promise<FetchResult<MUTATION>> => context.client.mutate<MUTATION, MUTATION_VARIABLES>({\n  mutation: gql`${mutation}`,\n  variables: { ...mutationVariables },\n  fetchPolicy: fetchPolicy || 'no-cache',\n  context: {\n    headers: getHeaders(context),\n  },\n});\n", "import gql from 'graphql-tag';\nimport { ApolloQueryResult, FetchPolicy } from '@apollo/client/core';\nimport { Context } from '../../types/context';\nimport getHeaders from '../getHeaders';\n\nexport default async <QUERY = any, QUERY_VARIABLES = any>(\n  context: Context,\n  {\n    query,\n    queryVariables,\n    fetchPolicy,\n  }: {\n    query: string,\n    queryVariables?: QUERY_VARIABLES,\n    fetchPolicy?: FetchPolicy,\n  },\n): Promise<ApolloQueryResult<QUERY>> => context.client.query<QUERY, QUERY_VARIABLES>({\n  query: gql`${query}`,\n  variables: { ...queryVariables },\n  fetchPolicy: fetchPolicy || 'no-cache',\n  context: {\n    headers: getHeaders(context),\n  },\n});\n", "import gql from 'graphql-tag';\n\n/** GraphQL Mutation that deletes a customer address. */\nexport default gql`\n  mutation deleteCustomerAddress($id: Int!) {\n    deleteCustomerAddress(id: $id)\n  }\n`;\n", "import { ExecutionResult } from 'graphql';\nimport { CustomQuery } from '@vue-storefront/core';\nimport deleteCustomerAddressMutation from './deleteCustomerAddress';\nimport { Context } from '../../types/context';\nimport { DeleteCustomerAddressMutation, DeleteCustomerAddressMutationVariables } from '../../types/GraphQL';\nimport getHeaders from '../getHeaders';\n\n/**\n * Deletes a customer address.\n *\n * @param context VSF Context\n * @param addressId ID of the customer address to delete\n * @param customQuery (optional) - custom GraphQL query that extends the default query\n */\nexport default async function deleteCustomerAddress(\n  context: Context,\n  addressId: number,\n  customQuery: CustomQuery = { deleteCustomerAddress: 'deleteCustomerAddress' },\n): Promise<ExecutionResult<DeleteCustomerAddressMutation>> {\n  const { deleteCustomerAddress: deleteCustomerAddressGQL } = context.extendQuery(\n    customQuery,\n    {\n      deleteCustomerAddress: {\n        query: deleteCustomerAddressMutation,\n        variables: { id: addressId },\n      },\n    },\n  );\n\n  return context.client.mutate<DeleteCustomerAddressMutation, DeleteCustomerAddressMutationVariables>({\n    mutation: deleteCustomerAddressGQL.query,\n    variables: deleteCustomerAddressGQL.variables,\n    context: {\n      headers: getHeaders(context),\n    },\n  });\n}\n", "import { FetchResult } from '@apollo/client/core';\nimport { CustomQuery } from '@vue-storefront/core';\nimport { GraphQLError } from 'graphql';\nimport recaptchaValidator from '../../helpers/recaptcha/recaptchaValidator';\nimport generateCustomerToken from './generateCustomerToken';\nimport {\n  GenerateCustomerTokenMutation,\n  GenerateCustomerTokenMutationVariables,\n} from '../../types/GraphQL';\nimport { Context } from '../../types/context';\nimport getHeaders from '../getHeaders';\n\n/**\n * Logs in the customer based on provided username and password. To override the default query, use the `generateCustomerToken` query key.\n */\nexport default async (\n  context: Context,\n  params: {\n    email: string;\n    password: string;\n    recaptchaToken: string;\n  },\n  customQuery: CustomQuery = { generateCustomerToken: 'generateCustomerToken' },\n): Promise<FetchResult<GenerateCustomerTokenMutation>> => {\n  try {\n    if (context.config.recaptcha.isEnabled) {\n      /**\n       * recaptcha token verification\n       */\n      const response = await recaptchaValidator(context, params.recaptchaToken);\n\n      if (!response.success) {\n        return {\n          errors: [new GraphQLError('Error during reCaptcha verification. Please try again.')],\n          data: null,\n        };\n      }\n    }\n\n    const { generateCustomerToken: generateCustomerTokenGQL } = context.extendQuery(\n      customQuery,\n      {\n        generateCustomerToken: {\n          query: generateCustomerToken,\n          variables: {\n            email: params.email,\n            password: params.password,\n          },\n        },\n      },\n    );\n\n    return await context.client.mutate<GenerateCustomerTokenMutation, GenerateCustomerTokenMutationVariables>(\n      {\n        mutation: generateCustomerTokenGQL.query,\n        variables: generateCustomerTokenGQL.variables,\n        context: {\n          headers: getHeaders(context),\n        },\n      },\n    );\n  } catch (error) {\n    // For error in data we don't throw 500, because it's not server error\n    if (error.graphQLErrors) {\n      return {\n        errors: error.graphQLErrors,\n        data: null,\n      };\n    }\n    throw error.networkError?.result || error;\n  }\n};\n", "import gql from 'graphql-tag';\n\nexport default gql`\n  mutation generateCustomerToken($email: String!, $password: String!) {\n    generateCustomerToken(email: $email, password: $password) {\n      token\n    }\n  }\n`;\n", "import gql from 'graphql-tag';\n\nexport default gql`\n  query CustomerAvailablePaymentMethods {\n    customerCart {\n      available_payment_methods {\n        code\n        title\n      }\n    }\n  }\n`;\n", "import { ApolloQueryResult } from '@apollo/client/core';\nimport { CustomQuery } from '@vue-storefront/core';\nimport { Context } from '../../types/context';\nimport CustomerAvailablePaymentMethods from './CustomerPaymentMethods';\nimport { CustomerAvailablePaymentMethodsQuery } from '../../types/GraphQL';\nimport getHeaders from '../getHeaders';\n\nexport default async (\n  context: Context,\n  params: {\n    cartId: string;\n  },\n  customQuery: CustomQuery = { paymentMethods: 'paymentMethods' },\n): Promise<ApolloQueryResult<CustomerAvailablePaymentMethodsQuery>> => {\n  const { paymentMethods } = context.extendQuery(\n    customQuery,\n    {\n      paymentMethods: {\n        query: CustomerAvailablePaymentMethods,\n      },\n    },\n  );\n\n  try {\n    return await context.client.query<CustomerAvailablePaymentMethodsQuery>({\n      query: paymentMethods.query,\n      context: {\n        headers: getHeaders(context),\n      },\n\n    });\n  } catch (error) {\n    throw error.graphQLErrors?.[0].message || error.networkError?.result || error;\n  }\n};\n", "import gql from 'graphql-tag';\n\n/** GraphQL Query that retrieves a user's shipping methods */\nexport default gql`\n  query CustomerAvailableShippingMethods {\n    customerCart {\n      shipping_addresses {\n        available_shipping_methods {\n          amount {\n            currency\n            value\n          }\n          available\n          carrier_code\n          carrier_title\n          error_message\n          method_code\n          method_title\n          price_excl_tax {\n            currency\n            value\n          }\n          price_incl_tax {\n            currency\n            value\n          }\n        }\n      }\n    }\n  }\n`;\n", "import { ApolloQueryResult } from '@apollo/client/core';\nimport { CustomQuery } from '@vue-storefront/core';\n\nimport { Context } from '../../types/context';\nimport CustomerAvailableShippingMethods from './CustomerShippingMethods';\nimport {\n  CustomerAvailableShippingMethodsQuery,\n} from '../../types/GraphQL';\nimport getHeaders from '../getHeaders';\n\n/**\n * Retrive available shipping methods for current customer\n * @param context VSF Context\n * @param [customQuery] (optional) - custom GraphQL query that extends the default one\n */\nexport default async function getAvailableCustomerShippingMethods(\n  context: Context,\n  customQuery: CustomQuery = { shippingMethods: 'shippingMethods' },\n): Promise<ApolloQueryResult<CustomerAvailableShippingMethodsQuery>> {\n  const { shippingMethods } = context.extendQuery(\n    customQuery,\n    {\n      shippingMethods: {\n        query: CustomerAvailableShippingMethods,\n      },\n    },\n  );\n\n  try {\n    return await context.client.query<CustomerAvailableShippingMethodsQuery>({\n      query: shippingMethods.query,\n      context: {\n        headers: getHeaders(context),\n      },\n    });\n  } catch (error) {\n    throw error.graphQLErrors?.[0].message || error.networkError?.result || error;\n  }\n}\n", "import gql from 'graphql-tag';\n\n/** GraphQL Query that fetches available payment methods for received cart. */\nexport default gql`\n  query GuestAvailablePaymentMethods($cartId: String!) {\n    cart(cart_id: $cartId) {\n      available_payment_methods {\n        code\n        title\n      }\n    }\n  }\n`;\n", "import { ApolloQueryResult } from '@apollo/client/core';\nimport { CustomQuery } from '@vue-storefront/core';\nimport { Context } from '../../types/context';\nimport GuestAvailablePaymentMethods from './GuestAvailablePaymentMethods';\nimport type { GuestAvailablePaymentMethodsQuery, GuestAvailablePaymentMethodsQueryVariables } from '../../types/GraphQL';\nimport getHeaders from '../getHeaders';\n\n/**\n * Fetches the available payment methods for the received cart.\n *\n * @param context VSF context\n * @param params params containing the cart's ID\n * @param [customQuery] (optional) - custom GraphQL query that extends the default query\n */\nexport default async function getAvailablePaymentMethods(\n  context: Context,\n  params: {\n    cartId: string;\n  },\n  customQuery: CustomQuery = { paymentMethods: 'paymentMethods' },\n): Promise<ApolloQueryResult<GuestAvailablePaymentMethodsQuery>> {\n  const defaultVariables = {\n    cartId: params.cartId || '',\n  };\n\n  const { paymentMethods } = context.extendQuery(customQuery, {\n    paymentMethods: {\n      query: GuestAvailablePaymentMethods,\n      variables: defaultVariables,\n    },\n  });\n\n  try {\n    return await context.client.query<GuestAvailablePaymentMethodsQuery, GuestAvailablePaymentMethodsQueryVariables>({\n      query: paymentMethods.query,\n      variables: paymentMethods.variables,\n      context: {\n        headers: getHeaders(context),\n      },\n    });\n  } catch (error) {\n    throw error.graphQLErrors?.[0].message || error.networkError?.result || error;\n  }\n}\n", "import gql from 'graphql-tag';\n\nexport default gql`\n  query GuestAvailableShippingMethods($cartId: String!) {\n    cart(cart_id:$cartId) {\n      shipping_addresses {\n        available_shipping_methods {\n          amount {\n            currency\n            value\n          }\n          available\n          carrier_code\n          carrier_title\n          error_message\n          method_code\n          method_title\n          price_excl_tax {\n            currency\n            value\n          }\n          price_incl_tax {\n            currency\n            value\n          }\n        }\n      }\n    }\n  }\n`;\n", "import { ApolloQueryResult } from '@apollo/client/core';\nimport { CustomQuery } from '@vue-storefront/core';\nimport { Context } from '../../types/context';\nimport GuestAvailableShippingMethods from './GuestAvailableShippingMethods';\nimport {\n  GuestAvailableShippingMethodsQuery,\n  GuestAvailableShippingMethodsQueryVariables,\n} from '../../types/GraphQL';\nimport getHeaders from '../getHeaders';\n\nexport default async (\n  context: Context,\n  params: {\n    cartId: string;\n  },\n  customQuery: CustomQuery = { shippingMethods: 'shippingMethods' },\n): Promise<ApolloQueryResult<GuestAvailableShippingMethodsQuery>> => {\n  const { shippingMethods } = context.extendQuery(\n    customQuery,\n    {\n      shippingMethods: {\n        query: GuestAvailableShippingMethods,\n        variables: { ...params },\n      },\n    },\n  );\n\n  try {\n    return await context.client.query<GuestAvailableShippingMethodsQuery,\n    GuestAvailableShippingMethodsQueryVariables>({\n      query: shippingMethods.query,\n      variables: shippingMethods.variables,\n      context: {\n        headers: getHeaders(context),\n      },\n    });\n  } catch (error) {\n    throw error.graphQLErrors?.[0].message || error.networkError?.result || error;\n  }\n};\n", "import gql from 'graphql-tag';\n\n/** GraphQL Query that fetches customer addresses. */\nexport default gql`\n  query getCustomerAddresses {\n    customer {\n      addresses {\n        city\n        country_code\n        default_billing\n        default_shipping\n        extension_attributes {\n          attribute_code\n          value\n        }\n        firstname\n        id\n        lastname\n        postcode\n        prefix\n        region {\n          region_code\n          region_id\n          region\n        }\n        street\n        suffix\n        telephone\n        vat_id\n      }\n    }\n  }\n`;\n", "import { ApolloQueryResult } from '@apollo/client/core';\nimport { CustomQuery } from '@vue-storefront/core';\nimport { GetCustomerAddressesQuery } from '../../types/GraphQL';\nimport getCustomerAddressesQuery from './getCustomerAddresses';\nimport { Context } from '../../types/context';\nimport getHeaders from '../getHeaders';\n\n/**\n * Fetches customer addresses.\n *\n * @param context - VSF Context\n * @param [customQuery] - (optional) - custom GraphQL query that extends the default query\n */\nexport default async function getCustomerAddresses(\n  context: Context,\n  customQuery: CustomQuery = { getCustomerAddresses: 'getCustomerAddresses' },\n): Promise<ApolloQueryResult<GetCustomerAddressesQuery>> {\n  const { getCustomerAddresses: getCustomerAddressesGQL } = context.extendQuery(customQuery, {\n    getCustomerAddresses: {\n      query: getCustomerAddressesQuery,\n    },\n  });\n\n  try {\n    return await context.client.query<GetCustomerAddressesQuery>({\n      query: getCustomerAddressesGQL.query,\n      context: {\n        headers: getHeaders(context),\n      },\n    });\n  } catch (error) {\n    throw error.graphQLErrors?.[0].message || error.networkError?.result || error;\n  }\n}\n", "import gql from 'graphql-tag';\n\nexport default gql`\n  mutation mergeCarts($sourceCartId: String!, $destinationCartId: String!) {\n    mergeCarts(source_cart_id: $sourceCartId, destination_cart_id: $destinationCartId) {\n      id\n      email\n      is_virtual\n      applied_coupons {\n        code\n      }\n      prices {\n        subtotal_excluding_tax {\n          value\n        },\n        subtotal_including_tax {\n          value\n        },\n        applied_taxes {\n          amount {\n            value\n          },\n          label\n        }\n        discounts {\n          amount {\n            value\n          },\n          label\n        }\n        grand_total {\n          value\n        }\n      }\n      items {\n        uid\n        product {\n          uid\n          __typename\n          sku\n          name\n          stock_status\n          only_x_left_in_stock\n          rating_summary\n          thumbnail {\n            url\n            position\n            disabled\n            label\n          }\n          url_key\n          url_rewrites {\n            url\n          }\n          price_range {\n            maximum_price {\n              final_price {\n                currency\n                value\n              }\n              regular_price {\n                currency\n                value\n              }\n            }\n            minimum_price {\n              final_price {\n                currency\n                value\n              }\n              regular_price {\n                currency\n                value\n              }\n            }\n          }\n          categories {\n            uid\n            name\n            url_suffix\n            url_path\n            breadcrumbs {\n              category_name,\n              category_url_path\n            }\n          }\n          review_count\n          reviews {\n            items {\n              average_rating\n              ratings_breakdown {\n                name\n                value\n              }\n            }\n          }\n        }\n        prices {\n          row_total {\n            value\n          }\n          row_total_including_tax {\n            value\n          }\n          total_item_discount {\n            value\n          }\n        }\n        quantity\n        ... on ConfigurableCartItem {\n          configurable_options {\n            configurable_product_option_uid\n            option_label\n            configurable_product_option_value_uid\n            value_label\n          }\n          configured_variant {\n            sku\n            thumbnail {\n              url\n            }\n          }\n        }\n        ... on BundleCartItem {\n          bundle_options {\n            uid\n            label\n            type\n            values {\n              id\n              label\n              price\n              quantity\n            }\n          }\n        }\n      }\n      total_quantity\n      shipping_addresses {\n        firstname\n        lastname\n        street\n        city\n        company\n        region {\n          code\n          region_id\n          label\n        }\n        postcode\n        telephone\n        country {\n          code\n          label\n        }\n        selected_shipping_method {\n          carrier_code\n          carrier_title\n          method_code\n          method_title\n          amount {\n            value\n            currency\n          }\n        }\n      }\n      billing_address {\n        firstname\n        lastname\n        street\n        city\n        company\n        region {\n          code\n          region_id\n          label\n        }\n        postcode\n        telephone\n        country {\n          code\n          label\n        }\n      }\n    }\n  }\n`;\n", "import { FetchResult } from '@apollo/client/core';\nimport { CustomQuery } from '@vue-storefront/core';\nimport mergeCarts from './mergeCarts';\nimport { MergeCartsMutation, MergeCartsMutationVariables } from '../../types/GraphQL';\nimport { Context } from '../../types/context';\nimport getHeaders from '../getHeaders';\n\nexport default async (\n  context: Context,\n  params: {\n    sourceCartId: string;\n    destinationCartId: string;\n  },\n  customQuery: CustomQuery = { mergeCarts: 'mergeCarts' },\n): Promise<FetchResult<MergeCartsMutation>> => {\n  const { mergeCarts: mergeCartsGQL } = context.extendQuery(\n    customQuery,\n    {\n      mergeCarts: {\n        query: mergeCarts,\n        variables: {\n          sourceCartId: params.sourceCartId,\n          destinationCartId: params.destinationCartId,\n        },\n      },\n    },\n  );\n\n  return context.client.mutate<MergeCartsMutation, MergeCartsMutationVariables>({\n    mutation: mergeCartsGQL.query,\n    variables: mergeCartsGQL.variables,\n    context: {\n      headers: getHeaders(context),\n    },\n  });\n};\n", "import gql from 'graphql-tag';\n\n/** GraphQL Mutatiion that places an order. */\nexport default gql`\n  mutation placeOrder($input: PlaceOrderInput) {\n    placeOrder(input: $input) {\n      order {\n        order_number\n      }\n    }\n  }\n`;\n", "import { FetchResult } from '@apollo/client/core';\nimport { CustomQuery } from '@vue-storefront/core';\nimport placeOrderMutation from './placeOrder';\nimport { PlaceOrderInput, PlaceOrderMutation, PlaceOrderMutationVariables } from '../../types/GraphQL';\nimport { Context } from '../../types/context';\nimport getHeaders from '../getHeaders';\n\n/**\n * Places an order for received cart.\n *\n * @param context VSF Context\n * @param input the order's input, containing the cart's ID\n * @param [customQuery] (optional) - custom GraphQL query that extends the default query\n */\nexport default async function placeOrder(\n  context: Context,\n  input: PlaceOrderInput,\n  customQuery: CustomQuery = { placeOrder: 'placeOrder' },\n): Promise<FetchResult<PlaceOrderMutation>> {\n  const { placeOrder: placeOrderGQL } = context.extendQuery(customQuery, {\n    placeOrder: {\n      query: placeOrderMutation,\n      variables: { input },\n    },\n  });\n\n  try {\n    return await context.client.mutate<PlaceOrderMutation, PlaceOrderMutationVariables>({\n      mutation: placeOrderGQL.query,\n      variables: placeOrderGQL.variables,\n      context: {\n        headers: getHeaders(context),\n      },\n    });\n  } catch (error) {\n    throw error.graphQLErrors?.[0].message || error.networkError?.result || error;\n  }\n}\n", "import { CustomQuery, Logger } from '@vue-storefront/core';\nimport type { ApolloQueryResult } from '@apollo/client/core';\nimport productDetailsQuery from './productDetailsQuery';\nimport type {\n  ProductAttributeFilterInput,\n  ProductAttributeSortInput,\n  ProductDetailsQuery,\n  ProductDetailsQueryVariables,\n} from '../../types/GraphQL';\nimport type { Context } from '../../types/context';\nimport type { GetProductSearchParams } from '../../types/API';\nimport getHeaders from '../getHeaders';\n\ntype Variables = {\n  pageSize: number;\n  currentPage: number;\n  search?: string;\n  filter?: ProductAttributeFilterInput;\n  sort?: ProductAttributeSortInput;\n};\n\n/**\n * Fetches the list of products with details using sort, filters and pagination.\n *\n * @param context VSF context\n * @param searchParams params with sort, filters and pagination\n * @param [customQuery] (optional) - custom GraphQL query that extends the default query\n */\nexport default async function productDetail(\n  context: Context,\n  searchParams?: GetProductSearchParams,\n  customQuery: CustomQuery = { productDetail: 'productDetail' },\n): Promise<ApolloQueryResult<ProductDetailsQuery>> {\n  const defaultParams = {\n    pageSize: 10,\n    currentPage: 1,\n    ...searchParams,\n  };\n\n  const variables: Variables = {\n    ...defaultParams,\n    pageSize: defaultParams.pageSize,\n    currentPage: defaultParams.currentPage,\n  };\n\n  if (defaultParams.search) variables.search = defaultParams.search;\n\n  if (defaultParams.filter) variables.filter = defaultParams.filter;\n\n  if (defaultParams.sort) variables.sort = defaultParams.sort;\n\n  const { productDetail: productDetailGQL } = context.extendQuery(customQuery, {\n    productDetail: {\n      query: productDetailsQuery,\n      variables,\n    },\n  });\n\n  try {\n    const result = await context.client.query<ProductDetailsQuery, ProductDetailsQueryVariables>({\n      query: productDetailGQL.query,\n      variables: productDetailGQL.variables,\n      context: {\n        headers: getHeaders(context),\n      },\n    });\n\n    if (result.data.products.items.length === 0) throw new Error('No products found');\n\n    return result;\n  } catch (error) {\n    // For error in data we don't throw 500, because it's not server error\n    if (error.graphQLErrors) {\n      Logger.debug(error);\n\n      return {\n        ...error,\n        errors: error.graphQLErrors,\n        data: null,\n      };\n    }\n    Logger.error(error);\n    throw error.networkError?.result || error;\n  }\n}\n", "import gql from 'graphql-tag';\n\n/**\n * GraphQL Query that fetches the list of products with details using sort,\n * filters and pagination.\n */\nexport default gql`\n  query productDetails(\n    $search: String = \"\",\n    $filter: ProductAttributeFilterInput,\n    $pageSize: Int = 10,\n    $currentPage: Int = 1,\n    $sort: ProductAttributeSortInput\n  ) {\n    products(search: $search, filter: $filter, sort: $sort, pageSize: $pageSize, currentPage: $currentPage) {\n      items {\n        uid\n        sku\n        name\n        stock_status\n        only_x_left_in_stock\n        thumbnail {\n          url\n          position\n          disabled\n          label\n        }\n        url_key\n        url_rewrites {\n          url\n        }\n        categories {\n          uid\n          name\n          url_suffix\n          url_path\n          breadcrumbs {\n            category_name,\n            category_url_path\n          }\n        }\n        rating_summary\n        review_count\n        reviews {\n          items {\n            average_rating\n            ratings_breakdown {\n              name\n              value\n            }\n          }\n        }\n        small_image {\n          url\n          position\n          disabled\n          label\n        }\n        image {\n          url\n          position\n          disabled\n          label\n        }\n        media_gallery {\n          url\n          position\n          disabled\n          label\n        }\n        thumbnail {\n          url\n          position\n          disabled\n          label\n        }\n        url_key\n        url_rewrites {\n          url\n        }\n        meta_description\n        meta_keyword\n        meta_title\n        description {\n          html\n        }\n        short_description {\n          html\n        }\n        options_container\n        special_to_date\n        ... on ConfigurableProduct {\n          configurable_options {\n            attribute_code\n            attribute_uid\n            label\n            position\n            uid\n            use_default\n            values {\n              label\n              swatch_data {\n                value\n              }\n              uid\n            }\n          }\n        }\n\n        ... on DownloadableProduct {\n          downloadable_product_samples {\n            sample_url\n            title\n          }\n          downloadable_product_links {\n            id\n            price\n            title\n            uid\n          }\n        }\n        ... on VirtualProduct {\n          gift_message_available\n          product_links {\n            link_type\n            linked_product_sku\n            linked_product_type\n            position\n            sku\n          }\n        }\n        ... on GroupedProduct {\n          items {\n            position\n            qty\n            product {\n              uid\n              sku\n              name\n              stock_status\n              only_x_left_in_stock\n              price_range {\n                maximum_price {\n                  final_price {\n                    currency\n                    value\n                  }\n                  regular_price {\n                    currency\n                    value\n                  }\n                }\n                minimum_price {\n                  final_price {\n                    currency\n                    value\n                  }\n                  regular_price {\n                    currency\n                    value\n                  }\n                }\n              }\n              thumbnail {\n                url\n                position\n                disabled\n                label\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n`;\n", "import gql from 'graphql-tag';\n\nexport default gql`\n  query productReview($search: String = \"\", $filter: ProductAttributeFilterInput, $pageSize: Int = 10, $currentPage: Int = 1, $sort: ProductAttributeSortInput) {\n    products(search: $search, filter: $filter, sort: $sort) {\n      items {\n        review_count\n        reviews(pageSize: $pageSize, currentPage: $currentPage) {\n          items {\n            average_rating\n            ratings_breakdown {\n              name\n              value\n            }\n            product {\n              name\n              uid\n            }\n            nickname\n            summary\n            text\n            created_at\n          }\n          page_info {\n            current_page\n            page_size\n            total_pages\n          }\n        }\n      }\n    }\n  }\n`;\n", "import { ApolloQueryResult } from '@apollo/client/core';\nimport { CustomQuery } from '@vue-storefront/core';\nimport {\n  ProductAttributeFilterInput,\n  ProductAttributeSortInput,\n  ProductReviewQuery,\n  ProductReviewQueryVariables,\n} from '../../types/GraphQL';\nimport productReview from './productReview';\nimport { Context } from '../../types/context';\nimport { GetProductSearchParams } from '../../types/API';\nimport getHeaders from '../getHeaders';\n\ntype Variables = {\n  pageSize: number;\n  currentPage: number;\n  search?: string;\n  filter?: ProductAttributeFilterInput;\n  sort?: ProductAttributeSortInput;\n};\n\n/**\n * Returns reviews of the provided product\n */\nexport default async (\n  context: Context,\n  searchParams?: GetProductSearchParams,\n  customQuery: CustomQuery = { productReview: 'productReview' },\n): Promise<ApolloQueryResult<ProductReviewQuery>> => {\n  const defaultParams = {\n    pageSize: 10,\n    currentPage: 1,\n    ...searchParams,\n  };\n\n  const variables: Variables = {\n    pageSize: defaultParams.pageSize,\n    currentPage: defaultParams.currentPage,\n  };\n\n  if (defaultParams.search) variables.search = defaultParams.search;\n\n  if (defaultParams.filter) variables.filter = defaultParams.filter;\n\n  if (defaultParams.sort) variables.sort = defaultParams.sort;\n\n  const { productReview: productReviewGQL } = context.extendQuery(customQuery, {\n    productReview: {\n      query: productReview,\n      variables,\n    },\n  });\n\n  try {\n    return await context.client.query<ProductReviewQuery, ProductReviewQueryVariables>({\n      query: productReviewGQL.query,\n      variables: productReviewGQL.variables,\n      context: {\n        headers: getHeaders(context),\n      },\n    });\n  } catch (error) {\n    throw error.graphQLErrors?.[0].message || error.networkError?.result || error;\n  }\n};\n", "import gql from 'graphql-tag';\n\nexport default gql`\n  query productReviewRatingsMetadata{\n    productReviewRatingsMetadata {\n      items {\n        id\n        name\n        values {\n          value_id\n          value\n        }\n      }\n    }\n  }\n`;\n", "import { ApolloQueryResult } from '@apollo/client/core';\nimport { CustomQuery } from '@vue-storefront/core';\nimport { ProductReviewRatingsMetadataQuery } from '../../types/GraphQL';\nimport productReviewRatingsMetadata from './productReviewRatingsMetadata';\nimport { Context } from '../../types/context';\nimport getHeaders from '../getHeaders';\n\n/**\n * Returns additional product reviews data\n */\nexport default async (\n  context: Context,\n  customQuery: CustomQuery = { productReviewRatingsMetadata: 'productReviewRatingsMetadata' },\n): Promise<ApolloQueryResult<ProductReviewRatingsMetadataQuery>> => {\n  const { productReviewRatingsMetadata: productReviewRatingsMetadataGQL } = context.extendQuery(\n    customQuery,\n    {\n      productReviewRatingsMetadata: {\n        query: productReviewRatingsMetadata,\n      },\n    },\n  );\n\n  return context.client.query<ProductReviewRatingsMetadataQuery>({\n    query: productReviewRatingsMetadataGQL.query,\n    context: {\n      headers: getHeaders(context),\n    },\n  });\n};\n", "import gql from 'graphql-tag';\n\n/**\n * GraphQL Query that fetches products using received search term and the params\n * for filter, sort and pagination.\n */\nexport default gql`\n  query productsList($search: String = \"\", $filter: ProductAttributeFilterInput, $pageSize: Int = 10, $currentPage: Int = 1, $sort: ProductAttributeSortInput) {\n    products(search: $search, filter: $filter, pageSize: $pageSize, currentPage: $currentPage, sort: $sort) {\n      aggregations {\n        attribute_code\n        label\n        options {\n          label\n          value\n          count\n        }\n      }\n      items {\n        uid\n        sku\n        name\n        stock_status\n        only_x_left_in_stock\n        rating_summary\n        thumbnail {\n          url\n          position\n          disabled\n          label\n        }\n        url_key\n        url_rewrites {\n          url\n        }\n        price_range {\n          maximum_price {\n            final_price {\n              currency\n              value\n            }\n            regular_price {\n              currency\n              value\n            }\n          }\n          minimum_price {\n            final_price {\n              currency\n              value\n            }\n            regular_price {\n              currency\n              value\n            }\n          }\n        }\n        categories {\n          uid\n          name\n          url_suffix\n          url_path\n          breadcrumbs {\n            category_name,\n            category_url_path\n          }\n        }\n        review_count\n        reviews {\n          items {\n            average_rating\n            ratings_breakdown {\n              name\n              value\n            }\n          }\n        }\n        ... on GroupedProduct {\n          items {\n            product {\n              sku\n            }\n          }\n        }\n      }\n      page_info {\n        current_page\n        page_size\n        total_pages\n      }\n      total_count\n    }\n  }\n`;\n", "import { ApolloQueryResult } from '@apollo/client/core';\nimport { CustomQuery } from '@vue-storefront/core';\nimport {\n  ProductAttributeFilterInput,\n  ProductAttributeSortInput,\n  ProductsListQuery,\n  ProductsListQueryVariables,\n} from '../../types/GraphQL';\nimport productsListQuery from './productsList';\nimport { Context } from '../../types/context';\nimport { GetProductSearchParams } from '../../types/API';\nimport getHeaders from '../getHeaders';\n\ntype Variables = {\n  pageSize: number;\n  currentPage: number;\n  search?: string;\n  filter?: ProductAttributeFilterInput;\n  sort?: ProductAttributeSortInput;\n};\n\n/**\n * Fetches products using received search term and params for filter, sort and\n * pagination.\n *\n * @param context VSF context\n * @param searchParams search term and params for filter, sort and pagination\n * @param [customQuery] (optional) - custom GraphQL query that extends the default query\n */\nexport default async function products(\n  context: Context,\n  searchParams?: GetProductSearchParams,\n  customQuery: CustomQuery = { products: 'products' },\n): Promise<ApolloQueryResult<ProductsListQuery>> {\n  const defaultParams = {\n    pageSize: 10,\n    currentPage: 1,\n    ...searchParams,\n  };\n\n  const variables: Variables = {\n    pageSize: defaultParams.pageSize <= 0 ? 10 : defaultParams.pageSize,\n    currentPage: defaultParams.currentPage <= 0 ? 1 : defaultParams.currentPage,\n  };\n\n  if (defaultParams.search) variables.search = defaultParams.search;\n\n  if (defaultParams.filter) variables.filter = defaultParams.filter;\n\n  if (defaultParams.sort) variables.sort = defaultParams.sort;\n\n  const { products: productsGQL } = context.extendQuery(customQuery, {\n    products: {\n      query: productsListQuery,\n      variables,\n    },\n  });\n\n  try {\n    return await context.client.query<ProductsListQuery, ProductsListQueryVariables>({\n      query: productsGQL.query,\n      variables: productsGQL.variables,\n      context: {\n        headers: getHeaders(context),\n      },\n    });\n  } catch (error) {\n    throw error.graphQLErrors?.[0].message || error.networkError?.result || error;\n  }\n}\n", "import gql from 'graphql-tag';\n\n/**\n * GraphQL Query that searches for related products using params for sorting,\n * filtering and pagination.\n */\nexport default gql`\n  query relatedProduct(\n    $search: String = \"\"\n    $filter: ProductAttributeFilterInput\n    $pageSize: Int = 10\n    $currentPage: Int = 1\n    $sort: ProductAttributeSortInput\n  ) {\n    products(\n      search: $search\n      filter: $filter\n      sort: $sort\n      pageSize: $pageSize\n      currentPage: $currentPage\n    ) {\n      items {\n        related_products {\n          uid\n    __typename\n    sku\n    name\n    stock_status\n    only_x_left_in_stock\n    rating_summary\n    thumbnail {\n      url\n      position\n      disabled\n      label\n    }\n    url_key\n    url_rewrites {\n      url\n    }\n    price_range {\n      maximum_price {\n        final_price {\n          currency\n          value\n        }\n        regular_price {\n          currency\n          value\n        }\n      }\n      minimum_price {\n        final_price {\n          currency\n          value\n        }\n        regular_price {\n          currency\n          value\n        }\n      }\n    }\n    categories {\n      uid\n      name\n      url_suffix\n      url_path\n      breadcrumbs {\n        category_name,\n        category_url_path\n      }\n    }\n    review_count\n    reviews {\n      items {\n        average_rating\n        ratings_breakdown {\n          name\n          value\n        }\n      }\n    }\n        }\n        uid\n      }\n    }\n  }\n`;\n", "import type { ApolloQueryResult } from '@apollo/client/core';\nimport type { CustomQuery } from '@vue-storefront/core';\nimport type {\n  ProductAttributeFilterInput,\n  ProductAttributeSortInput,\n  RelatedProductQuery,\n  RelatedProductQueryVariables,\n} from '../../types/GraphQL';\nimport relatedProductQuery from './relatedProduct';\nimport type { Context } from '../../types/context';\nimport type { GetProductSearchParams } from '../../types/API';\nimport getHeaders from '../getHeaders';\n\ntype Variables = {\n  pageSize: number;\n  currentPage: number;\n  search?: string;\n  filter?: ProductAttributeFilterInput;\n  sort?: ProductAttributeSortInput;\n};\n\n/**\n * Searches for related products using params for sorting, filtering and\n * pagination.\n *\n * @param context VSF context\n * @param searchParams params for sorting, filtering and pagination\n * @param [customQuery] (optional) - custom GraphQL query that extends the default query\n */\nexport default async function relatedProduct(\n  context: Context,\n  searchParams?: GetProductSearchParams,\n  customQuery: CustomQuery = { relatedProduct: 'relatedProduct' },\n): Promise<ApolloQueryResult<RelatedProductQuery>> {\n  const defaultParams = {\n    pageSize: 10,\n    currentPage: 1,\n    ...searchParams,\n  };\n\n  const variables: Variables = {\n    pageSize: defaultParams.pageSize,\n    currentPage: defaultParams.currentPage,\n  };\n\n  if (defaultParams.search) variables.search = defaultParams.search;\n\n  if (defaultParams.filter) variables.filter = defaultParams.filter;\n\n  if (defaultParams.sort) variables.sort = defaultParams.sort;\n\n  const { relatedProduct: relatedProductGQL } = context.extendQuery(customQuery, {\n    relatedProduct: {\n      query: relatedProductQuery,\n      variables,\n    },\n  });\n\n  try {\n    return await context.client.query<RelatedProductQuery, RelatedProductQueryVariables>({\n      query: relatedProductGQL.query,\n      variables: relatedProductGQL.variables,\n      context: {\n        headers: getHeaders(context),\n      },\n    });\n  } catch (error) {\n    throw error.graphQLErrors?.[0].message || error.networkError?.result || error;\n  }\n}\n", "import gql from 'graphql-tag';\n\n/** GraphQL query to remove a coupon from a cart */\nexport default gql`\n  mutation removeCouponFromCart($input: RemoveCouponFromCartInput) {\n    removeCouponFromCart(input: $input) {\n      cart {\n        id\n        email\n        is_virtual\n        applied_coupons {\n          code\n        }\n        prices {\n          subtotal_excluding_tax {\n            value\n          },\n          subtotal_including_tax {\n            value\n          },\n          applied_taxes {\n            amount {\n              value\n            },\n            label\n          }\n          discounts {\n            amount {\n              value\n            },\n            label\n          }\n          grand_total {\n            value\n          }\n        }\n        items {\n          uid\n          product {\n            uid\n            __typename\n            sku\n            name\n            stock_status\n            only_x_left_in_stock\n            rating_summary\n            thumbnail {\n              url\n              position\n              disabled\n              label\n            }\n            url_key\n            url_rewrites {\n              url\n            }\n            price_range {\n              maximum_price {\n                final_price {\n                  currency\n                  value\n                }\n                regular_price {\n                  currency\n                  value\n                }\n              }\n              minimum_price {\n                final_price {\n                  currency\n                  value\n                }\n                regular_price {\n                  currency\n                  value\n                }\n              }\n            }\n            categories {\n              uid\n              name\n              url_suffix\n              url_path\n              breadcrumbs {\n                category_name,\n                category_url_path\n              }\n            }\n            review_count\n            reviews {\n              items {\n                average_rating\n                ratings_breakdown {\n                  name\n                  value\n                }\n              }\n            }\n          }\n          prices {\n            row_total {\n              value\n            }\n            row_total_including_tax {\n              value\n            }\n            total_item_discount {\n              value\n            }\n          }\n          quantity\n          ... on ConfigurableCartItem {\n            configurable_options {\n              configurable_product_option_uid\n              option_label\n              configurable_product_option_value_uid\n              value_label\n            }\n            configured_variant {\n              sku\n              thumbnail {\n                url\n              }\n            }\n          }\n          ... on BundleCartItem {\n            bundle_options {\n              uid\n              label\n              type\n              values {\n                id\n                label\n                price\n                quantity\n              }\n            }\n          }\n        }\n        total_quantity\n        shipping_addresses {\n          firstname\n          lastname\n          street\n          city\n          company\n          region {\n            code\n            region_id\n            label\n          }\n          postcode\n          telephone\n          country {\n            code\n            label\n          }\n          selected_shipping_method {\n            carrier_code\n            carrier_title\n            method_code\n            method_title\n            amount {\n              value\n              currency\n            }\n          }\n        }\n        billing_address {\n          firstname\n          lastname\n          street\n          city\n          company\n          region {\n            code\n            region_id\n            label\n          }\n          postcode\n          telephone\n          country {\n            code\n            label\n          }\n        }\n      }\n    }\n  }\n`;\n", "import { FetchResult } from '@apollo/client/core';\nimport { CustomQuery } from '@vue-storefront/core';\nimport type { Context } from '../../types/context';\nimport {\n  RemoveCouponFromCartInput,\n  RemoveCouponFromCartMutation,\n  RemoveCouponFromCartMutationVariables,\n} from '../../types/GraphQL';\nimport removeCouponFromCartMutation from './removeCouponFromCart';\nimport getHeaders from '../getHeaders';\n\n/**\n * Removes a coupon from a cart\n * @param context VSF context\n * @param input ID of the cart and coupon to remove\n * @param customQuery custom GraphQL query that extends the default one\n */\nexport default async function removeCouponFromCart(\n  context: Context,\n  input: RemoveCouponFromCartInput,\n  customQuery: CustomQuery = { removeCouponFromCart: 'removeCouponFromCart' },\n): Promise<FetchResult<RemoveCouponFromCartMutation>> {\n  const { removeCouponFromCart: removeCouponFromCartGQL } = context.extendQuery(\n    customQuery,\n    {\n      removeCouponFromCart: {\n        query: removeCouponFromCartMutation,\n        variables: { input },\n      },\n    },\n  );\n\n  return context.client.mutate<RemoveCouponFromCartMutation, RemoveCouponFromCartMutationVariables>({\n    mutation: removeCouponFromCartGQL.query,\n    variables: removeCouponFromCartGQL.variables,\n    context: {\n      headers: getHeaders(context),\n    },\n  });\n}\n", "import gql from 'graphql-tag';\n\n/** GraphQL Mutation to remove an item from a cart */\nexport default gql`\n  mutation removeItemFromCart($input: RemoveItemFromCartInput) {\n    removeItemFromCart(input: $input) {\n      cart {\n        id\n        email\n        is_virtual\n        applied_coupons {\n          code\n        }\n        prices {\n          subtotal_excluding_tax {\n            value\n          },\n          subtotal_including_tax {\n            value\n          },\n          applied_taxes {\n            amount {\n              value\n            },\n            label\n          }\n          discounts {\n            amount {\n              value\n            },\n            label\n          }\n          grand_total {\n            value\n          }\n        }\n        items {\n          uid\n          product {\n            uid\n            __typename\n            sku\n            name\n            stock_status\n            only_x_left_in_stock\n            rating_summary\n            thumbnail {\n              url\n              position\n              disabled\n              label\n            }\n            url_key\n            url_rewrites {\n              url\n            }\n            price_range {\n              maximum_price {\n                final_price {\n                  currency\n                  value\n                }\n                regular_price {\n                  currency\n                  value\n                }\n              }\n              minimum_price {\n                final_price {\n                  currency\n                  value\n                }\n                regular_price {\n                  currency\n                  value\n                }\n              }\n            }\n            categories {\n              uid\n              name\n              url_suffix\n              url_path\n              breadcrumbs {\n                category_name,\n                category_url_path\n              }\n            }\n            review_count\n            reviews {\n              items {\n                average_rating\n                ratings_breakdown {\n                  name\n                  value\n                }\n              }\n            }\n          }\n          prices {\n            row_total {\n              value\n            }\n            row_total_including_tax {\n              value\n            }\n            total_item_discount {\n              value\n            }\n          }\n          quantity\n          ... on ConfigurableCartItem {\n            configurable_options {\n              configurable_product_option_uid\n              option_label\n              configurable_product_option_value_uid\n              value_label\n            }\n            configured_variant {\n              sku\n              thumbnail {\n                url\n              }\n            }\n          }\n          ... on BundleCartItem {\n            bundle_options {\n              uid\n              label\n              type\n              values {\n                id\n                label\n                price\n                quantity\n              }\n            }\n          }\n        }\n        total_quantity\n        shipping_addresses {\n          firstname\n          lastname\n          street\n          city\n          company\n          region {\n            code\n            region_id\n            label\n          }\n          postcode\n          telephone\n          country {\n            code\n            label\n          }\n          selected_shipping_method {\n            carrier_code\n            carrier_title\n            method_code\n            method_title\n            amount {\n              value\n              currency\n            }\n          }\n        }\n        billing_address {\n          firstname\n          lastname\n          street\n          city\n          company\n          region {\n            code\n            region_id\n            label\n          }\n          postcode\n          telephone\n          country {\n            code\n            label\n          }\n        }\n      }\n    }\n  }\n`;\n", "import { FetchResult } from '@apollo/client/core';\nimport type { CustomQuery } from '@vue-storefront/core';\nimport type { Context } from '../../types/context';\nimport {\n  RemoveItemFromCartInput,\n  RemoveItemFromCartMutation,\n  RemoveItemFromCartMutationVariables,\n} from '../../types/GraphQL';\nimport removeItemFromCartMutation from './removeItemFromCart';\nimport getHeaders from '../getHeaders';\n\n/**\n * Removes an item from the given cart\n * @param context VSF context\n * @param input ID of the cart and item to be removed from it\n * @param customQuery custom GraphQL query that extends the default one\n */\nexport default async function removeItemFromCart(\n  context: Context,\n  input: RemoveItemFromCartInput,\n  customQuery: CustomQuery = { removeItemFromCart: 'removeItemFromCart' },\n): Promise<FetchResult<RemoveItemFromCartMutation>> {\n  const { removeItemFromCart: removeItemFromCartGQL } = context.extendQuery(\n    customQuery,\n    {\n      removeItemFromCart: {\n        query: removeItemFromCartMutation,\n        variables: { input },\n      },\n    },\n  );\n\n  return context.client.mutate<RemoveItemFromCartMutation, RemoveItemFromCartMutationVariables>({\n    mutation: removeItemFromCartGQL.query,\n    variables: removeItemFromCartGQL.variables,\n    context: {\n      headers: getHeaders(context),\n    },\n  });\n}\n", "import gql from 'graphql-tag';\n\nexport default gql`\n  mutation removeProductsFromWishlist($id: ID!, $items: [ID!]!) {\n    removeProductsFromWishlist(wishlistId: $id, wishlistItemsIds: $items) {\n      wishlist {\n        id\n        items_count\n        sharing_code\n        items_v2 {\n          items {\n            id\n            quantity\n            description\n            added_at\n            product {\n              ...on ConfigurableProduct {\n                configurable_options {\n                  attribute_code\n                  attribute_uid\n                  label\n                  position\n                  uid\n                  use_default\n                  values {\n                    label\n                    swatch_data {\n                      value\n                    }\n                    uid\n                  }\n                }\n              }\n              ... on BundleProduct {\n                items {\n                  sku\n                  title\n                  options {\n                    uid\n                    quantity\n                    product {\n                      uid\n                      sku\n                      name\n                      price_range {\n                        maximum_price {\n                          final_price {\n                            currency\n                            value\n                          }\n                          regular_price {\n                            currency\n                            value\n                          }\n                        }\n                        minimum_price {\n                          final_price {\n                            currency\n                            value\n                          }\n                          regular_price {\n                            currency\n                            value\n                          }\n                        }\n                      }\n                    }\n                  }\n                }\n              }\n              uid\n              __typename\n              sku\n              name\n              stock_status\n              only_x_left_in_stock\n              rating_summary\n              categories {\n                uid\n                name\n                url_suffix\n                url_path\n                breadcrumbs {\n                  category_name,\n                  category_url_path\n                }\n              }\n              price_range {\n                maximum_price {\n                  final_price {\n                    currency\n                    value\n                  }\n                  regular_price {\n                    currency\n                    value\n                  }\n                }\n                minimum_price {\n                  final_price {\n                    currency\n                    value\n                  }\n                  regular_price {\n                    currency\n                    value\n                  }\n                }\n              }\n              thumbnail {\n                url\n                position\n                disabled\n                label\n              }\n              url_key\n              url_rewrites {\n                url\n              }\n              review_count\n              reviews {\n                items {\n                  average_rating\n                  ratings_breakdown {\n                    name\n                    value\n                  }\n                }\n              }\n              ... on GroupedProduct {\n                items {\n                  product {\n                    sku\n                  }\n                }\n              }\n            }\n          }\n          page_info {\n            current_page\n            page_size\n            total_pages\n          }\n        }\n      }\n    }\n  }\n`;\n", "import { FetchResult } from '@apollo/client/core';\nimport { CustomQuery } from '@vue-storefront/core';\nimport removeProductsFromWishlist from './removeProductsFromWishlist';\nimport {\n  RemoveProductsFromWishlistMutation,\n  RemoveProductsFromWishlistMutationVariables,\n} from '../../types/GraphQL';\nimport { Context } from '../../types/context';\nimport getHeaders from '../getHeaders';\n\nexport default async (\n  context: Context,\n  input: RemoveProductsFromWishlistMutationVariables,\n  customQuery: CustomQuery = { removeProductsFromWishlist: 'removeProductsFromWishlist' },\n): Promise<FetchResult<RemoveProductsFromWishlistMutation>> => {\n  const { removeProductsFromWishlist: removeProductsFromWishlistGQL } = context.extendQuery(\n    customQuery,\n    {\n      removeProductsFromWishlist: {\n        query: removeProductsFromWishlist,\n        variables: { ...input },\n      },\n    },\n  );\n\n  return context.client.mutate<RemoveProductsFromWishlistMutation, RemoveProductsFromWishlistMutationVariables>({\n    mutation: removeProductsFromWishlistGQL.query,\n    variables: removeProductsFromWishlistGQL.variables,\n    context: {\n      headers: getHeaders(context),\n    },\n  });\n};\n", "import { FetchResult } from '@apollo/client/core';\nimport { CustomQuery, Logger } from '@vue-storefront/core';\nimport { GraphQLError } from 'graphql';\nimport recaptchaValidator from '../../helpers/recaptcha/recaptchaValidator';\nimport requestPasswordResetEmailMutation from './requestPasswordResetEmail';\nimport {\n  RequestPasswordResetEmailMutation,\n  RequestPasswordResetEmailMutationVariables,\n} from '../../types/GraphQL';\nimport { Context } from '../../types/context';\nimport getHeaders from '../getHeaders';\n\n/**\n * Requests a password reset email to be sent to the user\n * @param context VSF Context\n * @param input Email for which to request a password reset\n * @param [customQuery] (optional) - custom GraphQL query that extends the default one\n */\nexport default async function requestPasswordResetEmail(\n  context: Context,\n  input: RequestPasswordResetEmailMutationVariables,\n  customQuery: CustomQuery = { requestPasswordResetEmail: 'requestPasswordResetEmail' },\n): Promise<FetchResult<RequestPasswordResetEmailMutation>> {\n  const {\n    recaptchaToken, ...variables\n  } = input;\n\n  if (context.config.recaptcha.isEnabled) {\n    /**\n     * recaptcha token verification\n     */\n    const response = await recaptchaValidator(context, recaptchaToken);\n\n    if (!response.success) {\n      return {\n        errors: [new GraphQLError('Error during reCaptcha verification. Please try again.')],\n        data: null,\n      };\n    }\n  }\n\n  const { requestPasswordResetEmail: extendedMutation } = context.extendQuery(customQuery, {\n    requestPasswordResetEmail: {\n      query: requestPasswordResetEmailMutation,\n      variables: { ...variables },\n    },\n  });\n\n  Logger.debug('[VSF: Magento] requestPasswordResetEmail', JSON.stringify(input, null, 2));\n  const result = await context.client\n    .mutate<RequestPasswordResetEmailMutation, RequestPasswordResetEmailMutationVariables>({\n    mutation: extendedMutation.query,\n    variables: extendedMutation.variables,\n    context: {\n      headers: getHeaders(context),\n    },\n  });\n\n  if (!result.data.requestPasswordResetEmail) throw new Error('Email was not found, or not available.');\n\n  return result;\n}\n", "import gql from 'graphql-tag';\n\n/** GraphQL Mutation that requests a password reset email to be sent */\nexport default gql`\n  mutation requestPasswordResetEmail($email: String!){\n      requestPasswordResetEmail(email: $email)\n  }\n`;\n", "import { FetchResult } from '@apollo/client/core';\nimport { CustomQuery, Logger } from '@vue-storefront/core';\nimport { GraphQLError } from 'graphql';\nimport resetPasswordMutation from './resetPassword';\nimport {\n  ResetPasswordMutation,\n  ResetPasswordMutationVariables,\n} from '../../types/GraphQL';\nimport { Context } from '../../types/context';\nimport recaptchaValidator from '../../helpers/recaptcha/recaptchaValidator';\nimport getHeaders from '../getHeaders';\n\n/**\n * Resets a user's password\n * @param context VSF Context\n * @param input Params used to reset a user's password\n * @param [customQuery] (optional) - custom GraphQL query that extends the default one\n */\nexport default async function resetPassword(\n  context: Context,\n  input: ResetPasswordMutationVariables,\n  customQuery: CustomQuery = { resetPassword: 'resetPassword' },\n): Promise<FetchResult<ResetPasswordMutation>> {\n  const {\n    recaptchaToken, ...variables\n  } = input;\n\n  if (context.config.recaptcha.isEnabled) {\n    /**\n     * recaptcha token verification\n     */\n    const response = await recaptchaValidator(context, recaptchaToken);\n\n    if (!response.success) {\n      return {\n        errors: [new GraphQLError('Error during reCaptcha verification. Please try again.')],\n        data: null,\n      };\n    }\n  }\n\n  const { resetPassword: extendedResetPasswordMutation } = context.extendQuery(customQuery, {\n    resetPassword: {\n      query: resetPasswordMutation,\n      variables: { ...variables },\n    },\n  });\n\n  Logger.debug('[VSF: Magento] requestPasswordResetEmail', JSON.stringify(input, null, 2));\n  const result = await context.client\n    .mutate<ResetPasswordMutation, ResetPasswordMutationVariables>({\n    mutation: extendedResetPasswordMutation.query,\n    variables: extendedResetPasswordMutation.variables,\n    context: {\n      headers: getHeaders(context),\n    },\n  });\n\n  if (!result.data.resetPassword) throw new Error('It was not possible to change the user password.');\n\n  return result;\n}\n", "import gql from 'graphql-tag';\n\n/** GraphQL Mutation that resets a users's password */\nexport default gql`\n  mutation resetPassword($email: String!, $newPassword: String!, $resetPasswordToken: String!){\n    resetPassword(email: $email, newPassword: $newPassword, resetPasswordToken: $resetPasswordToken)\n  }\n`;\n", "import gql from 'graphql-tag';\n\nexport default gql`\n  mutation revokeCustomerToken{\n    revokeCustomerToken {\n      result\n    }\n  }\n`;\n", "import { FetchResult } from '@apollo/client/core';\nimport { CustomQuery } from '@vue-storefront/core';\nimport revokeCustomerToken from './revokeCustomerToken';\nimport { Context } from '../../types/context';\nimport { RevokeCustomerTokenMutation } from '../../types/GraphQL';\nimport getHeaders from '../getHeaders';\n\n/**\n * Logs out the current customer. To override the default query, use the `revokeCustomerToken` query key.\n */\nexport default async (\n  context: Context,\n  customQuery: CustomQuery = { revokeCustomerToken: 'revokeCustomerToken' },\n): Promise<FetchResult<RevokeCustomerTokenMutation>> => {\n  const { revokeCustomerToken: revokeCustomerTokenGQL } = context.extendQuery(customQuery, {\n    revokeCustomerToken: {\n      query: revokeCustomerToken,\n    },\n  });\n\n  return context.client.mutate<RevokeCustomerTokenMutation>({\n    mutation: revokeCustomerTokenGQL.query,\n    context: {\n      headers: getHeaders(context),\n    },\n  });\n};\n", "import gql from 'graphql-tag';\n\nexport default gql`\n  mutation setBillingAddressOnCart($input: SetBillingAddressOnCartInput) {\n    setBillingAddressOnCart(input: $input) {\n      cart {\n        billing_address {\n          firstname\n          lastname\n          company\n          street\n          city\n          region {\n            code\n            region_id\n            label\n          }\n          postcode\n          telephone\n          country {\n            code\n            label\n          }\n        }\n      }\n    }\n  }\n`;\n", "import { FetchResult } from '@apollo/client/core';\nimport { CustomQuery } from '@vue-storefront/core';\nimport setBillingAddressOnCart from './setBillingAddressOnCart';\nimport {\n  SetBillingAddressOnCartInput,\n  SetBillingAddressOnCartMutation,\n  SetBillingAddressOnCartMutationVariables,\n} from '../../types/GraphQL';\nimport { Context } from '../../types/context';\nimport getHeaders from '../getHeaders';\n\nexport default async (\n  context: Context,\n  input: SetBillingAddressOnCartInput,\n  customQuery: CustomQuery = { setBillingAddressOnCart: 'setBillingAddressOnCart' },\n): Promise<FetchResult<SetBillingAddressOnCartMutation>> => {\n  const { setBillingAddressOnCart: setBillingAddressOnCartGQL } = context.extendQuery(\n    customQuery,\n    {\n      setBillingAddressOnCart: {\n        query: setBillingAddressOnCart,\n        variables: { input },\n      },\n    },\n  );\n\n  return context.client.mutate<SetBillingAddressOnCartMutation, SetBillingAddressOnCartMutationVariables>({\n    mutation: setBillingAddressOnCartGQL.query,\n    variables: setBillingAddressOnCartGQL.variables,\n    context: {\n      headers: getHeaders(context),\n    },\n  });\n};\n", "import gql from 'graphql-tag';\n\n/** GraphQL Mutation that sets the guest user email on a cart */\nexport default gql`\n  mutation setGuestEmailOnCart($input: SetGuestEmailOnCartInput) {\n    setGuestEmailOnCart(input: $input) {\n      cart {\n        email\n      }\n    }\n  }\n`;\n", "import { FetchResult } from '@apollo/client/core';\nimport { CustomQuery } from '@vue-storefront/core';\nimport setGuestEmailOnCartMutation from './setGuestEmailOnCart';\nimport {\n  SetGuestEmailOnCartInput, SetGuestEmailOnCartMutation, SetGuestEmailOnCartMutationVariables,\n} from '../../types/GraphQL';\nimport { Context } from '../../types/context';\nimport getHeaders from '../getHeaders';\n\n/**\n * Set the guest user email on the cart\n * @param context VSF Context\n * @param input Variables to set guest email\n * @param [customQuery] (optional) - Custom query that will extend default one\n */\nexport default async function setGuestEmailOnCart(\n  context: Context,\n  input: SetGuestEmailOnCartInput,\n  customQuery: CustomQuery = { setGuestEmailOnCart: 'setGuestEmailOnCart' },\n): Promise<FetchResult<SetGuestEmailOnCartMutation>> {\n  const { setGuestEmailOnCart: setGuestEmailOnCartGQL } = context.extendQuery(\n    customQuery,\n    {\n      setGuestEmailOnCart: {\n        query: setGuestEmailOnCartMutation,\n        variables: { input },\n      },\n    },\n  );\n\n  return context.client.mutate<SetGuestEmailOnCartMutation, SetGuestEmailOnCartMutationVariables>({\n    mutation: setGuestEmailOnCartGQL.query,\n    variables: setGuestEmailOnCartGQL.variables,\n    context: {\n      headers: getHeaders(context),\n    },\n  });\n}\n", "import gql from 'graphql-tag';\n\n/** GraphQL Mutation that sets received payment method on cart. */\nexport default gql`\n  mutation setPaymentMethodOnCart($input: SetPaymentMethodOnCartInput) {\n    setPaymentMethodOnCart(input: $input) {\n      cart {\n        available_payment_methods {\n          code\n          title\n        }\n        selected_payment_method {\n          code\n          title\n        }\n      }\n    }\n  }\n`;\n", "import { FetchResult } from '@apollo/client/core';\nimport { CustomQuery } from '@vue-storefront/core';\nimport setPaymentMethodOnCartMutation from './setPaymentMethodOnCart';\nimport type { SetPaymentMethodOnCartInput, SetPaymentMethodOnCartMutation, SetPaymentMethodOnCartMutationVariables } from '../../types/GraphQL';\nimport { Context } from '../../types/context';\nimport getHeaders from '../getHeaders';\n\nexport interface SetPaymentMethodOnCartInputs extends SetPaymentMethodOnCartInput {\n  [k: string]: any;\n}\n\n/**\n * Sets received payment method on cart.\n *\n * @param context VSF context\n * @param input params containing the cart's ID and the payment method\n * @param [customQuery] (optional) - custom GraphQL query that extends the default query\n */\nexport default async function setPaymentMethodOnCart(\n  context: Context,\n  input: SetPaymentMethodOnCartInputs,\n  customQuery: CustomQuery = { setPaymentMethodOnCart: 'setPaymentMethodOnCart' },\n): Promise<FetchResult<SetPaymentMethodOnCartMutation>> {\n  const { setPaymentMethodOnCart: setPaymentMethodOnCartGQL } = context.extendQuery(customQuery, {\n    setPaymentMethodOnCart: {\n      query: setPaymentMethodOnCartMutation,\n      variables: { input },\n    },\n  });\n\n  return context.client.mutate<SetPaymentMethodOnCartMutation, SetPaymentMethodOnCartMutationVariables>({\n    mutation: setPaymentMethodOnCartGQL.query,\n    variables: setPaymentMethodOnCartGQL.variables,\n    context: {\n      headers: getHeaders(context),\n    },\n  });\n}\n", "import gql from 'graphql-tag';\n\n/** GraphQL Mutation that sets a shipping address on received cart. */\nexport default gql`\n  mutation setShippingAddressesOnCart($input: SetShippingAddressesOnCartInput) {\n    setShippingAddressesOnCart(input: $input) {\n      cart {\n        shipping_addresses {\n          city\n          company\n          firstname\n          lastname\n          postcode\n          region {\n            code\n            label\n            region_id\n          }\n          street\n          telephone\n          country {\n            code\n            label\n          }\n          available_shipping_methods {\n            amount {\n              currency\n              value\n            }\n            available\n            carrier_code\n            carrier_title\n            error_message\n            method_code\n            method_title\n            price_excl_tax {\n              currency\n              value\n            }\n            price_incl_tax {\n              currency\n              value\n            }\n          }\n        }\n      }\n    }\n  }\n`;\n", "import type { FetchResult } from '@apollo/client/core';\nimport type { CustomQuery } from '@vue-storefront/core';\nimport setShippingAddressesOnCartQuery from './setShippingAddressesOnCart';\nimport type {\n  SetShippingAddressesOnCartInput,\n  SetShippingAddressesOnCartMutation,\n  SetShippingAddressesOnCartMutationVariables,\n} from '../../types/GraphQL';\nimport type { Context } from '../../types/context';\nimport getHeaders from '../getHeaders';\n\n/**\n * Sets a shipping address on received cart.\n *\n * @param context VSF context\n * @param input params with cart ID and shipping address.\n * @param [customQuery] (optional) - custom GraphQL query that extends the default one\n */\nexport default async function setShippingAddressesOnCart(\n  context: Context,\n  input: SetShippingAddressesOnCartInput,\n  customQuery: CustomQuery = { setShippingAddressesOnCart: 'setShippingAddressesOnCart' },\n): Promise<FetchResult<SetShippingAddressesOnCartMutation>> {\n  const { setShippingAddressesOnCart: setShippingAddressesOnCartGQL } = context.extendQuery(customQuery, {\n    setShippingAddressesOnCart: {\n      query: setShippingAddressesOnCartQuery,\n      variables: { input },\n    },\n  });\n\n  return context.client.mutate<SetShippingAddressesOnCartMutation, SetShippingAddressesOnCartMutationVariables>({\n    mutation: setShippingAddressesOnCartGQL.query,\n    variables: setShippingAddressesOnCartGQL.variables,\n    context: {\n      headers: getHeaders(context),\n    },\n  });\n}\n", "import gql from 'graphql-tag';\n\n/** GraphQL Mutation that sets a shipping method on received cart. */\nexport default gql`\n  mutation setShippingMethodsOnCart($input: SetShippingMethodsOnCartInput) {\n    setShippingMethodsOnCart(input: $input) {\n      cart {\n        id\n        email\n        is_virtual\n        applied_coupons {\n          code\n        }\n        prices {\n          subtotal_excluding_tax {\n            value\n          },\n          subtotal_including_tax {\n            value\n          },\n          applied_taxes {\n            amount {\n              value\n            },\n            label\n          }\n          discounts {\n            amount {\n              value\n            },\n            label\n          }\n          grand_total {\n            value\n          }\n        }\n        items {\n          uid\n          product {\n            uid\n            __typename\n            sku\n            name\n            stock_status\n            only_x_left_in_stock\n            rating_summary\n            thumbnail {\n              url\n              position\n              disabled\n              label\n            }\n            url_key\n            url_rewrites {\n              url\n            }\n            price_range {\n              maximum_price {\n                final_price {\n                  currency\n                  value\n                }\n                regular_price {\n                  currency\n                  value\n                }\n              }\n              minimum_price {\n                final_price {\n                  currency\n                  value\n                }\n                regular_price {\n                  currency\n                  value\n                }\n              }\n            }\n            categories {\n              uid\n              name\n              url_suffix\n              url_path\n              breadcrumbs {\n                category_name,\n                category_url_path\n              }\n            }\n            review_count\n            reviews {\n              items {\n                average_rating\n                ratings_breakdown {\n                  name\n                  value\n                }\n              }\n            }\n          }\n          prices {\n            row_total {\n              value\n            }\n            row_total_including_tax {\n              value\n            }\n            total_item_discount {\n              value\n            }\n          }\n          quantity\n          ... on ConfigurableCartItem {\n            configurable_options {\n              configurable_product_option_uid\n              option_label\n              configurable_product_option_value_uid\n              value_label\n            }\n            configured_variant {\n              sku\n              thumbnail {\n                url\n              }\n            }\n          }\n          ... on BundleCartItem {\n            bundle_options {\n              uid\n              label\n              type\n              values {\n                id\n                label\n                price\n                quantity\n              }\n            }\n          }\n        }\n        total_quantity\n        shipping_addresses {\n          firstname\n          lastname\n          street\n          city\n          company\n          region {\n            code\n            region_id\n            label\n          }\n          postcode\n          telephone\n          country {\n            code\n            label\n          }\n          selected_shipping_method {\n            carrier_code\n            carrier_title\n            method_code\n            method_title\n            amount {\n              value\n              currency\n            }\n          }\n        }\n        billing_address {\n          firstname\n          lastname\n          street\n          city\n          company\n          region {\n            code\n            region_id\n            label\n          }\n          postcode\n          telephone\n          country {\n            code\n            label\n          }\n        }\n      }\n    }\n  }\n`;\n", "import type { FetchResult } from '@apollo/client/core';\nimport type { CustomQuery } from '@vue-storefront/core';\nimport setShippingMethodsOnCartMutation from './setShippingMethodsOnCart';\nimport type { SetShippingMethodsOnCartInput, SetShippingMethodsOnCartMutation, SetShippingMethodsOnCartMutationVariables } from '../../types/GraphQL';\nimport type { Context } from '../../types/context';\nimport getHeaders from '../getHeaders';\n\n/**\n * Sets a shipping method on received cart.\n *\n * @param context VSF context\n * @param input params with cart ID and shipping method.\n * @param [customQuery] (optional) - custom GraphQL query that extends the default one\n */\nexport default async function setShippingMethodsOnCart(\n  context: Context,\n  input: SetShippingMethodsOnCartInput,\n  customQuery: CustomQuery = { setShippingMethodsOnCart: 'setShippingMethodsOnCart' },\n): Promise<FetchResult<SetShippingMethodsOnCartMutation>> {\n  const { setShippingMethodsOnCart: setShippingMethodsOnCartGQL } = context.extendQuery(customQuery, {\n    setShippingMethodsOnCart: {\n      query: setShippingMethodsOnCartMutation,\n      variables: { input },\n    },\n  });\n\n  return context.client.mutate<SetShippingMethodsOnCartMutation, SetShippingMethodsOnCartMutationVariables>({\n    mutation: setShippingMethodsOnCartGQL.query,\n    variables: setShippingMethodsOnCartGQL.variables,\n    context: {\n      headers: getHeaders(context),\n    },\n  });\n}\n", "import gql from 'graphql-tag';\n\n/** GraphQL Query that fetches store configuration from the API */\nexport default gql`\n  query storeConfig {\n    storeConfig {\n        allow_guests_to_write_product_reviews,\n        allow_items,\n        allow_order,\n        base_currency_code,\n        base_media_url,\n        catalog_default_sort_by,\n        category_fixed_product_tax_display_setting,\n        cms_home_page,\n        cms_no_cookies,\n        cms_no_route,\n        configurable_thumbnail_source,\n        copyright,\n        default_description,\n        default_display_currency_code,\n        default_keywords,\n        default_title,\n        grid_per_page,\n        grid_per_page_values,\n        head_shortcut_icon,\n        header_logo_src,\n        is_default_store,\n        is_default_store_group,\n        list_mode,\n        list_per_page,\n        list_per_page_values,\n        locale,\n        logo_alt,\n        logo_height,\n        logo_width,\n        magento_wishlist_general_is_enabled,\n        minimum_password_length,\n        no_route,\n        product_fixed_product_tax_display_setting,\n        product_reviews_enabled,\n        required_character_classes_number,\n        root_category_uid,\n        sales_fixed_product_tax_display_setting,\n        store_code,\n        store_group_code,\n        store_group_name,\n        store_name,\n        store_sort_order,\n        timezone,\n        title_prefix,\n        title_separator,\n        title_suffix,\n        use_store_in_url,\n        website_code,\n        website_name,\n        weight_unit,\n        welcome,\n    }\n  }\n`;\n", "import { ApolloQueryResult } from '@apollo/client/core';\nimport { CustomQuery } from '@vue-storefront/core';\nimport { StoreConfigQuery } from '../../types/GraphQL';\nimport storeConfigMutation from './storeConfig';\nimport { Context } from '../../types/context';\nimport getHeaders from '../getHeaders';\n\n/**\n * Fetches the store configuration from the API\n * @param context VSF Context\n * @param [customQuery] (optional) - custom GraphQL query that extends the default one\n */\nexport default async function storeConfig(\n  context: Context,\n  customQuery: CustomQuery = { storeConfig: 'storeConfig' },\n): Promise<ApolloQueryResult<StoreConfigQuery>> {\n  const { storeConfig: storeConfigGQL } = context.extendQuery(\n    customQuery,\n    {\n      storeConfig: {\n        query: storeConfigMutation,\n      },\n    },\n  );\n\n  return context.client.query<StoreConfigQuery>({\n    query: storeConfigGQL.query,\n    context: {\n      headers: getHeaders(context),\n    },\n  });\n}\n", "import gql from 'graphql-tag';\n\n/** GraphQL Mutation that subscribes an email in the newsletter. */\nexport default gql`\n  mutation subscribeEmailToNewsletter($email: String!){\n    subscribeEmailToNewsletter(email: $email) {\n      status\n    }\n  }\n`;\n", "import { FetchResult } from '@apollo/client/core';\nimport { CustomQuery } from '@vue-storefront/core';\nimport subscribeEmailToNewsletterMutation from './subscribeEmailToNewsletter';\nimport type { SubscribeEmailToNewsletterMutation, SubscribeEmailToNewsletterMutationVariables } from '../../types/GraphQL';\nimport { Context } from '../../types/context';\nimport getHeaders from '../getHeaders';\n\n/**\n * Subscribes an email in the newsletter.\n * @param context VSF context\n * @param input params with the email to subscribe\n * @param [customQuery] (optional) - custom GraphQL query that extends the default query\n */\nexport default async function subscribeEmailToNewsletter(\n  context: Context,\n  { email }: SubscribeEmailToNewsletterMutationVariables,\n  customQuery: CustomQuery = { subscribeEmailToNewsletter: 'subscribeEmailToNewsletter' },\n): Promise<FetchResult<SubscribeEmailToNewsletterMutation>> {\n  const { subscribeEmailToNewsletter: subscribeEmailToNewsletterGQL } = context.extendQuery(customQuery, {\n    subscribeEmailToNewsletter: {\n      query: subscribeEmailToNewsletterMutation,\n      variables: {\n        email,\n      },\n    },\n  });\n\n  return context.client.mutate<SubscribeEmailToNewsletterMutation, SubscribeEmailToNewsletterMutationVariables>({\n    mutation: subscribeEmailToNewsletterGQL.query,\n    variables: subscribeEmailToNewsletterGQL.variables,\n    context: {\n      headers: getHeaders(context),\n    },\n  });\n}\n", "import gql from 'graphql-tag';\n\n/** GraphQL Mutation to update cart items */\nexport default gql`\n  mutation updateCartItems($input: UpdateCartItemsInput) {\n    updateCartItems(input: $input) {\n      cart {\n        id\n        email\n        is_virtual\n        applied_coupons {\n          code\n        }\n        prices {\n          subtotal_excluding_tax {\n            value\n          },\n          subtotal_including_tax {\n            value\n          },\n          applied_taxes {\n            amount {\n              value\n            },\n            label\n          }\n          discounts {\n            amount {\n              value\n            },\n            label\n          }\n          grand_total {\n            value\n          }\n        }\n        items {\n          uid\n          product {\n            uid\n            __typename\n            sku\n            name\n            stock_status\n            only_x_left_in_stock\n            rating_summary\n            thumbnail {\n              url\n              position\n              disabled\n              label\n            }\n            url_key\n            url_rewrites {\n              url\n            }\n            price_range {\n              maximum_price {\n                final_price {\n                  currency\n                  value\n                }\n                regular_price {\n                  currency\n                  value\n                }\n              }\n              minimum_price {\n                final_price {\n                  currency\n                  value\n                }\n                regular_price {\n                  currency\n                  value\n                }\n              }\n            }\n            categories {\n              uid\n              name\n              url_suffix\n              url_path\n              breadcrumbs {\n                category_name,\n                category_url_path\n              }\n            }\n            review_count\n            reviews {\n              items {\n                average_rating\n                ratings_breakdown {\n                  name\n                  value\n                }\n              }\n            }\n          }\n          prices {\n            row_total {\n              value\n            }\n            row_total_including_tax {\n              value\n            }\n            total_item_discount {\n              value\n            }\n          }\n          quantity\n          ... on ConfigurableCartItem {\n            configurable_options {\n              configurable_product_option_uid\n              option_label\n              configurable_product_option_value_uid\n              value_label\n            }\n            configured_variant {\n              sku\n              thumbnail {\n                url\n              }\n            }\n          }\n          ... on BundleCartItem {\n            bundle_options {\n              uid\n              label\n              type\n              values {\n                id\n                label\n                price\n                quantity\n              }\n            }\n          }\n        }\n        total_quantity\n        shipping_addresses {\n          firstname\n          lastname\n          street\n          city\n          company\n          region {\n            code\n            region_id\n            label\n          }\n          postcode\n          telephone\n          country {\n            code\n            label\n          }\n          selected_shipping_method {\n            carrier_code\n            carrier_title\n            method_code\n            method_title\n            amount {\n              value\n              currency\n            }\n          }\n        }\n        billing_address {\n          firstname\n          lastname\n          street\n          city\n          company\n          region {\n            code\n            region_id\n            label\n          }\n          postcode\n          telephone\n          country {\n            code\n            label\n          }\n        }\n      }\n    }\n  }\n`;\n", "import { FetchResult } from '@apollo/client/core';\nimport type { CustomQuery } from '@vue-storefront/core';\nimport type { Context } from '../../types/context';\nimport {\n  UpdateCartItemsInput,\n  UpdateCartItemsMutation,\n  UpdateCartItemsMutationVariables,\n} from '../../types/GraphQL';\nimport updateCartItemsMutation from './updateCartItems';\nimport getHeaders from '../getHeaders';\n\n/**\n * Updates the contents of the given cart\n * @param context VSF context\n * @param input ID of the cart and the items to update it\n * @param customQuery custom GraphQL query that extends the default one\n */\nexport default async function updateCartItems(\n  context: Context,\n  input: UpdateCartItemsInput,\n  customQuery: CustomQuery = { updateCartItems: 'updateCartItems' },\n): Promise<FetchResult<UpdateCartItemsMutation>> {\n  const { updateCartItems: updateCartItemsGQL } = context.extendQuery(\n    customQuery,\n    {\n      updateCartItems: {\n        query: updateCartItemsMutation,\n        variables: { input },\n      },\n    },\n  );\n\n  return context.client.mutate<UpdateCartItemsMutation, UpdateCartItemsMutationVariables>({\n    mutation: updateCartItemsGQL.query,\n    variables: updateCartItemsGQL.variables,\n    context: {\n      headers: getHeaders(context),\n    },\n  });\n}\n", "import gql from 'graphql-tag';\n\nexport default gql`\n  mutation updateCustomer($input: CustomerUpdateInput!) {\n    updateCustomerV2(input: $input) {\n      customer {\n        date_of_birth\n        default_billing\n        default_shipping\n        email\n        firstname\n        is_subscribed\n        lastname\n        middlename\n        prefix\n        suffix\n        taxvat\n        addresses {\n          city\n          country_code\n          default_billing\n          default_shipping\n          extension_attributes {\n            attribute_code\n            value\n          }\n          firstname\n          id\n          lastname\n          postcode\n          prefix\n          region {\n            region_code\n            region_id\n            region\n          }\n          street\n          suffix\n          telephone\n          vat_id\n        }\n      }\n    }\n  }\n`;\n", "import { FetchResult } from '@apollo/client/core';\nimport { CustomQuery } from '@vue-storefront/core';\nimport updateCustomer from './updateCustomer';\nimport {\n  CustomerUpdateInput,\n  UpdateCustomerMutation,\n  UpdateCustomerMutationVariables,\n} from '../../types/GraphQL';\nimport { Context } from '../../types/context';\nimport getHeaders from '../getHeaders';\n\n/**\n * Updates the data of the current customer. To override the default query, use the `updateCustomer` query key.\n */\nexport default async (\n  context: Context,\n  input: CustomerUpdateInput,\n  customQuery: CustomQuery = { updateCustomer: 'updateCustomer' },\n): Promise<FetchResult<UpdateCustomerMutation>> => {\n  const { updateCustomer: updateCustomerGQL } = context.extendQuery(\n    customQuery,\n    {\n      updateCustomer: {\n        query: updateCustomer,\n        variables: { input },\n      },\n    },\n  );\n\n  return context.client.mutate<UpdateCustomerMutation, UpdateCustomerMutationVariables>({\n    mutation: updateCustomerGQL.query,\n    variables: updateCustomerGQL.variables,\n    context: {\n      headers: getHeaders(context),\n    },\n  });\n};\n", "import gql from 'graphql-tag';\n\n/** GraphQL Mutation that updates a customer address. */\nexport default gql`\n  mutation updateCustomerAddress($id: Int!, $input: CustomerAddressInput) {\n    updateCustomerAddress(id: $id, input: $input) {\n      id\n      city\n      company\n      country_code\n      default_billing\n      default_shipping\n      extension_attributes {\n        attribute_code\n        value\n      }\n      fax\n      firstname\n      id\n      lastname\n      middlename\n      postcode\n      prefix\n      region {\n        region\n        region_code\n        region_id\n      }\n      street\n      suffix\n      telephone\n      vat_id\n    }\n  }\n`;\n", "import { FetchResult } from '@apollo/client/core';\nimport { CustomQuery } from '@vue-storefront/core';\nimport updateCustomerAddressMutation from './updateCustomerAddress';\nimport {\n  CustomerAddressInput,\n  UpdateCustomerAddressMutation,\n  UpdateCustomerAddressMutationVariables,\n} from '../../types/GraphQL';\nimport { Context } from '../../types/context';\nimport getHeaders from '../getHeaders';\n\n/**\n * Updates a customer address.\n *\n * @param context VSF Context\n * @param params object with address identifier and the updated data\n * @param [customQuery] (optional) custom GraphQL query that extends the default query\n */\nexport default async function updateCustomerAddress(\n  context: Context,\n  params: {\n    addressId: number;\n    input: CustomerAddressInput;\n  },\n  customQuery: CustomQuery = { updateCustomerAddress: 'updateCustomerAddress' },\n): Promise<FetchResult<UpdateCustomerAddressMutation>> {\n  const { updateCustomerAddress: updateCustomerAddressGQL } = context.extendQuery(customQuery, {\n    updateCustomerAddress: {\n      query: updateCustomerAddressMutation,\n      variables: {\n        id: params.addressId,\n        input: params.input,\n      },\n    },\n  });\n\n  return context.client.mutate<UpdateCustomerAddressMutation, UpdateCustomerAddressMutationVariables>({\n    mutation: updateCustomerAddressGQL.query,\n    variables: updateCustomerAddressGQL.variables,\n    context: {\n      headers: getHeaders(context),\n    },\n  });\n}\n", "import gql from 'graphql-tag';\n\nexport default gql`\n  mutation updateCustomerEmail($email: String!, $password: String!) {\n    updateCustomerEmail(email: $email, password: $password){\n      customer {\n        date_of_birth\n        default_billing\n        default_shipping\n        email\n        firstname\n        is_subscribed\n        lastname\n        middlename\n        prefix\n        suffix\n        taxvat\n        addresses {\n          city\n          country_code\n          default_billing\n          default_shipping\n          extension_attributes {\n            attribute_code\n            value\n          }\n          firstname\n          id\n          lastname\n          postcode\n          prefix\n          region {\n            region_code\n            region_id\n            region\n          }\n          street\n          suffix\n          telephone\n          vat_id\n        }\n      }\n    }\n  }\n`;\n", "import { FetchResult } from '@apollo/client/core';\nimport { CustomQuery } from '@vue-storefront/core';\nimport updateCustomerEmail from './updateCustomerEmail';\nimport { Context } from '../../types/context';\nimport { UpdateCustomerEmailMutation, UpdateCustomerEmailMutationVariables } from '../../types/GraphQL';\nimport getHeaders from '../getHeaders';\n\nexport default async (\n  context: Context,\n  input: UpdateCustomerEmailMutationVariables,\n  customQuery: CustomQuery = { updateCustomerEmail: 'updateCustomerEmail' },\n): Promise<FetchResult<UpdateCustomerEmailMutation>> => {\n  const { updateCustomerEmail: updateCustomerEmailGQL } = context.extendQuery(\n    customQuery,\n    {\n      updateCustomerEmail: {\n        query: updateCustomerEmail,\n        variables: { ...input },\n      },\n    },\n  );\n\n  return context.client.mutate<UpdateCustomerEmailMutation, UpdateCustomerEmailMutationVariables>({\n    mutation: updateCustomerEmailGQL.query,\n    variables: updateCustomerEmailGQL.variables,\n    context: {\n      headers: getHeaders(context),\n    },\n  });\n};\n", "import gql from 'graphql-tag';\n\nexport default gql`\n  query upsellProducts(\n    $search: String = \"\"\n    $filter: ProductAttributeFilterInput\n    $pageSize: Int = 10\n    $currentPage: Int = 1\n    $sort: ProductAttributeSortInput\n  ) {\n    products(\n      search: $search\n      filter: $filter\n      sort: $sort\n      pageSize: $pageSize\n      currentPage: $currentPage\n    ){\n      items {\n        upsell_products {\n          uid\n    __typename\n    sku\n    name\n    stock_status\n    only_x_left_in_stock\n    rating_summary\n    thumbnail {\n      url\n      position\n      disabled\n      label\n    }\n    url_key\n    url_rewrites {\n      url\n    }\n    price_range {\n      maximum_price {\n        final_price {\n          currency\n          value\n        }\n        regular_price {\n          currency\n          value\n        }\n      }\n      minimum_price {\n        final_price {\n          currency\n          value\n        }\n        regular_price {\n          currency\n          value\n        }\n      }\n    }\n    categories {\n      uid\n      name\n      url_suffix\n      url_path\n      breadcrumbs {\n        category_name,\n        category_url_path\n      }\n    }\n    review_count\n    reviews {\n      items {\n        average_rating\n        ratings_breakdown {\n          name\n          value\n        }\n      }\n    }\n        }\n        uid\n      }\n    }\n  }\n`;\n", "import type { ApolloQueryResult } from '@apollo/client/core';\nimport type { CustomQuery } from '@vue-storefront/core';\nimport upsellProducts from './upsellProducts';\nimport type { Context } from '../../types/context';\nimport type { GetProductSearchParams } from '../../types/API';\nimport type {\n  ProductAttributeFilterInput,\n  ProductAttributeSortInput,\n  UpsellProductsQuery,\n  UpsellProductsQueryVariables,\n} from '../../types/GraphQL';\nimport getHeaders from '../getHeaders';\n\ntype Variables = {\n  pageSize: number;\n  currentPage: number;\n  search?: string;\n  filter?: ProductAttributeFilterInput;\n  sort?: ProductAttributeSortInput;\n};\n\n/**\n * Returns upsell products matching the provided parameters. To override the default query, use the `upsellProducts` query key.\n */\nexport default async (\n  context: Context,\n  searchParams?: GetProductSearchParams,\n  customQuery: CustomQuery = { upsellProducts: 'upsellProducts' },\n): Promise<ApolloQueryResult<UpsellProductsQuery>> => {\n  const defaultParams = {\n    pageSize: 10,\n    currentPage: 1,\n    ...searchParams,\n  };\n\n  const variables: Variables = {\n    pageSize: defaultParams.pageSize,\n    currentPage: defaultParams.currentPage,\n  };\n\n  if (defaultParams.search) variables.search = defaultParams.search;\n\n  if (defaultParams.filter) variables.filter = defaultParams.filter;\n\n  if (defaultParams.sort) variables.sort = defaultParams.sort;\n\n  const { upsellProducts: upsellProductsGQL } = context.extendQuery(customQuery, {\n    upsellProducts: {\n      query: upsellProducts,\n      variables,\n    },\n  });\n\n  try {\n    return await context.client.query<UpsellProductsQuery, UpsellProductsQueryVariables>({\n      query: upsellProductsGQL.query,\n      variables: upsellProductsGQL.variables,\n      context: {\n        headers: getHeaders(context),\n      },\n    });\n  } catch (error) {\n    throw error.graphQLErrors?.[0].message || error.networkError?.result || error;\n  }\n};\n", "import gql from 'graphql-tag';\n\n/** GraphQL Query that fetches the resolver for received URL. */\nexport default gql`\n  query urlResolver($url: String!) {\n    urlResolver(url: $url) {\n      id\n      redirectCode\n      relative_url\n      type\n      entity_uid\n    }\n  }\n`;\n", "import type { ApolloQueryResult } from '@apollo/client/core';\nimport type { CustomQuery } from '@vue-storefront/core';\nimport type { UrlResolverQuery, UrlResolverQueryVariables } from '../../types/GraphQL';\nimport urlResolverQuery from './urlResolver';\nimport type { Context } from '../../types/context';\nimport getHeaders from '../getHeaders';\n\n/**\n * Fetches the resolver for received URL.\n *\n * @param context VSF Context\n * @param url the URL to be resolved\n * @param [customQuery] (optional) - custom GraphQL query that extends the default one\n * @deprecated - use route instead\n */\nexport default async function urlResolver(\n  context: Context,\n  url: string,\n  customQuery: CustomQuery = { urlResolver: 'urlResolver' },\n): Promise<ApolloQueryResult<UrlResolverQuery>> {\n  const { urlResolver: urlResolverGQL } = context.extendQuery(customQuery, {\n    urlResolver: {\n      query: urlResolverQuery,\n      variables: { url },\n    },\n  });\n\n  return context.client.query<UrlResolverQuery, UrlResolverQueryVariables>({\n    query: urlResolverGQL.query,\n    variables: urlResolverGQL.variables,\n    context: {\n      headers: getHeaders(context),\n    },\n  });\n}\n", "import gql from 'graphql-tag';\n\n/** GraphQL Query that fetches the resolver for received URL. */\nexport default gql`\n  query route($url: String!) {\n    route(url: $url) {\n      type\n       ... on ProductInterface {\n        sku\n      }\n      ... on CategoryTree {\n        uid\n      }\n      ... on CmsPage {\n        identifier\n      }\n    }\n  }\n`;\n", "import type { ApolloQueryResult } from '@apollo/client/core';\nimport type { CustomQuery } from '@vue-storefront/core';\nimport type { QueryRouteArgs, RoutableInterface } from '../../types/GraphQL';\nimport routeQuery from './route';\nimport type { Context } from '../../types/context';\nimport getHeaders from '../getHeaders';\n\nexport type RouteQuery<ROUTE_TYPE> = {\n  route: ROUTE_TYPE\n};\n\n/**\n * Returns the canonical URL for a specified product, category, or CMS page\n *\n * @param context VSF Context\n * @param url the URL to be resolved\n * @param [customQuery] (optional) - custom GraphQL query that extends the default one\n */\nexport default async function route(\n  context: Context,\n  url: string,\n  customQuery: CustomQuery = { route: 'route' },\n): Promise<ApolloQueryResult<RouteQuery<RoutableInterface>>> {\n  const { route: routeGQL } = context.extendQuery(customQuery, {\n    route: {\n      query: routeQuery,\n      variables: { url },\n    },\n  });\n\n  return context.client.query<RouteQuery<RoutableInterface>, QueryRouteArgs>({\n    query: routeGQL.query,\n    variables: routeGQL.variables,\n    context: {\n      headers: getHeaders(context),\n    },\n  });\n}\n", "import gql from 'graphql-tag';\n\nexport default gql`\n  query wishlist($currentPage: Int = 1, $pageSize: Int = 10) {\n    customer {\n      wishlists {\n        id\n        items_count\n        sharing_code\n        items_v2(currentPage: $currentPage, pageSize: $pageSize) {\n          items {\n            id\n            quantity\n            description\n            added_at\n            product {\n              ...on ConfigurableProduct {\n                configurable_options {\n                  attribute_code\n                  attribute_uid\n                  label\n                  position\n                  uid\n                  use_default\n                  values {\n                    label\n                    swatch_data {\n                      value\n                    }\n                    uid\n                  }\n                }\n              }\n              ... on BundleProduct {\n                items {\n                  sku\n                  title\n                  options {\n                    uid\n                    quantity\n                    product {\n                      uid\n                      sku\n                      name\n                      price_range {\n                        maximum_price {\n                          final_price {\n                            currency\n                            value\n                          }\n                          regular_price {\n                            currency\n                            value\n                          }\n                        }\n                        minimum_price {\n                          final_price {\n                            currency\n                            value\n                          }\n                          regular_price {\n                            currency\n                            value\n                          }\n                        }\n                      }\n                    }\n                  }\n                }\n              }\n              uid\n              __typename\n              sku\n              name\n              stock_status\n              only_x_left_in_stock\n              rating_summary\n              categories {\n                uid\n                name\n                url_suffix\n                url_path\n                breadcrumbs {\n                  category_name,\n                  category_url_path\n                }\n              }\n              price_range {\n                maximum_price {\n                  final_price {\n                    currency\n                    value\n                  }\n                  regular_price {\n                    currency\n                    value\n                  }\n                }\n                minimum_price {\n                  final_price {\n                    currency\n                    value\n                  }\n                  regular_price {\n                    currency\n                    value\n                  }\n                }\n              }\n              thumbnail {\n                url\n                position\n                disabled\n                label\n              }\n              url_key\n              url_rewrites {\n                url\n              }\n              review_count\n              reviews {\n                items {\n                  average_rating\n                  ratings_breakdown {\n                    name\n                    value\n                  }\n                }\n              }\n              ... on GroupedProduct {\n                items {\n                  product {\n                    sku\n                  }\n                }\n              }\n            }\n          }\n          page_info {\n            current_page\n            page_size\n            total_pages\n          }\n        }\n      }\n    }\n  }\n`;\n", "import { ApolloQueryResult } from '@apollo/client/core';\nimport { CustomQuery } from '@vue-storefront/core';\nimport {\n  WishlistQuery,\n  WishlistQueryVariables,\n} from '../../types/GraphQL';\nimport wishlistQuery from './wishlist';\nimport { Context } from '../../types/context';\nimport getHeaders from '../getHeaders';\n\ntype Variables = {\n  pageSize: number;\n  currentPage: number;\n};\n\nexport default async (\n  context: Context,\n  searchParams: WishlistQueryVariables,\n  customQuery: CustomQuery = { wishlist: 'wishlist' },\n): Promise<ApolloQueryResult<WishlistQuery>> => {\n  const defaultParams = {\n    pageSize: 10,\n    currentPage: 1,\n    ...searchParams,\n  };\n\n  const variables: Variables = {\n    pageSize: defaultParams.pageSize <= 0 ? 10 : defaultParams.pageSize,\n    currentPage: defaultParams.currentPage <= 0 ? 1 : defaultParams.currentPage,\n  };\n\n  const { wishlist } = context.extendQuery(customQuery, {\n    wishlist: {\n      query: wishlistQuery,\n      variables,\n    },\n  });\n  try {\n    return await context.client\n      .query<WishlistQuery, WishlistQueryVariables>({\n      query: wishlist.query,\n      variables: wishlist.variables,\n      context: {\n        headers: getHeaders(context),\n      },\n    });\n  } catch (error) {\n    throw error.graphQLErrors?.[0].message || error.networkError?.result || error;\n  }\n};\n", "import gql from 'graphql-tag';\n\nexport default gql`\n  query wishlist {\n    customer {\n      wishlists {\n        items_count\n      }\n    }\n  }\n`;\n", "import { ApolloQueryResult } from '@apollo/client/core';\nimport { CustomQuery } from '@vue-storefront/core';\n\nimport {\n  WishlistQuery,\n} from '../../types/GraphQL';\nimport query from './wishlistItemsCount';\nimport { Context } from '../../types/context';\nimport getHeaders from '../getHeaders';\n\nexport default async (\n  context: Context,\n  customQuery: CustomQuery = { wishlistItemsCount: 'wishlistItemsCount' },\n): Promise<ApolloQueryResult<WishlistQuery>> => {\n  const { wishlistItemsCount } = context.extendQuery(customQuery, {\n    wishlistItemsCount: {\n      query,\n    },\n  });\n  try {\n    return await context.client.query<WishlistQuery>({\n      query: wishlistItemsCount.query,\n      context: {\n        headers: getHeaders(context),\n      },\n    });\n  } catch (error) {\n    throw error.graphQLErrors?.[0].message || error.networkError?.result || error;\n  }\n};\n", "import { Logger } from '@vue-storefront/core';\nimport { Config } from '../../types/setup';\nimport { apolloLinkFactory } from './graphQl';\nimport { linkFactory } from './linkHandlers';\n\nexport const createMagentoConnection = (settings: Config) => {\n  Logger.debug('createMagentoConnection');\n\n  const apolloLink = apolloLinkFactory(settings, {\n    apolloLink: linkFactory({ state: settings.state }),\n  });\n\n  return {\n    apolloLink,\n  };\n};\n", "/* eslint-disable @typescript-eslint/restrict-template-expressions */\nimport {\n  ApolloClient,\n  ApolloLink,\n  HttpLink,\n  InMemoryCache,\n  from,\n} from '@apollo/client/core';\nimport fetch from 'isomorphic-fetch';\nimport { Logger } from '@vue-storefront/core';\nimport { onError } from '@apollo/client/link/error';\nimport { RetryLink } from '@apollo/client/link/retry';\nimport { setContext } from '@apollo/client/link/context';\nimport AgentKeepAlive from 'agentkeepalive';\nimport { handleRetry } from './linkHandlers';\nimport { Config } from '../../types/setup';\nimport possibleTypes from '../../types/possibleTypes.json';\nimport standardURL from '../url/standardURL';\n\nconst { HttpsAgent } = AgentKeepAlive;\nconst agent = new HttpsAgent();\n\nconst createErrorHandler = () => onError(({\n  graphQLErrors,\n  networkError,\n}) => {\n  if (graphQLErrors) {\n    graphQLErrors.forEach(({\n      message,\n      locations,\n      path,\n      extensions,\n    }) => {\n      // Mute all GraphQL authorization errors\n      if (extensions?.category === 'graphql-authorization') {\n        return;\n      }\n\n      if (!message.includes('Resource Owner Password Credentials Grant')) {\n        if (!locations) {\n          Logger.error(`[GraphQL error]: Message: ${message}, Path: ${path}`);\n          return;\n        }\n\n        const parsedLocations = locations.map(({\n          column,\n          line,\n        }) => `[column: ${column}, line: ${line}]`);\n\n        Logger.error(`[GraphQL error]: Message: ${message}, Location: ${parsedLocations.join(', ')}, Path: ${path}`);\n      }\n    });\n  }\n\n  if (networkError) {\n    Logger.error(`[Network error]: ${networkError}`);\n  }\n});\n\nexport const apolloLinkFactory = (settings: Config, handlers?: {\n  apolloLink?: ApolloLink;\n}) => {\n  const baseLink = handlers?.apolloLink || setContext((apolloReq, { headers }) => ({\n    headers: {\n      ...headers,\n    },\n  }));\n\n  const httpLink = new HttpLink({\n    uri: settings.api,\n    // @ts-ignore\n    fetch: (url, options) => fetch(standardURL(url), options),\n    fetchOptions: {\n      agent,\n    },\n    ...settings.customApolloHttpLinkOptions,\n  });\n\n  const onErrorLink = createErrorHandler();\n\n  const errorRetry = new RetryLink({\n    attempts: handleRetry(),\n    delay: () => 0,\n  });\n\n  return from([\n    onErrorLink,\n    errorRetry,\n    // eslint-disable-next-line unicorn/prefer-spread\n    baseLink.concat(httpLink),\n  ]);\n};\n\nexport const apolloClientFactory = (customOptions: Record<string, any>) => new ApolloClient({\n  cache: new InMemoryCache({\n    possibleTypes,\n    resultCaching: true,\n  }),\n  queryDeduplication: true,\n  ssrMode: true,\n  ...customOptions,\n});\n", "import { Logger } from '@vue-storefront/core';\nimport { setContext } from '@apollo/client/link/context';\nimport { ConfigState } from '../../types/setup';\n\nexport const handleRetry = () => (count, operation, error) => {\n  if (count > 3) {\n    return false;\n  }\n\n  if (error?.result?.message === 'invalid_token') {\n    // eslint-disable-next-line @typescript-eslint/restrict-template-expressions\n    Logger.debug(`Apollo retry-link, the operation (${operation.operationName}) sent with wrong token, creating a new one... (attempt: ${count})`);\n    return true;\n  }\n\n  return false;\n};\n\nexport const linkFactory = ({ state }: {\n  state: ConfigState;\n}) => setContext((apolloReq, { headers }) => {\n  Logger.debug('Apollo linkFactory', apolloReq.operationName);\n\n  const Store: string = state.getStore();\n  const token: string = state.getCustomerToken();\n  const currency: string = state.getCurrency();\n\n  if (currency) {\n    Logger.debug('Apollo currencyLinkFactory, finished, currency: ', currency);\n  }\n\n  if (Store) {\n    Logger.debug('Apollo storeLinkFactory, finished, storeId: ', Store);\n  }\n\n  if (token) {\n    Logger.debug('Apollo authLinkFactory, finished, token: ', token);\n  }\n\n  return {\n    headers: {\n      ...headers,\n      ...(currency ? { 'Content-Currency': currency } : {}),\n      ...(token ? { authorization: `Bearer ${token}` } : {}),\n      ...(Store ? { Store } : {}),\n    },\n  };\n});\n", "import { stripIgnoredCharacters } from 'graphql';\nimport { URL } from 'node:url';\n\nexport default (initialUrl: string) => {\n  const url = new URL(initialUrl);\n  const query = url.searchParams.get('query');\n\n  if (!query) return initialUrl;\n\n  url.searchParams.set('query', stripIgnoredCharacters(query));\n\n  return url.toString();\n};\n", "import { ClientConfig } from '../../types/setup';\n\nexport const defaultSettings: ClientConfig = {\n  api: '',\n  cookies: {\n    currencyCookieName: 'vsf-currency',\n    countryCookieName: 'vsf-country',\n    localeCookieName: 'vsf-locale',\n    cartCookieName: 'vsf-cart',\n    customerCookieName: 'vsf-customer',\n    storeCookieName: 'vsf-store',\n  },\n  state: {\n    getCartId: () => '',\n    setCartId: () => {},\n    getCustomerToken: () => '',\n    setCustomerToken: () => {},\n    getStore: () => '',\n    setStore: () => {},\n    getCurrency: () => '',\n    setCurrency: () => {},\n    getLocale: () => '',\n    setLocale: () => {},\n    getCountry: () => '',\n    setCountry: () => {},\n    setMessage: () => {},\n    // @ts-ignore\n    getMessage: () => ({}),\n  },\n  externalCheckout: {\n    enable: false,\n    syncUrlPath: '/vue/cart/sync',\n    stores: {},\n    cmsUrl: '',\n  },\n};\n"],
  "mappings": "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",
  "names": []
}
